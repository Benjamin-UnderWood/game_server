%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.4.0
-module(logic).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_MSG/1, enum_value_by_symbol_MSG/1]).
-export([enum_symbol_by_value_ERROR_CODE/1, enum_value_by_symbol_ERROR_CODE/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("logic.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'MSG'() :: 'NONE' | 'HEART_REQ' | 'HEART_RES' | 'LOGIN_REQ' | 'LOGIN_RES' | 'ROLE_INFO_REQ' | 'ROLE_INFO_RES' | 'ROLE_ASSET_CHANGE_NOTIFY' | 'BOX_REWARD_REQ' | 'BOX_REWARD_RES' | 'OFFLINE_REWARD_REQ' | 'OFFLINE_REWARD_RES' | 'OFFLINE_INFO_REQ' | 'OFFLINE_INFO_RES' | 'PRODUCE_NEW_REQ' | 'PRODUCE_NEW_RES' | 'MERGE_EXCHANGE_REQ' | 'MERGE_EXCHANGE_RES' | 'RECOVERY_OBJECT_REQ' | 'RECOVERY_OBJECT_RES' | 'OBJECT_PRODUCE_ASSET_NOTIFY' | 'POS_INFO_REQ' | 'POS_INFO_RES' | 'BUY_OBJECT_REQ' | 'BUY_OBJECT_RES' | 'SHOP_INFO_REQ' | 'SHOP_INFO_RES' | 'SIGN_INFO_REQ' | 'SIGN_INFO_RES' | 'SIGN_REWARD_REQ' | 'SIGN_REWARD_RES' | 'TURNTABLE_INFO_REQ' | 'TURNTABLE_INFO_RES' | 'PLAY_TURNTABLE_REQ' | 'PLAY_TURNTABLE_RES' | 'AD_REWARD_REQ' | 'AD_REWARD_RES' | 'INVITE_INFO_REQ' | 'INVITE_INFO_RES' | 'INVITE_REWARD_REQ' | 'INVITE_REWARD_RES' | 'ORDER_INFO_REQ' | 'ORDER_INFO_RES' | 'ORDER_ACCEPT_REQ' | 'ORDER_DELIVERY_REQ' | 'ORDER_REWQRD_REQ' | 'OPDER_COMMON_RES' | 'WAITER_INFO_REQ' | 'WAITER_INFO_RES' | 'WAITER_UNLOCK_REQ' | 'WAITER_UNLOCK_RES' | 'WAITER_INTIMATE_REQ' | 'WAITER_INTIMATE_RES' | 'SPEED_UP_REQ' | 'SPEED_UP_RES' | 'WECHAT_LOGIN_REQ' | 'WECHAT_LOGIN_RES'.
-type 'ERROR_CODE'() :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT'.
-export_type(['MSG'/0, 'ERROR_CODE'/0]).

%% message types
-type 'HeartReq'() :: #'HeartReq'{}.

-type 'HeartRes'() :: #'HeartRes'{}.

-type 'LoginReq'() :: #'LoginReq'{}.

-type 'LoginRes'() :: #'LoginRes'{}.

-type 'RoleInfo'() :: #'RoleInfo'{}.

-type 'RoleInfoReq'() :: #'RoleInfoReq'{}.

-type 'RoleInfoRes'() :: #'RoleInfoRes'{}.

-type 'RoleAssetChangeNotify'() :: #'RoleAssetChangeNotify'{}.

-type 'BoxRewardReq'() :: #'BoxRewardReq'{}.

-type 'BoxRewardRes'() :: #'BoxRewardRes'{}.

-type 'OfflineRewardReq'() :: #'OfflineRewardReq'{}.

-type 'OfflineRewardRes'() :: #'OfflineRewardRes'{}.

-type 'OfflineInfoReq'() :: #'OfflineInfoReq'{}.

-type 'OfflineInfoRes'() :: #'OfflineInfoRes'{}.

-type 'PosInfo'() :: #'PosInfo'{}.

-type 'ShopInfo'() :: #'ShopInfo'{}.

-type 'ProduceNewReq'() :: #'ProduceNewReq'{}.

-type 'ProduceNewRes'() :: #'ProduceNewRes'{}.

-type 'MergeExchangeReq'() :: #'MergeExchangeReq'{}.

-type 'MergeExchangeRes'() :: #'MergeExchangeRes'{}.

-type 'RecoveryObjectReq'() :: #'RecoveryObjectReq'{}.

-type 'RecoveryObjectRes'() :: #'RecoveryObjectRes'{}.

-type 'ObjectProduceAssetNotify'() :: #'ObjectProduceAssetNotify'{}.

-type 'PosInfoReq'() :: #'PosInfoReq'{}.

-type 'PosInfoRes'() :: #'PosInfoRes'{}.

-type 'BuyObjectReq'() :: #'BuyObjectReq'{}.

-type 'BuyObjectRes'() :: #'BuyObjectRes'{}.

-type 'ShopInfoReq'() :: #'ShopInfoReq'{}.

-type 'ShopInfoRes'() :: #'ShopInfoRes'{}.

-type 'SignInfoReq'() :: #'SignInfoReq'{}.

-type 'SignInfoRes'() :: #'SignInfoRes'{}.

-type 'SignRewardReq'() :: #'SignRewardReq'{}.

-type 'SignRewardRes'() :: #'SignRewardRes'{}.

-type 'TurntableInfoReq'() :: #'TurntableInfoReq'{}.

-type 'TurntableInfoRes'() :: #'TurntableInfoRes'{}.

-type 'PlayTurntableReq'() :: #'PlayTurntableReq'{}.

-type 'PlayTurntableRes'() :: #'PlayTurntableRes'{}.

-type 'AdRewardReq'() :: #'AdRewardReq'{}.

-type 'AdRewardRes'() :: #'AdRewardRes'{}.

-type 'InviteInfo'() :: #'InviteInfo'{}.

-type 'InviteInfoReq'() :: #'InviteInfoReq'{}.

-type 'InviteInfoRes'() :: #'InviteInfoRes'{}.

-type 'InviteRewardReq'() :: #'InviteRewardReq'{}.

-type 'InviteRewardRes'() :: #'InviteRewardRes'{}.

-type 'OrderInfo'() :: #'OrderInfo'{}.

-type 'OrderInfoReq'() :: #'OrderInfoReq'{}.

-type 'OrderInfoRes'() :: #'OrderInfoRes'{}.

-type 'OrderAcceptReq'() :: #'OrderAcceptReq'{}.

-type 'OrderDeliveryReq'() :: #'OrderDeliveryReq'{}.

-type 'OrderRewardReq'() :: #'OrderRewardReq'{}.

-type 'OrderCommonRes'() :: #'OrderCommonRes'{}.

-type 'WaiterInfo'() :: #'WaiterInfo'{}.

-type 'WaiterInfoReq'() :: #'WaiterInfoReq'{}.

-type 'WaiterInfoRes'() :: #'WaiterInfoRes'{}.

-type 'WaiterUnlockReq'() :: #'WaiterUnlockReq'{}.

-type 'WaiterUnlockRes'() :: #'WaiterUnlockRes'{}.

-type 'WaiterIntimateReq'() :: #'WaiterIntimateReq'{}.

-type 'WaiterIntimateRes'() :: #'WaiterIntimateRes'{}.

-type 'SpeedUpReq'() :: #'SpeedUpReq'{}.

-type 'SpeedUpRes'() :: #'SpeedUpRes'{}.

-type 'WechatLoginReq'() :: #'WechatLoginReq'{}.

-type 'WechatLoginRes'() :: #'WechatLoginRes'{}.

-export_type(['HeartReq'/0, 'HeartRes'/0, 'LoginReq'/0, 'LoginRes'/0, 'RoleInfo'/0, 'RoleInfoReq'/0, 'RoleInfoRes'/0, 'RoleAssetChangeNotify'/0, 'BoxRewardReq'/0, 'BoxRewardRes'/0, 'OfflineRewardReq'/0, 'OfflineRewardRes'/0, 'OfflineInfoReq'/0, 'OfflineInfoRes'/0, 'PosInfo'/0, 'ShopInfo'/0, 'ProduceNewReq'/0, 'ProduceNewRes'/0, 'MergeExchangeReq'/0, 'MergeExchangeRes'/0, 'RecoveryObjectReq'/0, 'RecoveryObjectRes'/0, 'ObjectProduceAssetNotify'/0, 'PosInfoReq'/0, 'PosInfoRes'/0, 'BuyObjectReq'/0, 'BuyObjectRes'/0, 'ShopInfoReq'/0, 'ShopInfoRes'/0, 'SignInfoReq'/0, 'SignInfoRes'/0, 'SignRewardReq'/0, 'SignRewardRes'/0, 'TurntableInfoReq'/0, 'TurntableInfoRes'/0, 'PlayTurntableReq'/0, 'PlayTurntableRes'/0, 'AdRewardReq'/0, 'AdRewardRes'/0, 'InviteInfo'/0, 'InviteInfoReq'/0, 'InviteInfoRes'/0, 'InviteRewardReq'/0, 'InviteRewardRes'/0, 'OrderInfo'/0, 'OrderInfoReq'/0, 'OrderInfoRes'/0, 'OrderAcceptReq'/0, 'OrderDeliveryReq'/0, 'OrderRewardReq'/0, 'OrderCommonRes'/0, 'WaiterInfo'/0, 'WaiterInfoReq'/0, 'WaiterInfoRes'/0, 'WaiterUnlockReq'/0, 'WaiterUnlockRes'/0, 'WaiterIntimateReq'/0, 'WaiterIntimateRes'/0, 'SpeedUpReq'/0, 'SpeedUpRes'/0, 'WechatLoginReq'/0, 'WechatLoginRes'/0]).

-spec encode_msg(#'HeartReq'{} | #'HeartRes'{} | #'LoginReq'{} | #'LoginRes'{} | #'RoleInfo'{} | #'RoleInfoReq'{} | #'RoleInfoRes'{} | #'RoleAssetChangeNotify'{} | #'BoxRewardReq'{} | #'BoxRewardRes'{} | #'OfflineRewardReq'{} | #'OfflineRewardRes'{} | #'OfflineInfoReq'{} | #'OfflineInfoRes'{} | #'PosInfo'{} | #'ShopInfo'{} | #'ProduceNewReq'{} | #'ProduceNewRes'{} | #'MergeExchangeReq'{} | #'MergeExchangeRes'{} | #'RecoveryObjectReq'{} | #'RecoveryObjectRes'{} | #'ObjectProduceAssetNotify'{} | #'PosInfoReq'{} | #'PosInfoRes'{} | #'BuyObjectReq'{} | #'BuyObjectRes'{} | #'ShopInfoReq'{} | #'ShopInfoRes'{} | #'SignInfoReq'{} | #'SignInfoRes'{} | #'SignRewardReq'{} | #'SignRewardRes'{} | #'TurntableInfoReq'{} | #'TurntableInfoRes'{} | #'PlayTurntableReq'{} | #'PlayTurntableRes'{} | #'AdRewardReq'{} | #'AdRewardRes'{} | #'InviteInfo'{} | #'InviteInfoReq'{} | #'InviteInfoRes'{} | #'InviteRewardReq'{} | #'InviteRewardRes'{} | #'OrderInfo'{} | #'OrderInfoReq'{} | #'OrderInfoRes'{} | #'OrderAcceptReq'{} | #'OrderDeliveryReq'{} | #'OrderRewardReq'{} | #'OrderCommonRes'{} | #'WaiterInfo'{} | #'WaiterInfoReq'{} | #'WaiterInfoRes'{} | #'WaiterUnlockReq'{} | #'WaiterUnlockRes'{} | #'WaiterIntimateReq'{} | #'WaiterIntimateRes'{} | #'SpeedUpReq'{} | #'SpeedUpRes'{} | #'WechatLoginReq'{} | #'WechatLoginRes'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'HeartReq'{} | #'HeartRes'{} | #'LoginReq'{} | #'LoginRes'{} | #'RoleInfo'{} | #'RoleInfoReq'{} | #'RoleInfoRes'{} | #'RoleAssetChangeNotify'{} | #'BoxRewardReq'{} | #'BoxRewardRes'{} | #'OfflineRewardReq'{} | #'OfflineRewardRes'{} | #'OfflineInfoReq'{} | #'OfflineInfoRes'{} | #'PosInfo'{} | #'ShopInfo'{} | #'ProduceNewReq'{} | #'ProduceNewRes'{} | #'MergeExchangeReq'{} | #'MergeExchangeRes'{} | #'RecoveryObjectReq'{} | #'RecoveryObjectRes'{} | #'ObjectProduceAssetNotify'{} | #'PosInfoReq'{} | #'PosInfoRes'{} | #'BuyObjectReq'{} | #'BuyObjectRes'{} | #'ShopInfoReq'{} | #'ShopInfoRes'{} | #'SignInfoReq'{} | #'SignInfoRes'{} | #'SignRewardReq'{} | #'SignRewardRes'{} | #'TurntableInfoReq'{} | #'TurntableInfoRes'{} | #'PlayTurntableReq'{} | #'PlayTurntableRes'{} | #'AdRewardReq'{} | #'AdRewardRes'{} | #'InviteInfo'{} | #'InviteInfoReq'{} | #'InviteInfoRes'{} | #'InviteRewardReq'{} | #'InviteRewardRes'{} | #'OrderInfo'{} | #'OrderInfoReq'{} | #'OrderInfoRes'{} | #'OrderAcceptReq'{} | #'OrderDeliveryReq'{} | #'OrderRewardReq'{} | #'OrderCommonRes'{} | #'WaiterInfo'{} | #'WaiterInfoReq'{} | #'WaiterInfoRes'{} | #'WaiterUnlockReq'{} | #'WaiterUnlockRes'{} | #'WaiterIntimateReq'{} | #'WaiterIntimateRes'{} | #'SpeedUpReq'{} | #'SpeedUpRes'{} | #'WechatLoginReq'{} | #'WechatLoginRes'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'HeartReq'{} | #'HeartRes'{} | #'LoginReq'{} | #'LoginRes'{} | #'RoleInfo'{} | #'RoleInfoReq'{} | #'RoleInfoRes'{} | #'RoleAssetChangeNotify'{} | #'BoxRewardReq'{} | #'BoxRewardRes'{} | #'OfflineRewardReq'{} | #'OfflineRewardRes'{} | #'OfflineInfoReq'{} | #'OfflineInfoRes'{} | #'PosInfo'{} | #'ShopInfo'{} | #'ProduceNewReq'{} | #'ProduceNewRes'{} | #'MergeExchangeReq'{} | #'MergeExchangeRes'{} | #'RecoveryObjectReq'{} | #'RecoveryObjectRes'{} | #'ObjectProduceAssetNotify'{} | #'PosInfoReq'{} | #'PosInfoRes'{} | #'BuyObjectReq'{} | #'BuyObjectRes'{} | #'ShopInfoReq'{} | #'ShopInfoRes'{} | #'SignInfoReq'{} | #'SignInfoRes'{} | #'SignRewardReq'{} | #'SignRewardRes'{} | #'TurntableInfoReq'{} | #'TurntableInfoRes'{} | #'PlayTurntableReq'{} | #'PlayTurntableRes'{} | #'AdRewardReq'{} | #'AdRewardRes'{} | #'InviteInfo'{} | #'InviteInfoReq'{} | #'InviteInfoRes'{} | #'InviteRewardReq'{} | #'InviteRewardRes'{} | #'OrderInfo'{} | #'OrderInfoReq'{} | #'OrderInfoRes'{} | #'OrderAcceptReq'{} | #'OrderDeliveryReq'{} | #'OrderRewardReq'{} | #'OrderCommonRes'{} | #'WaiterInfo'{} | #'WaiterInfoReq'{} | #'WaiterInfoRes'{} | #'WaiterUnlockReq'{} | #'WaiterUnlockRes'{} | #'WaiterIntimateReq'{} | #'WaiterIntimateRes'{} | #'SpeedUpReq'{} | #'SpeedUpRes'{} | #'WechatLoginReq'{} | #'WechatLoginRes'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'HeartReq' ->
	  encode_msg_HeartReq(id(Msg, TrUserData), TrUserData);
      'HeartRes' ->
	  encode_msg_HeartRes(id(Msg, TrUserData), TrUserData);
      'LoginReq' ->
	  encode_msg_LoginReq(id(Msg, TrUserData), TrUserData);
      'LoginRes' ->
	  encode_msg_LoginRes(id(Msg, TrUserData), TrUserData);
      'RoleInfo' ->
	  encode_msg_RoleInfo(id(Msg, TrUserData), TrUserData);
      'RoleInfoReq' ->
	  encode_msg_RoleInfoReq(id(Msg, TrUserData), TrUserData);
      'RoleInfoRes' ->
	  encode_msg_RoleInfoRes(id(Msg, TrUserData), TrUserData);
      'RoleAssetChangeNotify' ->
	  encode_msg_RoleAssetChangeNotify(id(Msg, TrUserData),
					   TrUserData);
      'BoxRewardReq' ->
	  encode_msg_BoxRewardReq(id(Msg, TrUserData),
				  TrUserData);
      'BoxRewardRes' ->
	  encode_msg_BoxRewardRes(id(Msg, TrUserData),
				  TrUserData);
      'OfflineRewardReq' ->
	  encode_msg_OfflineRewardReq(id(Msg, TrUserData),
				      TrUserData);
      'OfflineRewardRes' ->
	  encode_msg_OfflineRewardRes(id(Msg, TrUserData),
				      TrUserData);
      'OfflineInfoReq' ->
	  encode_msg_OfflineInfoReq(id(Msg, TrUserData),
				    TrUserData);
      'OfflineInfoRes' ->
	  encode_msg_OfflineInfoRes(id(Msg, TrUserData),
				    TrUserData);
      'PosInfo' ->
	  encode_msg_PosInfo(id(Msg, TrUserData), TrUserData);
      'ShopInfo' ->
	  encode_msg_ShopInfo(id(Msg, TrUserData), TrUserData);
      'ProduceNewReq' ->
	  encode_msg_ProduceNewReq(id(Msg, TrUserData),
				   TrUserData);
      'ProduceNewRes' ->
	  encode_msg_ProduceNewRes(id(Msg, TrUserData),
				   TrUserData);
      'MergeExchangeReq' ->
	  encode_msg_MergeExchangeReq(id(Msg, TrUserData),
				      TrUserData);
      'MergeExchangeRes' ->
	  encode_msg_MergeExchangeRes(id(Msg, TrUserData),
				      TrUserData);
      'RecoveryObjectReq' ->
	  encode_msg_RecoveryObjectReq(id(Msg, TrUserData),
				       TrUserData);
      'RecoveryObjectRes' ->
	  encode_msg_RecoveryObjectRes(id(Msg, TrUserData),
				       TrUserData);
      'ObjectProduceAssetNotify' ->
	  encode_msg_ObjectProduceAssetNotify(id(Msg, TrUserData),
					      TrUserData);
      'PosInfoReq' ->
	  encode_msg_PosInfoReq(id(Msg, TrUserData), TrUserData);
      'PosInfoRes' ->
	  encode_msg_PosInfoRes(id(Msg, TrUserData), TrUserData);
      'BuyObjectReq' ->
	  encode_msg_BuyObjectReq(id(Msg, TrUserData),
				  TrUserData);
      'BuyObjectRes' ->
	  encode_msg_BuyObjectRes(id(Msg, TrUserData),
				  TrUserData);
      'ShopInfoReq' ->
	  encode_msg_ShopInfoReq(id(Msg, TrUserData), TrUserData);
      'ShopInfoRes' ->
	  encode_msg_ShopInfoRes(id(Msg, TrUserData), TrUserData);
      'SignInfoReq' ->
	  encode_msg_SignInfoReq(id(Msg, TrUserData), TrUserData);
      'SignInfoRes' ->
	  encode_msg_SignInfoRes(id(Msg, TrUserData), TrUserData);
      'SignRewardReq' ->
	  encode_msg_SignRewardReq(id(Msg, TrUserData),
				   TrUserData);
      'SignRewardRes' ->
	  encode_msg_SignRewardRes(id(Msg, TrUserData),
				   TrUserData);
      'TurntableInfoReq' ->
	  encode_msg_TurntableInfoReq(id(Msg, TrUserData),
				      TrUserData);
      'TurntableInfoRes' ->
	  encode_msg_TurntableInfoRes(id(Msg, TrUserData),
				      TrUserData);
      'PlayTurntableReq' ->
	  encode_msg_PlayTurntableReq(id(Msg, TrUserData),
				      TrUserData);
      'PlayTurntableRes' ->
	  encode_msg_PlayTurntableRes(id(Msg, TrUserData),
				      TrUserData);
      'AdRewardReq' ->
	  encode_msg_AdRewardReq(id(Msg, TrUserData), TrUserData);
      'AdRewardRes' ->
	  encode_msg_AdRewardRes(id(Msg, TrUserData), TrUserData);
      'InviteInfo' ->
	  encode_msg_InviteInfo(id(Msg, TrUserData), TrUserData);
      'InviteInfoReq' ->
	  encode_msg_InviteInfoReq(id(Msg, TrUserData),
				   TrUserData);
      'InviteInfoRes' ->
	  encode_msg_InviteInfoRes(id(Msg, TrUserData),
				   TrUserData);
      'InviteRewardReq' ->
	  encode_msg_InviteRewardReq(id(Msg, TrUserData),
				     TrUserData);
      'InviteRewardRes' ->
	  encode_msg_InviteRewardRes(id(Msg, TrUserData),
				     TrUserData);
      'OrderInfo' ->
	  encode_msg_OrderInfo(id(Msg, TrUserData), TrUserData);
      'OrderInfoReq' ->
	  encode_msg_OrderInfoReq(id(Msg, TrUserData),
				  TrUserData);
      'OrderInfoRes' ->
	  encode_msg_OrderInfoRes(id(Msg, TrUserData),
				  TrUserData);
      'OrderAcceptReq' ->
	  encode_msg_OrderAcceptReq(id(Msg, TrUserData),
				    TrUserData);
      'OrderDeliveryReq' ->
	  encode_msg_OrderDeliveryReq(id(Msg, TrUserData),
				      TrUserData);
      'OrderRewardReq' ->
	  encode_msg_OrderRewardReq(id(Msg, TrUserData),
				    TrUserData);
      'OrderCommonRes' ->
	  encode_msg_OrderCommonRes(id(Msg, TrUserData),
				    TrUserData);
      'WaiterInfo' ->
	  encode_msg_WaiterInfo(id(Msg, TrUserData), TrUserData);
      'WaiterInfoReq' ->
	  encode_msg_WaiterInfoReq(id(Msg, TrUserData),
				   TrUserData);
      'WaiterInfoRes' ->
	  encode_msg_WaiterInfoRes(id(Msg, TrUserData),
				   TrUserData);
      'WaiterUnlockReq' ->
	  encode_msg_WaiterUnlockReq(id(Msg, TrUserData),
				     TrUserData);
      'WaiterUnlockRes' ->
	  encode_msg_WaiterUnlockRes(id(Msg, TrUserData),
				     TrUserData);
      'WaiterIntimateReq' ->
	  encode_msg_WaiterIntimateReq(id(Msg, TrUserData),
				       TrUserData);
      'WaiterIntimateRes' ->
	  encode_msg_WaiterIntimateRes(id(Msg, TrUserData),
				       TrUserData);
      'SpeedUpReq' ->
	  encode_msg_SpeedUpReq(id(Msg, TrUserData), TrUserData);
      'SpeedUpRes' ->
	  encode_msg_SpeedUpRes(id(Msg, TrUserData), TrUserData);
      'WechatLoginReq' ->
	  encode_msg_WechatLoginReq(id(Msg, TrUserData),
				    TrUserData);
      'WechatLoginRes' ->
	  encode_msg_WechatLoginRes(id(Msg, TrUserData),
				    TrUserData)
    end.


encode_msg_HeartReq(_Msg, _TrUserData) -> <<>>.

encode_msg_HeartRes(_Msg, _TrUserData) -> <<>>.

encode_msg_LoginReq(Msg, TrUserData) ->
    encode_msg_LoginReq(Msg, <<>>, TrUserData).


encode_msg_LoginReq(#'LoginReq'{tokenId = F1, name = F2,
				headUrl = F3, gender = F4, inviteTokenId = F5},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     case is_empty_string(TrF5) of
	       true -> B4;
	       false ->
		   e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
	     end
	   end
    end.

encode_msg_LoginRes(Msg, TrUserData) ->
    encode_msg_LoginRes(Msg, <<>>, TrUserData).


encode_msg_LoginRes(#'LoginRes'{code = F1,
				tokenId = F2},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
					   'MaybeTrUserData')
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false ->
		   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

encode_msg_RoleInfo(Msg, TrUserData) ->
    encode_msg_RoleInfo(Msg, <<>>, TrUserData).


encode_msg_RoleInfo(#'RoleInfo'{tokenId = F1,
				headUrl = F2, name = F3, lv = F4, diamond = F5,
				coin = F6, reputation = F7, gender = F8,
				loginDay = F9, lastLogoutTime = F10},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0 -> B4;
		     true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 0 -> B5;
		     true -> e_varint(TrF6, <<B5/binary, 48>>, TrUserData)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 0 -> B6;
		     true -> e_varint(TrF7, <<B6/binary, 56>>, TrUserData)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= 0 -> B7;
		     true -> e_varint(TrF8, <<B7/binary, 64>>, TrUserData)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= 0 -> B8;
		     true -> e_varint(TrF9, <<B8/binary, 72>>, TrUserData)
		  end
		end
	 end,
    if F10 == undefined -> B9;
       true ->
	   begin
	     TrF10 = id(F10, TrUserData),
	     if TrF10 =:= 0 -> B9;
		true -> e_varint(TrF10, <<B9/binary, 80>>, TrUserData)
	     end
	   end
    end.

encode_msg_RoleInfoReq(_Msg, _TrUserData) -> <<>>.

encode_msg_RoleInfoRes(Msg, TrUserData) ->
    encode_msg_RoleInfoRes(Msg, <<>>, TrUserData).


encode_msg_RoleInfoRes(#'RoleInfoRes'{code = F1,
				      roleInfo = F2},
		       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
					   'MaybeTrUserData')
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_RoleInfoRes_roleInfo(TrF2, <<B1/binary, 18>>,
						  TrUserData)
	     end
	   end
    end.

encode_msg_RoleAssetChangeNotify(Msg, TrUserData) ->
    encode_msg_RoleAssetChangeNotify(Msg, <<>>, TrUserData).


encode_msg_RoleAssetChangeNotify(#'RoleAssetChangeNotify'{diamond
							      = F1,
							  coin = F2,
							  reputation = F3},
				 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
	     end
	   end
    end.

encode_msg_BoxRewardReq(_Msg, _TrUserData) -> <<>>.

encode_msg_BoxRewardRes(Msg, TrUserData) ->
    encode_msg_BoxRewardRes(Msg, <<>>, TrUserData).


encode_msg_BoxRewardRes(#'BoxRewardRes'{code = F1}, Bin,
			TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		true ->
		    e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
				      'MaybeTrUserData')
	     end
	   end
    end.

encode_msg_OfflineRewardReq(Msg, TrUserData) ->
    encode_msg_OfflineRewardReq(Msg, <<>>, TrUserData).


encode_msg_OfflineRewardReq(#'OfflineRewardReq'{type =
						    F1},
			    Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_OfflineRewardRes(Msg, TrUserData) ->
    encode_msg_OfflineRewardRes(Msg, <<>>, TrUserData).


encode_msg_OfflineRewardRes(#'OfflineRewardRes'{code =
						    F1},
			    Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		true ->
		    e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
				      'MaybeTrUserData')
	     end
	   end
    end.

encode_msg_OfflineInfoReq(_Msg, _TrUserData) -> <<>>.

encode_msg_OfflineInfoRes(Msg, TrUserData) ->
    encode_msg_OfflineInfoRes(Msg, <<>>, TrUserData).


encode_msg_OfflineInfoRes(#'OfflineInfoRes'{code = F1,
					    coin = F2},
			  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
					   'MaybeTrUserData')
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

encode_msg_PosInfo(Msg, TrUserData) ->
    encode_msg_PosInfo(Msg, <<>>, TrUserData).


encode_msg_PosInfo(#'PosInfo'{pos = F1, type = F2}, Bin,
		   TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

encode_msg_ShopInfo(Msg, TrUserData) ->
    encode_msg_ShopInfo(Msg, <<>>, TrUserData).


encode_msg_ShopInfo(#'ShopInfo'{id = F1, type = F2,
				price = F3},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
	     end
	   end
    end.

encode_msg_ProduceNewReq(_Msg, _TrUserData) -> <<>>.

encode_msg_ProduceNewRes(Msg, TrUserData) ->
    encode_msg_ProduceNewRes(Msg, <<>>, TrUserData).


encode_msg_ProduceNewRes(#'ProduceNewRes'{code = F1,
					  posInfo = F2, nextType = F3,
					  nextPrice = F4},
			 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
					   'MaybeTrUserData')
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= undefined -> B1;
		     true ->
			 e_mfield_ProduceNewRes_posInfo(TrF2, <<B1/binary, 18>>,
							TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0 -> B3;
		true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
	     end
	   end
    end.

encode_msg_MergeExchangeReq(Msg, TrUserData) ->
    encode_msg_MergeExchangeReq(Msg, <<>>, TrUserData).


encode_msg_MergeExchangeReq(#'MergeExchangeReq'{posOne =
						    F1,
						posTwo = F2},
			    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

encode_msg_MergeExchangeRes(Msg, TrUserData) ->
    encode_msg_MergeExchangeRes(Msg, <<>>, TrUserData).


encode_msg_MergeExchangeRes(#'MergeExchangeRes'{code =
						    F1,
						posInfo = F2, nextType = F3,
						nextPrice = F4},
			    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
					   'MaybeTrUserData')
		  end
		end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  e_field_MergeExchangeRes_posInfo(TrF2, B1, TrUserData)
	   end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0 -> B3;
		true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
	     end
	   end
    end.

encode_msg_RecoveryObjectReq(Msg, TrUserData) ->
    encode_msg_RecoveryObjectReq(Msg, <<>>, TrUserData).


encode_msg_RecoveryObjectReq(#'RecoveryObjectReq'{pos =
						      F1},
			     Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_RecoveryObjectRes(Msg, TrUserData) ->
    encode_msg_RecoveryObjectRes(Msg, <<>>, TrUserData).


encode_msg_RecoveryObjectRes(#'RecoveryObjectRes'{code =
						      F1,
						  posInfo = F2},
			     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
					   'MaybeTrUserData')
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_RecoveryObjectRes_posInfo(TrF2, B1, TrUserData)
      end
    end.

encode_msg_ObjectProduceAssetNotify(Msg, TrUserData) ->
    encode_msg_ObjectProduceAssetNotify(Msg, <<>>,
					TrUserData).


encode_msg_ObjectProduceAssetNotify(#'ObjectProduceAssetNotify'{pos
								    = F1,
								asset = F2},
				    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

encode_msg_PosInfoReq(_Msg, _TrUserData) -> <<>>.

encode_msg_PosInfoRes(Msg, TrUserData) ->
    encode_msg_PosInfoRes(Msg, <<>>, TrUserData).


encode_msg_PosInfoRes(#'PosInfoRes'{code = F1,
				    posInfo = F2, nextType = F3,
				    nextPrice = F4},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
					   'MaybeTrUserData')
		  end
		end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true -> e_field_PosInfoRes_posInfo(TrF2, B1, TrUserData)
	   end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0 -> B3;
		true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
	     end
	   end
    end.

encode_msg_BuyObjectReq(Msg, TrUserData) ->
    encode_msg_BuyObjectReq(Msg, <<>>, TrUserData).


encode_msg_BuyObjectReq(#'BuyObjectReq'{type = F1}, Bin,
			TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_BuyObjectRes(Msg, TrUserData) ->
    encode_msg_BuyObjectRes(Msg, <<>>, TrUserData).


encode_msg_BuyObjectRes(#'BuyObjectRes'{code = F1,
					posInfo = F2},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
					   'MaybeTrUserData')
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_BuyObjectRes_posInfo(TrF2, <<B1/binary, 18>>,
						  TrUserData)
	     end
	   end
    end.

encode_msg_ShopInfoReq(_Msg, _TrUserData) -> <<>>.

encode_msg_ShopInfoRes(Msg, TrUserData) ->
    encode_msg_ShopInfoRes(Msg, <<>>, TrUserData).


encode_msg_ShopInfoRes(#'ShopInfoRes'{code = F1,
				      shopInfo = F2},
		       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
					   'MaybeTrUserData')
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_ShopInfoRes_shopInfo(TrF2, B1, TrUserData)
      end
    end.

encode_msg_SignInfoReq(_Msg, _TrUserData) -> <<>>.

encode_msg_SignInfoRes(Msg, TrUserData) ->
    encode_msg_SignInfoRes(Msg, <<>>, TrUserData).


encode_msg_SignInfoRes(#'SignInfoRes'{code = F1,
				      isSign = F2, totalSignCnt = F3},
		       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
					   'MaybeTrUserData')
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= false -> B1;
		     true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
	     end
	   end
    end.

encode_msg_SignRewardReq(Msg, TrUserData) ->
    encode_msg_SignRewardReq(Msg, <<>>, TrUserData).


encode_msg_SignRewardReq(#'SignRewardReq'{type = F1},
			 Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_SignRewardRes(Msg, TrUserData) ->
    encode_msg_SignRewardRes(Msg, <<>>, TrUserData).


encode_msg_SignRewardRes(#'SignRewardRes'{code = F1},
			 Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		true ->
		    e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
				      'MaybeTrUserData')
	     end
	   end
    end.

encode_msg_TurntableInfoReq(_Msg, _TrUserData) -> <<>>.

encode_msg_TurntableInfoRes(Msg, TrUserData) ->
    encode_msg_TurntableInfoRes(Msg, <<>>, TrUserData).


encode_msg_TurntableInfoRes(#'TurntableInfoRes'{code =
						    F1,
						turntableCnt = F2},
			    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
					   'MaybeTrUserData')
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

encode_msg_PlayTurntableReq(_Msg, _TrUserData) -> <<>>.

encode_msg_PlayTurntableRes(Msg, TrUserData) ->
    encode_msg_PlayTurntableRes(Msg, <<>>, TrUserData).


encode_msg_PlayTurntableRes(#'PlayTurntableRes'{code =
						    F1,
						pos = F2, turntableCnt = F3},
			    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
					   'MaybeTrUserData')
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
	     end
	   end
    end.

encode_msg_AdRewardReq(_Msg, _TrUserData) -> <<>>.

encode_msg_AdRewardRes(Msg, TrUserData) ->
    encode_msg_AdRewardRes(Msg, <<>>, TrUserData).


encode_msg_AdRewardRes(#'AdRewardRes'{code = F1}, Bin,
		       TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		true ->
		    e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
				      'MaybeTrUserData')
	     end
	   end
    end.

encode_msg_InviteInfo(Msg, TrUserData) ->
    encode_msg_InviteInfo(Msg, <<>>, TrUserData).


encode_msg_InviteInfo(#'InviteInfo'{tokenId = F1,
				    headUrl = F2, sort = F3, isReward = F4},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= false -> B3;
		true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
	     end
	   end
    end.

encode_msg_InviteInfoReq(_Msg, _TrUserData) -> <<>>.

encode_msg_InviteInfoRes(Msg, TrUserData) ->
    encode_msg_InviteInfoRes(Msg, <<>>, TrUserData).


encode_msg_InviteInfoRes(#'InviteInfoRes'{code = F1,
					  infos = F2},
			 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
					   'MaybeTrUserData')
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_InviteInfoRes_infos(TrF2, B1, TrUserData)
      end
    end.

encode_msg_InviteRewardReq(Msg, TrUserData) ->
    encode_msg_InviteRewardReq(Msg, <<>>, TrUserData).


encode_msg_InviteRewardReq(#'InviteRewardReq'{id = F1},
			   Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_InviteRewardRes(Msg, TrUserData) ->
    encode_msg_InviteRewardRes(Msg, <<>>, TrUserData).


encode_msg_InviteRewardRes(#'InviteRewardRes'{code = F1,
					      id = F2},
			   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
					   'MaybeTrUserData')
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

encode_msg_OrderInfo(Msg, TrUserData) ->
    encode_msg_OrderInfo(Msg, <<>>, TrUserData).


encode_msg_OrderInfo(#'OrderInfo'{orderId = F1,
				  mapId = F2, orderState = F3, orderTime = F4},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0 -> B3;
		true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
	     end
	   end
    end.

encode_msg_OrderInfoReq(_Msg, _TrUserData) -> <<>>.

encode_msg_OrderInfoRes(Msg, TrUserData) ->
    encode_msg_OrderInfoRes(Msg, <<>>, TrUserData).


encode_msg_OrderInfoRes(#'OrderInfoRes'{code = F1,
					orderInfo = F2},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
					   'MaybeTrUserData')
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_OrderInfoRes_orderInfo(TrF2, B1, TrUserData)
      end
    end.

encode_msg_OrderAcceptReq(Msg, TrUserData) ->
    encode_msg_OrderAcceptReq(Msg, <<>>, TrUserData).


encode_msg_OrderAcceptReq(#'OrderAcceptReq'{orderId =
						F1},
			  Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_OrderDeliveryReq(Msg, TrUserData) ->
    encode_msg_OrderDeliveryReq(Msg, <<>>, TrUserData).


encode_msg_OrderDeliveryReq(#'OrderDeliveryReq'{orderId
						    = F1},
			    Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_OrderRewardReq(Msg, TrUserData) ->
    encode_msg_OrderRewardReq(Msg, <<>>, TrUserData).


encode_msg_OrderRewardReq(#'OrderRewardReq'{orderId =
						F1},
			  Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_OrderCommonRes(Msg, TrUserData) ->
    encode_msg_OrderCommonRes(Msg, <<>>, TrUserData).


encode_msg_OrderCommonRes(#'OrderCommonRes'{code = F1},
			  Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		true ->
		    e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
				      'MaybeTrUserData')
	     end
	   end
    end.

encode_msg_WaiterInfo(Msg, TrUserData) ->
    encode_msg_WaiterInfo(Msg, <<>>, TrUserData).


encode_msg_WaiterInfo(#'WaiterInfo'{id = F1, type = F2,
				    intimate = F3, skillLv = F4},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0 -> B3;
		true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
	     end
	   end
    end.

encode_msg_WaiterInfoReq(_Msg, _TrUserData) -> <<>>.

encode_msg_WaiterInfoRes(Msg, TrUserData) ->
    encode_msg_WaiterInfoRes(Msg, <<>>, TrUserData).


encode_msg_WaiterInfoRes(#'WaiterInfoRes'{code = F1,
					  waiterInfo = F2},
			 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
					   'MaybeTrUserData')
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_WaiterInfoRes_waiterInfo(TrF2, B1, TrUserData)
      end
    end.

encode_msg_WaiterUnlockReq(Msg, TrUserData) ->
    encode_msg_WaiterUnlockReq(Msg, <<>>, TrUserData).


encode_msg_WaiterUnlockReq(#'WaiterUnlockReq'{type =
						  F1},
			   Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_WaiterUnlockRes(Msg, TrUserData) ->
    encode_msg_WaiterUnlockRes(Msg, <<>>, TrUserData).


encode_msg_WaiterUnlockRes(#'WaiterUnlockRes'{code =
						  F1},
			   Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		true ->
		    e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
				      'MaybeTrUserData')
	     end
	   end
    end.

encode_msg_WaiterIntimateReq(Msg, TrUserData) ->
    encode_msg_WaiterIntimateReq(Msg, <<>>, TrUserData).


encode_msg_WaiterIntimateReq(#'WaiterIntimateReq'{id =
						      F1},
			     Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_WaiterIntimateRes(Msg, TrUserData) ->
    encode_msg_WaiterIntimateRes(Msg, <<>>, TrUserData).


encode_msg_WaiterIntimateRes(#'WaiterIntimateRes'{code =
						      F1,
						  waiterInfo = F2},
			     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
					   'MaybeTrUserData')
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_WaiterIntimateRes_waiterInfo(TrF2,
							  <<B1/binary, 18>>,
							  TrUserData)
	     end
	   end
    end.

encode_msg_SpeedUpReq(Msg, TrUserData) ->
    encode_msg_SpeedUpReq(Msg, <<>>, TrUserData).


encode_msg_SpeedUpReq(#'SpeedUpReq'{type = F1}, Bin,
		      TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_SpeedUpRes(Msg, TrUserData) ->
    encode_msg_SpeedUpRes(Msg, <<>>, TrUserData).


encode_msg_SpeedUpRes(#'SpeedUpRes'{code = F1,
				    coin = F2},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
					   'MaybeTrUserData')
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

encode_msg_WechatLoginReq(Msg, TrUserData) ->
    encode_msg_WechatLoginReq(Msg, <<>>, TrUserData).


encode_msg_WechatLoginReq(#'WechatLoginReq'{wxCode =
						F1},
			  Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false ->
		   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	     end
	   end
    end.

encode_msg_WechatLoginRes(Msg, TrUserData) ->
    encode_msg_WechatLoginRes(Msg, <<>>, TrUserData).


encode_msg_WechatLoginRes(#'WechatLoginRes'{code = F1,
					    openId = F2},
			  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_ERROR_CODE(TrF1, <<Bin/binary, 8>>,
					   'MaybeTrUserData')
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false ->
		   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

e_mfield_RoleInfoRes_roleInfo(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_RoleInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ProduceNewRes_posInfo(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_PosInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MergeExchangeRes_posInfo(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_PosInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_MergeExchangeRes_posInfo([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_MergeExchangeRes_posInfo(id(Elem,
						TrUserData),
					     Bin2, TrUserData),
    e_field_MergeExchangeRes_posInfo(Rest, Bin3,
				     TrUserData);
e_field_MergeExchangeRes_posInfo([], Bin,
				 _TrUserData) ->
    Bin.

e_mfield_RecoveryObjectRes_posInfo(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_PosInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_RecoveryObjectRes_posInfo([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_RecoveryObjectRes_posInfo(id(Elem,
						 TrUserData),
					      Bin2, TrUserData),
    e_field_RecoveryObjectRes_posInfo(Rest, Bin3,
				      TrUserData);
e_field_RecoveryObjectRes_posInfo([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_PosInfoRes_posInfo(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_PosInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_PosInfoRes_posInfo([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_PosInfoRes_posInfo(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_PosInfoRes_posInfo(Rest, Bin3, TrUserData);
e_field_PosInfoRes_posInfo([], Bin, _TrUserData) -> Bin.

e_mfield_BuyObjectRes_posInfo(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_PosInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ShopInfoRes_shopInfo(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ShopInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ShopInfoRes_shopInfo([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_ShopInfoRes_shopInfo(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_ShopInfoRes_shopInfo(Rest, Bin3, TrUserData);
e_field_ShopInfoRes_shopInfo([], Bin, _TrUserData) ->
    Bin.

e_mfield_InviteInfoRes_infos(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_InviteInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_InviteInfoRes_infos([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_InviteInfoRes_infos(id(Elem,
					   TrUserData),
					Bin2, TrUserData),
    e_field_InviteInfoRes_infos(Rest, Bin3, TrUserData);
e_field_InviteInfoRes_infos([], Bin, _TrUserData) ->
    Bin.

e_mfield_OrderInfoRes_orderInfo(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_OrderInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_OrderInfoRes_orderInfo([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_OrderInfoRes_orderInfo(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_OrderInfoRes_orderInfo(Rest, Bin3, TrUserData);
e_field_OrderInfoRes_orderInfo([], Bin, _TrUserData) ->
    Bin.

e_mfield_WaiterInfoRes_waiterInfo(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_WaiterInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_WaiterInfoRes_waiterInfo([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_WaiterInfoRes_waiterInfo(id(Elem,
						TrUserData),
					     Bin2, TrUserData),
    e_field_WaiterInfoRes_waiterInfo(Rest, Bin3,
				     TrUserData);
e_field_WaiterInfoRes_waiterInfo([], Bin,
				 _TrUserData) ->
    Bin.

e_mfield_WaiterIntimateRes_waiterInfo(Msg, Bin,
				      TrUserData) ->
    SubBin = encode_msg_WaiterInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_enum_ERROR_CODE('OK', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_ERROR_CODE('ERR_COMMON_SYS', Bin, _TrUserData) ->
    <<Bin/binary, 144, 78>>;
e_enum_ERROR_CODE('ERR_COMMON_COST_LIMIT', Bin,
		  _TrUserData) ->
    <<Bin/binary, 145, 78>>;
e_enum_ERROR_CODE('ERR_COMMON_MAP_LIMIT', Bin,
		  _TrUserData) ->
    <<Bin/binary, 146, 78>>;
e_enum_ERROR_CODE('ERR_COMMON_BUY_LIMIT', Bin,
		  _TrUserData) ->
    <<Bin/binary, 147, 78>>;
e_enum_ERROR_CODE('ERR_COMMON_ALREADY_SIGN', Bin,
		  _TrUserData) ->
    <<Bin/binary, 148, 78>>;
e_enum_ERROR_CODE('ERR_COMMON_REWARD_LIMIT', Bin,
		  _TrUserData) ->
    <<Bin/binary, 149, 78>>;
e_enum_ERROR_CODE('ERR_COMMON_REWARD_ALREADY', Bin,
		  _TrUserData) ->
    <<Bin/binary, 150, 78>>;
e_enum_ERROR_CODE('ERR_COMMON_CNT_LIMIT', Bin,
		  _TrUserData) ->
    <<Bin/binary, 151, 78>>;
e_enum_ERROR_CODE('ERR_COMMON_FUNC_UNOPEND', Bin,
		  _TrUserData) ->
    <<Bin/binary, 152, 78>>;
e_enum_ERROR_CODE('ERR_COMMON_ORDER_OUTTIME', Bin,
		  _TrUserData) ->
    <<Bin/binary, 153, 78>>;
e_enum_ERROR_CODE('ERR_COMMON_ORDER_NOACCEPT', Bin,
		  _TrUserData) ->
    <<Bin/binary, 154, 78>>;
e_enum_ERROR_CODE('ERR_COMMON_INSUFFICIENT_MATERIAL',
		  Bin, _TrUserData) ->
    <<Bin/binary, 155, 78>>;
e_enum_ERROR_CODE('ERR_COMMON_ORDER_NOCOMMPLET', Bin,
		  _TrUserData) ->
    <<Bin/binary, 156, 78>>;
e_enum_ERROR_CODE('ERR_COMMON_WAITER_NOEXIST', Bin,
		  _TrUserData) ->
    <<Bin/binary, 157, 78>>;
e_enum_ERROR_CODE('ERR_COMMON_WAITER_UNLOCK', Bin,
		  _TrUserData) ->
    <<Bin/binary, 158, 78>>;
e_enum_ERROR_CODE('ERR_COMMON_ORDER_COMMPLET', Bin,
		  _TrUserData) ->
    <<Bin/binary, 159, 78>>;
e_enum_ERROR_CODE('ERR_COMMON_BUY_ERR', Bin,
		  _TrUserData) ->
    <<Bin/binary, 160, 78>>;
e_enum_ERROR_CODE('ERR_COMMON_ORDER_ACCEPT', Bin,
		  _TrUserData) ->
    <<Bin/binary, 161, 78>>;
e_enum_ERROR_CODE('ERR_COMMON_DIAMOND_LIMIT', Bin,
		  _TrUserData) ->
    <<Bin/binary, 162, 78>>;
e_enum_ERROR_CODE(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('HeartReq', Bin, TrUserData) ->
    id(decode_msg_HeartReq(Bin, TrUserData), TrUserData);
decode_msg_2_doit('HeartRes', Bin, TrUserData) ->
    id(decode_msg_HeartRes(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LoginReq', Bin, TrUserData) ->
    id(decode_msg_LoginReq(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LoginRes', Bin, TrUserData) ->
    id(decode_msg_LoginRes(Bin, TrUserData), TrUserData);
decode_msg_2_doit('RoleInfo', Bin, TrUserData) ->
    id(decode_msg_RoleInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit('RoleInfoReq', Bin, TrUserData) ->
    id(decode_msg_RoleInfoReq(Bin, TrUserData), TrUserData);
decode_msg_2_doit('RoleInfoRes', Bin, TrUserData) ->
    id(decode_msg_RoleInfoRes(Bin, TrUserData), TrUserData);
decode_msg_2_doit('RoleAssetChangeNotify', Bin,
		  TrUserData) ->
    id(decode_msg_RoleAssetChangeNotify(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('BoxRewardReq', Bin, TrUserData) ->
    id(decode_msg_BoxRewardReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('BoxRewardRes', Bin, TrUserData) ->
    id(decode_msg_BoxRewardRes(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('OfflineRewardReq', Bin,
		  TrUserData) ->
    id(decode_msg_OfflineRewardReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('OfflineRewardRes', Bin,
		  TrUserData) ->
    id(decode_msg_OfflineRewardRes(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('OfflineInfoReq', Bin, TrUserData) ->
    id(decode_msg_OfflineInfoReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('OfflineInfoRes', Bin, TrUserData) ->
    id(decode_msg_OfflineInfoRes(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('PosInfo', Bin, TrUserData) ->
    id(decode_msg_PosInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ShopInfo', Bin, TrUserData) ->
    id(decode_msg_ShopInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ProduceNewReq', Bin, TrUserData) ->
    id(decode_msg_ProduceNewReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ProduceNewRes', Bin, TrUserData) ->
    id(decode_msg_ProduceNewRes(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MergeExchangeReq', Bin,
		  TrUserData) ->
    id(decode_msg_MergeExchangeReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MergeExchangeRes', Bin,
		  TrUserData) ->
    id(decode_msg_MergeExchangeRes(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('RecoveryObjectReq', Bin,
		  TrUserData) ->
    id(decode_msg_RecoveryObjectReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('RecoveryObjectRes', Bin,
		  TrUserData) ->
    id(decode_msg_RecoveryObjectRes(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ObjectProduceAssetNotify', Bin,
		  TrUserData) ->
    id(decode_msg_ObjectProduceAssetNotify(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('PosInfoReq', Bin, TrUserData) ->
    id(decode_msg_PosInfoReq(Bin, TrUserData), TrUserData);
decode_msg_2_doit('PosInfoRes', Bin, TrUserData) ->
    id(decode_msg_PosInfoRes(Bin, TrUserData), TrUserData);
decode_msg_2_doit('BuyObjectReq', Bin, TrUserData) ->
    id(decode_msg_BuyObjectReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('BuyObjectRes', Bin, TrUserData) ->
    id(decode_msg_BuyObjectRes(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ShopInfoReq', Bin, TrUserData) ->
    id(decode_msg_ShopInfoReq(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ShopInfoRes', Bin, TrUserData) ->
    id(decode_msg_ShopInfoRes(Bin, TrUserData), TrUserData);
decode_msg_2_doit('SignInfoReq', Bin, TrUserData) ->
    id(decode_msg_SignInfoReq(Bin, TrUserData), TrUserData);
decode_msg_2_doit('SignInfoRes', Bin, TrUserData) ->
    id(decode_msg_SignInfoRes(Bin, TrUserData), TrUserData);
decode_msg_2_doit('SignRewardReq', Bin, TrUserData) ->
    id(decode_msg_SignRewardReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('SignRewardRes', Bin, TrUserData) ->
    id(decode_msg_SignRewardRes(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('TurntableInfoReq', Bin,
		  TrUserData) ->
    id(decode_msg_TurntableInfoReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('TurntableInfoRes', Bin,
		  TrUserData) ->
    id(decode_msg_TurntableInfoRes(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('PlayTurntableReq', Bin,
		  TrUserData) ->
    id(decode_msg_PlayTurntableReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('PlayTurntableRes', Bin,
		  TrUserData) ->
    id(decode_msg_PlayTurntableRes(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AdRewardReq', Bin, TrUserData) ->
    id(decode_msg_AdRewardReq(Bin, TrUserData), TrUserData);
decode_msg_2_doit('AdRewardRes', Bin, TrUserData) ->
    id(decode_msg_AdRewardRes(Bin, TrUserData), TrUserData);
decode_msg_2_doit('InviteInfo', Bin, TrUserData) ->
    id(decode_msg_InviteInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit('InviteInfoReq', Bin, TrUserData) ->
    id(decode_msg_InviteInfoReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('InviteInfoRes', Bin, TrUserData) ->
    id(decode_msg_InviteInfoRes(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('InviteRewardReq', Bin, TrUserData) ->
    id(decode_msg_InviteRewardReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('InviteRewardRes', Bin, TrUserData) ->
    id(decode_msg_InviteRewardRes(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('OrderInfo', Bin, TrUserData) ->
    id(decode_msg_OrderInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit('OrderInfoReq', Bin, TrUserData) ->
    id(decode_msg_OrderInfoReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('OrderInfoRes', Bin, TrUserData) ->
    id(decode_msg_OrderInfoRes(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('OrderAcceptReq', Bin, TrUserData) ->
    id(decode_msg_OrderAcceptReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('OrderDeliveryReq', Bin,
		  TrUserData) ->
    id(decode_msg_OrderDeliveryReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('OrderRewardReq', Bin, TrUserData) ->
    id(decode_msg_OrderRewardReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('OrderCommonRes', Bin, TrUserData) ->
    id(decode_msg_OrderCommonRes(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('WaiterInfo', Bin, TrUserData) ->
    id(decode_msg_WaiterInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit('WaiterInfoReq', Bin, TrUserData) ->
    id(decode_msg_WaiterInfoReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('WaiterInfoRes', Bin, TrUserData) ->
    id(decode_msg_WaiterInfoRes(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('WaiterUnlockReq', Bin, TrUserData) ->
    id(decode_msg_WaiterUnlockReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('WaiterUnlockRes', Bin, TrUserData) ->
    id(decode_msg_WaiterUnlockRes(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('WaiterIntimateReq', Bin,
		  TrUserData) ->
    id(decode_msg_WaiterIntimateReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('WaiterIntimateRes', Bin,
		  TrUserData) ->
    id(decode_msg_WaiterIntimateRes(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('SpeedUpReq', Bin, TrUserData) ->
    id(decode_msg_SpeedUpReq(Bin, TrUserData), TrUserData);
decode_msg_2_doit('SpeedUpRes', Bin, TrUserData) ->
    id(decode_msg_SpeedUpRes(Bin, TrUserData), TrUserData);
decode_msg_2_doit('WechatLoginReq', Bin, TrUserData) ->
    id(decode_msg_WechatLoginReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('WechatLoginRes', Bin, TrUserData) ->
    id(decode_msg_WechatLoginRes(Bin, TrUserData),
       TrUserData).



decode_msg_HeartReq(Bin, TrUserData) ->
    dfp_read_field_def_HeartReq(Bin, 0, 0, TrUserData).

dfp_read_field_def_HeartReq(<<>>, 0, 0, _) ->
    #'HeartReq'{};
dfp_read_field_def_HeartReq(Other, Z1, Z2,
			    TrUserData) ->
    dg_read_field_def_HeartReq(Other, Z1, Z2, TrUserData).

dg_read_field_def_HeartReq(<<1:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_HeartReq(Rest, N + 7, X bsl N + Acc,
			       TrUserData);
dg_read_field_def_HeartReq(<<0:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_HeartReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_HeartReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_HeartReq(Rest, 0, 0, TrUserData);
      3 ->
	  skip_group_HeartReq(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_HeartReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_HeartReq(<<>>, 0, 0, _) ->
    #'HeartReq'{}.

skip_varint_HeartReq(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    skip_varint_HeartReq(Rest, Z1, Z2, TrUserData);
skip_varint_HeartReq(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_HeartReq(Rest, Z1, Z2, TrUserData).

skip_length_delimited_HeartReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_HeartReq(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
skip_length_delimited_HeartReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_HeartReq(Rest2, 0, 0, TrUserData).

skip_group_HeartReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_HeartReq(Rest, 0, Z2, TrUserData).

skip_32_HeartReq(<<_:32, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_HeartReq(Rest, Z1, Z2, TrUserData).

skip_64_HeartReq(<<_:64, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_HeartReq(Rest, Z1, Z2, TrUserData).

decode_msg_HeartRes(Bin, TrUserData) ->
    dfp_read_field_def_HeartRes(Bin, 0, 0, TrUserData).

dfp_read_field_def_HeartRes(<<>>, 0, 0, _) ->
    #'HeartRes'{};
dfp_read_field_def_HeartRes(Other, Z1, Z2,
			    TrUserData) ->
    dg_read_field_def_HeartRes(Other, Z1, Z2, TrUserData).

dg_read_field_def_HeartRes(<<1:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_HeartRes(Rest, N + 7, X bsl N + Acc,
			       TrUserData);
dg_read_field_def_HeartRes(<<0:1, X:7, Rest/binary>>, N,
			   Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_HeartRes(Rest, 0, 0, TrUserData);
      1 -> skip_64_HeartRes(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_HeartRes(Rest, 0, 0, TrUserData);
      3 ->
	  skip_group_HeartRes(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_HeartRes(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_HeartRes(<<>>, 0, 0, _) ->
    #'HeartRes'{}.

skip_varint_HeartRes(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    skip_varint_HeartRes(Rest, Z1, Z2, TrUserData);
skip_varint_HeartRes(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_HeartRes(Rest, Z1, Z2, TrUserData).

skip_length_delimited_HeartRes(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_HeartRes(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
skip_length_delimited_HeartRes(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_HeartRes(Rest2, 0, 0, TrUserData).

skip_group_HeartRes(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_HeartRes(Rest, 0, Z2, TrUserData).

skip_32_HeartRes(<<_:32, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_HeartRes(Rest, Z1, Z2, TrUserData).

skip_64_HeartRes(<<_:64, Rest/binary>>, Z1, Z2,
		 TrUserData) ->
    dfp_read_field_def_HeartRes(Rest, Z1, Z2, TrUserData).

decode_msg_LoginReq(Bin, TrUserData) ->
    dfp_read_field_def_LoginReq(Bin, 0, 0,
				id([], TrUserData), id([], TrUserData),
				id([], TrUserData), id(0, TrUserData),
				id([], TrUserData), TrUserData).

dfp_read_field_def_LoginReq(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_LoginReq_tokenId(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_LoginReq(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_LoginReq_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData);
dfp_read_field_def_LoginReq(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_LoginReq_headUrl(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_LoginReq(<<32, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_LoginReq_gender(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_LoginReq(<<42, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_LoginReq_inviteTokenId(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_LoginReq(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, F@_5, _) ->
    #'LoginReq'{tokenId = F@_1, name = F@_2, headUrl = F@_3,
		gender = F@_4, inviteTokenId = F@_5};
dfp_read_field_def_LoginReq(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_LoginReq(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_LoginReq(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LoginReq(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_LoginReq(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LoginReq_tokenId(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      18 ->
	  d_field_LoginReq_name(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, TrUserData);
      26 ->
	  d_field_LoginReq_headUrl(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      32 ->
	  d_field_LoginReq_gender(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      42 ->
	  d_field_LoginReq_inviteTokenId(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LoginReq(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
	    1 ->
		skip_64_LoginReq(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData);
	    2 ->
		skip_length_delimited_LoginReq(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_LoginReq(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_LoginReq(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData)
	  end
    end;
dg_read_field_def_LoginReq(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, _) ->
    #'LoginReq'{tokenId = F@_1, name = F@_2, headUrl = F@_3,
		gender = F@_4, inviteTokenId = F@_5}.

d_field_LoginReq_tokenId(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_LoginReq_tokenId(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_LoginReq_tokenId(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LoginReq(RestF, 0, 0, NewFValue,
				F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_LoginReq_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_LoginReq_name(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_LoginReq_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LoginReq(RestF, 0, 0, F@_1,
				NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_LoginReq_headUrl(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_LoginReq_headUrl(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_LoginReq_headUrl(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LoginReq(RestF, 0, 0, F@_1, F@_2,
				NewFValue, F@_4, F@_5, TrUserData).

d_field_LoginReq_gender(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_LoginReq_gender(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_LoginReq_gender(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_LoginReq(RestF, 0, 0, F@_1, F@_2,
				F@_3, NewFValue, F@_5, TrUserData).

d_field_LoginReq_inviteTokenId(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_LoginReq_inviteTokenId(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
d_field_LoginReq_inviteTokenId(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LoginReq(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, NewFValue, TrUserData).

skip_varint_LoginReq(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_LoginReq(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
skip_varint_LoginReq(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_LoginReq(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_LoginReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_LoginReq(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
skip_length_delimited_LoginReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LoginReq(Rest2, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_group_LoginReq(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LoginReq(Rest, 0, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_32_LoginReq(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_LoginReq(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_64_LoginReq(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_LoginReq(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

decode_msg_LoginRes(Bin, TrUserData) ->
    dfp_read_field_def_LoginRes(Bin, 0, 0,
				id('OK', TrUserData), id([], TrUserData),
				TrUserData).

dfp_read_field_def_LoginRes(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_LoginRes_code(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_LoginRes(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_LoginRes_tokenId(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_LoginRes(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #'LoginRes'{code = F@_1, tokenId = F@_2};
dfp_read_field_def_LoginRes(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_LoginRes(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_LoginRes(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LoginRes(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_LoginRes(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LoginRes_code(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      18 ->
	  d_field_LoginRes_tokenId(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LoginRes(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_LoginRes(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_LoginRes(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_LoginRes(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_LoginRes(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_LoginRes(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'LoginRes'{code = F@_1, tokenId = F@_2}.

d_field_LoginRes_code(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LoginRes_code(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_LoginRes_code(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_LoginRes(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_LoginRes_tokenId(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LoginRes_tokenId(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_LoginRes_tokenId(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LoginRes(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_LoginRes(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_LoginRes(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_LoginRes(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LoginRes(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_LoginRes(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_LoginRes(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_LoginRes(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LoginRes(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_LoginRes(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LoginRes(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_LoginRes(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_LoginRes(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_LoginRes(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_LoginRes(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

decode_msg_RoleInfo(Bin, TrUserData) ->
    dfp_read_field_def_RoleInfo(Bin, 0, 0,
				id([], TrUserData), id([], TrUserData),
				id([], TrUserData), id(0, TrUserData),
				id(0, TrUserData), id(0, TrUserData),
				id(0, TrUserData), id(0, TrUserData),
				id(0, TrUserData), id(0, TrUserData),
				TrUserData).

dfp_read_field_def_RoleInfo(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    d_field_RoleInfo_tokenId(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			     TrUserData);
dfp_read_field_def_RoleInfo(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    d_field_RoleInfo_headUrl(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			     TrUserData);
dfp_read_field_def_RoleInfo(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    d_field_RoleInfo_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  TrUserData);
dfp_read_field_def_RoleInfo(<<32, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    d_field_RoleInfo_lv(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_RoleInfo(<<40, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    d_field_RoleInfo_diamond(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			     TrUserData);
dfp_read_field_def_RoleInfo(<<48, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    d_field_RoleInfo_coin(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  TrUserData);
dfp_read_field_def_RoleInfo(<<56, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    d_field_RoleInfo_reputation(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				TrUserData);
dfp_read_field_def_RoleInfo(<<64, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    d_field_RoleInfo_gender(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    TrUserData);
dfp_read_field_def_RoleInfo(<<72, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    d_field_RoleInfo_loginDay(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      TrUserData);
dfp_read_field_def_RoleInfo(<<80, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData) ->
    d_field_RoleInfo_lastLogoutTime(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, TrUserData);
dfp_read_field_def_RoleInfo(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    _) ->
    #'RoleInfo'{tokenId = F@_1, headUrl = F@_2, name = F@_3,
		lv = F@_4, diamond = F@_5, coin = F@_6,
		reputation = F@_7, gender = F@_8, loginDay = F@_9,
		lastLogoutTime = F@_10};
dfp_read_field_def_RoleInfo(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    TrUserData) ->
    dg_read_field_def_RoleInfo(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData).

dg_read_field_def_RoleInfo(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RoleInfo(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, TrUserData);
dg_read_field_def_RoleInfo(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RoleInfo_tokenId(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   TrUserData);
      18 ->
	  d_field_RoleInfo_headUrl(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   TrUserData);
      26 ->
	  d_field_RoleInfo_name(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				TrUserData);
      32 ->
	  d_field_RoleInfo_lv(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
      40 ->
	  d_field_RoleInfo_diamond(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   TrUserData);
      48 ->
	  d_field_RoleInfo_coin(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				TrUserData);
      56 ->
	  d_field_RoleInfo_reputation(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, TrUserData);
      64 ->
	  d_field_RoleInfo_gender(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  TrUserData);
      72 ->
	  d_field_RoleInfo_loginDay(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    TrUserData);
      80 ->
	  d_field_RoleInfo_lastLogoutTime(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  F@_9, F@_10, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RoleInfo(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     TrUserData);
	    1 ->
		skip_64_RoleInfo(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 TrUserData);
	    2 ->
		skip_length_delimited_RoleInfo(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, F@_6, F@_7,
					       F@_8, F@_9, F@_10, TrUserData);
	    3 ->
		skip_group_RoleInfo(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, TrUserData);
	    5 ->
		skip_32_RoleInfo(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 TrUserData)
	  end
    end;
dg_read_field_def_RoleInfo(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _) ->
    #'RoleInfo'{tokenId = F@_1, headUrl = F@_2, name = F@_3,
		lv = F@_4, diamond = F@_5, coin = F@_6,
		reputation = F@_7, gender = F@_8, loginDay = F@_9,
		lastLogoutTime = F@_10}.

d_field_RoleInfo_tokenId(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_RoleInfo_tokenId(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, TrUserData);
d_field_RoleInfo_tokenId(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RoleInfo(RestF, 0, 0, NewFValue,
				F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				F@_10, TrUserData).

d_field_RoleInfo_headUrl(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_RoleInfo_headUrl(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, TrUserData);
d_field_RoleInfo_headUrl(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RoleInfo(RestF, 0, 0, F@_1,
				NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, TrUserData).

d_field_RoleInfo_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, TrUserData)
    when N < 57 ->
    d_field_RoleInfo_name(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  TrUserData);
d_field_RoleInfo_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RoleInfo(RestF, 0, 0, F@_1, F@_2,
				NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				F@_10, TrUserData).

d_field_RoleInfo_lv(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, TrUserData)
    when N < 57 ->
    d_field_RoleInfo_lv(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			TrUserData);
d_field_RoleInfo_lv(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_RoleInfo(RestF, 0, 0, F@_1, F@_2,
				F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9,
				F@_10, TrUserData).

d_field_RoleInfo_diamond(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_RoleInfo_diamond(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, TrUserData);
d_field_RoleInfo_diamond(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9,
			 F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_RoleInfo(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9,
				F@_10, TrUserData).

d_field_RoleInfo_coin(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, TrUserData)
    when N < 57 ->
    d_field_RoleInfo_coin(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  TrUserData);
d_field_RoleInfo_coin(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9,
		      F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_RoleInfo(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9,
				F@_10, TrUserData).

d_field_RoleInfo_reputation(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_RoleInfo_reputation(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, TrUserData);
d_field_RoleInfo_reputation(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8,
			    F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_RoleInfo(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9,
				F@_10, TrUserData).

d_field_RoleInfo_gender(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_RoleInfo_gender(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData);
d_field_RoleInfo_gender(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9,
			F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_RoleInfo(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9,
				F@_10, TrUserData).

d_field_RoleInfo_loginDay(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_RoleInfo_loginDay(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, TrUserData);
d_field_RoleInfo_loginDay(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  _, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_RoleInfo(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue,
				F@_10, TrUserData).

d_field_RoleInfo_lastLogoutTime(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_RoleInfo_lastLogoutTime(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_RoleInfo_lastLogoutTime(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_RoleInfo(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				NewFValue, TrUserData).

skip_varint_RoleInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, TrUserData) ->
    skip_varint_RoleInfo(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
skip_varint_RoleInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, TrUserData) ->
    dfp_read_field_def_RoleInfo(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				TrUserData).

skip_length_delimited_RoleInfo(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    skip_length_delimited_RoleInfo(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
skip_length_delimited_RoleInfo(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RoleInfo(Rest2, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				TrUserData).

skip_group_RoleInfo(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RoleInfo(Rest, 0, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				TrUserData).

skip_32_RoleInfo(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		 TrUserData) ->
    dfp_read_field_def_RoleInfo(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				TrUserData).

skip_64_RoleInfo(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		 TrUserData) ->
    dfp_read_field_def_RoleInfo(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				TrUserData).

decode_msg_RoleInfoReq(Bin, TrUserData) ->
    dfp_read_field_def_RoleInfoReq(Bin, 0, 0, TrUserData).

dfp_read_field_def_RoleInfoReq(<<>>, 0, 0, _) ->
    #'RoleInfoReq'{};
dfp_read_field_def_RoleInfoReq(Other, Z1, Z2,
			       TrUserData) ->
    dg_read_field_def_RoleInfoReq(Other, Z1, Z2,
				  TrUserData).

dg_read_field_def_RoleInfoReq(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RoleInfoReq(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
dg_read_field_def_RoleInfoReq(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_RoleInfoReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_RoleInfoReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_RoleInfoReq(Rest, 0, 0,
					    TrUserData);
      3 ->
	  skip_group_RoleInfoReq(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_RoleInfoReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_RoleInfoReq(<<>>, 0, 0, _) ->
    #'RoleInfoReq'{}.

skip_varint_RoleInfoReq(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    skip_varint_RoleInfoReq(Rest, Z1, Z2, TrUserData);
skip_varint_RoleInfoReq(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    dfp_read_field_def_RoleInfoReq(Rest, Z1, Z2,
				   TrUserData).

skip_length_delimited_RoleInfoReq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_RoleInfoReq(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
skip_length_delimited_RoleInfoReq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RoleInfoReq(Rest2, 0, 0, TrUserData).

skip_group_RoleInfoReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RoleInfoReq(Rest, 0, Z2, TrUserData).

skip_32_RoleInfoReq(<<_:32, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_RoleInfoReq(Rest, Z1, Z2,
				   TrUserData).

skip_64_RoleInfoReq(<<_:64, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_RoleInfoReq(Rest, Z1, Z2,
				   TrUserData).

decode_msg_RoleInfoRes(Bin, TrUserData) ->
    dfp_read_field_def_RoleInfoRes(Bin, 0, 0,
				   id('OK', TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_RoleInfoRes(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_RoleInfoRes_code(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_RoleInfoRes(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_RoleInfoRes_roleInfo(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_RoleInfoRes(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #'RoleInfoRes'{code = F@_1, roleInfo = F@_2};
dfp_read_field_def_RoleInfoRes(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_RoleInfoRes(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_RoleInfoRes(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RoleInfoRes(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_RoleInfoRes(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RoleInfoRes_code(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      18 ->
	  d_field_RoleInfoRes_roleInfo(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RoleInfoRes(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_RoleInfoRes(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_RoleInfoRes(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_RoleInfoRes(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_RoleInfoRes(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_RoleInfoRes(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #'RoleInfoRes'{code = F@_1, roleInfo = F@_2}.

d_field_RoleInfoRes_code(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_RoleInfoRes_code(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_RoleInfoRes_code(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_RoleInfoRes(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_RoleInfoRes_roleInfo(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_RoleInfoRes_roleInfo(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_RoleInfoRes_roleInfo(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_RoleInfo(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RoleInfoRes(RestF, 0, 0, F@_1,
				   if Prev == undefined -> NewFValue;
				      true ->
					  merge_msg_RoleInfo(Prev, NewFValue,
							     TrUserData)
				   end,
				   TrUserData).

skip_varint_RoleInfoRes(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_RoleInfoRes(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_RoleInfoRes(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_RoleInfoRes(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_RoleInfoRes(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_RoleInfoRes(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_RoleInfoRes(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RoleInfoRes(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_RoleInfoRes(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RoleInfoRes(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_RoleInfoRes(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_RoleInfoRes(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_RoleInfoRes(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_RoleInfoRes(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

decode_msg_RoleAssetChangeNotify(Bin, TrUserData) ->
    dfp_read_field_def_RoleAssetChangeNotify(Bin, 0, 0,
					     id(0, TrUserData),
					     id(0, TrUserData),
					     id(0, TrUserData), TrUserData).

dfp_read_field_def_RoleAssetChangeNotify(<<8,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData) ->
    d_field_RoleAssetChangeNotify_diamond(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_RoleAssetChangeNotify(<<16,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData) ->
    d_field_RoleAssetChangeNotify_coin(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
dfp_read_field_def_RoleAssetChangeNotify(<<24,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData) ->
    d_field_RoleAssetChangeNotify_reputation(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_RoleAssetChangeNotify(<<>>, 0, 0,
					 F@_1, F@_2, F@_3, _) ->
    #'RoleAssetChangeNotify'{diamond = F@_1, coin = F@_2,
			     reputation = F@_3};
dfp_read_field_def_RoleAssetChangeNotify(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_RoleAssetChangeNotify(Other, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_RoleAssetChangeNotify(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RoleAssetChangeNotify(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    TrUserData);
dg_read_field_def_RoleAssetChangeNotify(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RoleAssetChangeNotify_diamond(Rest, 0, 0, F@_1,
						F@_2, F@_3, TrUserData);
      16 ->
	  d_field_RoleAssetChangeNotify_coin(Rest, 0, 0, F@_1,
					     F@_2, F@_3, TrUserData);
      24 ->
	  d_field_RoleAssetChangeNotify_reputation(Rest, 0, 0,
						   F@_1, F@_2, F@_3,
						   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RoleAssetChangeNotify(Rest, 0, 0, F@_1,
						  F@_2, F@_3, TrUserData);
	    1 ->
		skip_64_RoleAssetChangeNotify(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    2 ->
		skip_length_delimited_RoleAssetChangeNotify(Rest, 0, 0,
							    F@_1, F@_2, F@_3,
							    TrUserData);
	    3 ->
		skip_group_RoleAssetChangeNotify(Rest, Key bsr 3, 0,
						 F@_1, F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_RoleAssetChangeNotify(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData)
	  end
    end;
dg_read_field_def_RoleAssetChangeNotify(<<>>, 0, 0,
					F@_1, F@_2, F@_3, _) ->
    #'RoleAssetChangeNotify'{diamond = F@_1, coin = F@_2,
			     reputation = F@_3}.

d_field_RoleAssetChangeNotify_diamond(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_RoleAssetChangeNotify_diamond(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
d_field_RoleAssetChangeNotify_diamond(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_RoleAssetChangeNotify(RestF, 0, 0,
					     NewFValue, F@_2, F@_3, TrUserData).

d_field_RoleAssetChangeNotify_coin(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_RoleAssetChangeNotify_coin(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
d_field_RoleAssetChangeNotify_coin(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_RoleAssetChangeNotify(RestF, 0, 0,
					     F@_1, NewFValue, F@_3, TrUserData).

d_field_RoleAssetChangeNotify_reputation(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_RoleAssetChangeNotify_reputation(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
d_field_RoleAssetChangeNotify_reputation(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_RoleAssetChangeNotify(RestF, 0, 0,
					     F@_1, F@_2, NewFValue, TrUserData).

skip_varint_RoleAssetChangeNotify(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_RoleAssetChangeNotify(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData);
skip_varint_RoleAssetChangeNotify(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_RoleAssetChangeNotify(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_RoleAssetChangeNotify(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3,
					    TrUserData)
    when N < 57 ->
    skip_length_delimited_RoleAssetChangeNotify(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						TrUserData);
skip_length_delimited_RoleAssetChangeNotify(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3,
					    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RoleAssetChangeNotify(Rest2, 0, 0,
					     F@_1, F@_2, F@_3, TrUserData).

skip_group_RoleAssetChangeNotify(Bin, FNum, Z2, F@_1,
				 F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RoleAssetChangeNotify(Rest, 0, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

skip_32_RoleAssetChangeNotify(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_RoleAssetChangeNotify(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

skip_64_RoleAssetChangeNotify(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_RoleAssetChangeNotify(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

decode_msg_BoxRewardReq(Bin, TrUserData) ->
    dfp_read_field_def_BoxRewardReq(Bin, 0, 0, TrUserData).

dfp_read_field_def_BoxRewardReq(<<>>, 0, 0, _) ->
    #'BoxRewardReq'{};
dfp_read_field_def_BoxRewardReq(Other, Z1, Z2,
				TrUserData) ->
    dg_read_field_def_BoxRewardReq(Other, Z1, Z2,
				   TrUserData).

dg_read_field_def_BoxRewardReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_BoxRewardReq(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
dg_read_field_def_BoxRewardReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_BoxRewardReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_BoxRewardReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_BoxRewardReq(Rest, 0, 0,
					     TrUserData);
      3 ->
	  skip_group_BoxRewardReq(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_BoxRewardReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_BoxRewardReq(<<>>, 0, 0, _) ->
    #'BoxRewardReq'{}.

skip_varint_BoxRewardReq(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    skip_varint_BoxRewardReq(Rest, Z1, Z2, TrUserData);
skip_varint_BoxRewardReq(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    dfp_read_field_def_BoxRewardReq(Rest, Z1, Z2,
				    TrUserData).

skip_length_delimited_BoxRewardReq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_BoxRewardReq(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
skip_length_delimited_BoxRewardReq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BoxRewardReq(Rest2, 0, 0,
				    TrUserData).

skip_group_BoxRewardReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_BoxRewardReq(Rest, 0, Z2,
				    TrUserData).

skip_32_BoxRewardReq(<<_:32, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_BoxRewardReq(Rest, Z1, Z2,
				    TrUserData).

skip_64_BoxRewardReq(<<_:64, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_BoxRewardReq(Rest, Z1, Z2,
				    TrUserData).

decode_msg_BoxRewardRes(Bin, TrUserData) ->
    dfp_read_field_def_BoxRewardRes(Bin, 0, 0,
				    id('OK', TrUserData), TrUserData).

dfp_read_field_def_BoxRewardRes(<<8, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_BoxRewardRes_code(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_BoxRewardRes(<<>>, 0, 0, F@_1, _) ->
    #'BoxRewardRes'{code = F@_1};
dfp_read_field_def_BoxRewardRes(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_BoxRewardRes(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_BoxRewardRes(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_BoxRewardRes(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_BoxRewardRes(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_BoxRewardRes_code(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_BoxRewardRes(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_BoxRewardRes(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_BoxRewardRes(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_BoxRewardRes(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_BoxRewardRes(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_BoxRewardRes(<<>>, 0, 0, F@_1, _) ->
    #'BoxRewardRes'{code = F@_1}.

d_field_BoxRewardRes_code(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_BoxRewardRes_code(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_BoxRewardRes_code(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_BoxRewardRes(RestF, 0, 0, NewFValue,
				    TrUserData).

skip_varint_BoxRewardRes(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_BoxRewardRes(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_BoxRewardRes(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_BoxRewardRes(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_BoxRewardRes(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_BoxRewardRes(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_BoxRewardRes(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BoxRewardRes(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_BoxRewardRes(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_BoxRewardRes(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_BoxRewardRes(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_BoxRewardRes(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_BoxRewardRes(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_BoxRewardRes(Rest, Z1, Z2, F@_1,
				    TrUserData).

decode_msg_OfflineRewardReq(Bin, TrUserData) ->
    dfp_read_field_def_OfflineRewardReq(Bin, 0, 0,
					id(0, TrUserData), TrUserData).

dfp_read_field_def_OfflineRewardReq(<<8, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_OfflineRewardReq_type(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_OfflineRewardReq(<<>>, 0, 0, F@_1,
				    _) ->
    #'OfflineRewardReq'{type = F@_1};
dfp_read_field_def_OfflineRewardReq(Other, Z1, Z2, F@_1,
				    TrUserData) ->
    dg_read_field_def_OfflineRewardReq(Other, Z1, Z2, F@_1,
				       TrUserData).

dg_read_field_def_OfflineRewardReq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OfflineRewardReq(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_OfflineRewardReq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_OfflineRewardReq_type(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OfflineRewardReq(Rest, 0, 0, F@_1,
					     TrUserData);
	    1 ->
		skip_64_OfflineRewardReq(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_OfflineRewardReq(Rest, 0, 0, F@_1,
						       TrUserData);
	    3 ->
		skip_group_OfflineRewardReq(Rest, Key bsr 3, 0, F@_1,
					    TrUserData);
	    5 ->
		skip_32_OfflineRewardReq(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_OfflineRewardReq(<<>>, 0, 0, F@_1,
				   _) ->
    #'OfflineRewardReq'{type = F@_1}.

d_field_OfflineRewardReq_type(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_OfflineRewardReq_type(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_OfflineRewardReq_type(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_OfflineRewardReq(RestF, 0, 0,
					NewFValue, TrUserData).

skip_varint_OfflineRewardReq(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_OfflineRewardReq(Rest, Z1, Z2, F@_1,
				 TrUserData);
skip_varint_OfflineRewardReq(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_OfflineRewardReq(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_length_delimited_OfflineRewardReq(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_OfflineRewardReq(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_OfflineRewardReq(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OfflineRewardReq(Rest2, 0, 0, F@_1,
					TrUserData).

skip_group_OfflineRewardReq(Bin, FNum, Z2, F@_1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OfflineRewardReq(Rest, 0, Z2, F@_1,
					TrUserData).

skip_32_OfflineRewardReq(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_OfflineRewardReq(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_64_OfflineRewardReq(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_OfflineRewardReq(Rest, Z1, Z2, F@_1,
					TrUserData).

decode_msg_OfflineRewardRes(Bin, TrUserData) ->
    dfp_read_field_def_OfflineRewardRes(Bin, 0, 0,
					id('OK', TrUserData), TrUserData).

dfp_read_field_def_OfflineRewardRes(<<8, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_OfflineRewardRes_code(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_OfflineRewardRes(<<>>, 0, 0, F@_1,
				    _) ->
    #'OfflineRewardRes'{code = F@_1};
dfp_read_field_def_OfflineRewardRes(Other, Z1, Z2, F@_1,
				    TrUserData) ->
    dg_read_field_def_OfflineRewardRes(Other, Z1, Z2, F@_1,
				       TrUserData).

dg_read_field_def_OfflineRewardRes(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OfflineRewardRes(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_OfflineRewardRes(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_OfflineRewardRes_code(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OfflineRewardRes(Rest, 0, 0, F@_1,
					     TrUserData);
	    1 ->
		skip_64_OfflineRewardRes(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_OfflineRewardRes(Rest, 0, 0, F@_1,
						       TrUserData);
	    3 ->
		skip_group_OfflineRewardRes(Rest, Key bsr 3, 0, F@_1,
					    TrUserData);
	    5 ->
		skip_32_OfflineRewardRes(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_OfflineRewardRes(<<>>, 0, 0, F@_1,
				   _) ->
    #'OfflineRewardRes'{code = F@_1}.

d_field_OfflineRewardRes_code(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_OfflineRewardRes_code(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_OfflineRewardRes_code(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_OfflineRewardRes(RestF, 0, 0,
					NewFValue, TrUserData).

skip_varint_OfflineRewardRes(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_OfflineRewardRes(Rest, Z1, Z2, F@_1,
				 TrUserData);
skip_varint_OfflineRewardRes(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_OfflineRewardRes(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_length_delimited_OfflineRewardRes(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_OfflineRewardRes(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_OfflineRewardRes(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OfflineRewardRes(Rest2, 0, 0, F@_1,
					TrUserData).

skip_group_OfflineRewardRes(Bin, FNum, Z2, F@_1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OfflineRewardRes(Rest, 0, Z2, F@_1,
					TrUserData).

skip_32_OfflineRewardRes(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_OfflineRewardRes(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_64_OfflineRewardRes(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_OfflineRewardRes(Rest, Z1, Z2, F@_1,
					TrUserData).

decode_msg_OfflineInfoReq(Bin, TrUserData) ->
    dfp_read_field_def_OfflineInfoReq(Bin, 0, 0,
				      TrUserData).

dfp_read_field_def_OfflineInfoReq(<<>>, 0, 0, _) ->
    #'OfflineInfoReq'{};
dfp_read_field_def_OfflineInfoReq(Other, Z1, Z2,
				  TrUserData) ->
    dg_read_field_def_OfflineInfoReq(Other, Z1, Z2,
				     TrUserData).

dg_read_field_def_OfflineInfoReq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OfflineInfoReq(Rest, N + 7,
				     X bsl N + Acc, TrUserData);
dg_read_field_def_OfflineInfoReq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_OfflineInfoReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_OfflineInfoReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_OfflineInfoReq(Rest, 0, 0,
					       TrUserData);
      3 ->
	  skip_group_OfflineInfoReq(Rest, Key bsr 3, 0,
				    TrUserData);
      5 -> skip_32_OfflineInfoReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_OfflineInfoReq(<<>>, 0, 0, _) ->
    #'OfflineInfoReq'{}.

skip_varint_OfflineInfoReq(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, TrUserData) ->
    skip_varint_OfflineInfoReq(Rest, Z1, Z2, TrUserData);
skip_varint_OfflineInfoReq(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, TrUserData) ->
    dfp_read_field_def_OfflineInfoReq(Rest, Z1, Z2,
				      TrUserData).

skip_length_delimited_OfflineInfoReq(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_OfflineInfoReq(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
skip_length_delimited_OfflineInfoReq(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OfflineInfoReq(Rest2, 0, 0,
				      TrUserData).

skip_group_OfflineInfoReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OfflineInfoReq(Rest, 0, Z2,
				      TrUserData).

skip_32_OfflineInfoReq(<<_:32, Rest/binary>>, Z1, Z2,
		       TrUserData) ->
    dfp_read_field_def_OfflineInfoReq(Rest, Z1, Z2,
				      TrUserData).

skip_64_OfflineInfoReq(<<_:64, Rest/binary>>, Z1, Z2,
		       TrUserData) ->
    dfp_read_field_def_OfflineInfoReq(Rest, Z1, Z2,
				      TrUserData).

decode_msg_OfflineInfoRes(Bin, TrUserData) ->
    dfp_read_field_def_OfflineInfoRes(Bin, 0, 0,
				      id('OK', TrUserData), id(0, TrUserData),
				      TrUserData).

dfp_read_field_def_OfflineInfoRes(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_OfflineInfoRes_code(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_OfflineInfoRes(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_OfflineInfoRes_coin(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_OfflineInfoRes(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #'OfflineInfoRes'{code = F@_1, coin = F@_2};
dfp_read_field_def_OfflineInfoRes(Other, Z1, Z2, F@_1,
				  F@_2, TrUserData) ->
    dg_read_field_def_OfflineInfoRes(Other, Z1, Z2, F@_1,
				     F@_2, TrUserData).

dg_read_field_def_OfflineInfoRes(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OfflineInfoRes(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_OfflineInfoRes(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_OfflineInfoRes_code(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      16 ->
	  d_field_OfflineInfoRes_coin(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OfflineInfoRes(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    1 ->
		skip_64_OfflineInfoRes(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    2 ->
		skip_length_delimited_OfflineInfoRes(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    3 ->
		skip_group_OfflineInfoRes(Rest, Key bsr 3, 0, F@_1,
					  F@_2, TrUserData);
	    5 ->
		skip_32_OfflineInfoRes(Rest, 0, 0, F@_1, F@_2,
				       TrUserData)
	  end
    end;
dg_read_field_def_OfflineInfoRes(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #'OfflineInfoRes'{code = F@_1, coin = F@_2}.

d_field_OfflineInfoRes_code(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_OfflineInfoRes_code(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_OfflineInfoRes_code(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_OfflineInfoRes(RestF, 0, 0,
				      NewFValue, F@_2, TrUserData).

d_field_OfflineInfoRes_coin(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_OfflineInfoRes_coin(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_OfflineInfoRes_coin(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_OfflineInfoRes(RestF, 0, 0, F@_1,
				      NewFValue, TrUserData).

skip_varint_OfflineInfoRes(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_OfflineInfoRes(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
skip_varint_OfflineInfoRes(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_OfflineInfoRes(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_length_delimited_OfflineInfoRes(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_OfflineInfoRes(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_OfflineInfoRes(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OfflineInfoRes(Rest2, 0, 0, F@_1,
				      F@_2, TrUserData).

skip_group_OfflineInfoRes(Bin, FNum, Z2, F@_1, F@_2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OfflineInfoRes(Rest, 0, Z2, F@_1,
				      F@_2, TrUserData).

skip_32_OfflineInfoRes(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_OfflineInfoRes(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_64_OfflineInfoRes(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_OfflineInfoRes(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

decode_msg_PosInfo(Bin, TrUserData) ->
    dfp_read_field_def_PosInfo(Bin, 0, 0, id(0, TrUserData),
			       id(0, TrUserData), TrUserData).

dfp_read_field_def_PosInfo(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_PosInfo_pos(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_PosInfo(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_PosInfo_type(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
dfp_read_field_def_PosInfo(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'PosInfo'{pos = F@_1, type = F@_2};
dfp_read_field_def_PosInfo(Other, Z1, Z2, F@_1, F@_2,
			   TrUserData) ->
    dg_read_field_def_PosInfo(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData).

dg_read_field_def_PosInfo(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PosInfo(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
dg_read_field_def_PosInfo(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_PosInfo_pos(Rest, 0, 0, F@_1, F@_2, TrUserData);
      16 ->
	  d_field_PosInfo_type(Rest, 0, 0, F@_1, F@_2,
			       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PosInfo(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 ->
		skip_64_PosInfo(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_PosInfo(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    3 ->
		skip_group_PosInfo(Rest, Key bsr 3, 0, F@_1, F@_2,
				   TrUserData);
	    5 -> skip_32_PosInfo(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_PosInfo(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'PosInfo'{pos = F@_1, type = F@_2}.

d_field_PosInfo_pos(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_PosInfo_pos(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_PosInfo_pos(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_PosInfo(RestF, 0, 0, NewFValue, F@_2,
			       TrUserData).

d_field_PosInfo_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_PosInfo_type(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, TrUserData);
d_field_PosInfo_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_PosInfo(RestF, 0, 0, F@_1, NewFValue,
			       TrUserData).

skip_varint_PosInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    skip_varint_PosInfo(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
skip_varint_PosInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_PosInfo(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_length_delimited_PosInfo(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_PosInfo(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_PosInfo(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PosInfo(Rest2, 0, 0, F@_1, F@_2,
			       TrUserData).

skip_group_PosInfo(Bin, FNum, Z2, F@_1, F@_2,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PosInfo(Rest, 0, Z2, F@_1, F@_2,
			       TrUserData).

skip_32_PosInfo(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_PosInfo(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_64_PosInfo(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_PosInfo(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

decode_msg_ShopInfo(Bin, TrUserData) ->
    dfp_read_field_def_ShopInfo(Bin, 0, 0,
				id(0, TrUserData), id(0, TrUserData),
				id(0, TrUserData), TrUserData).

dfp_read_field_def_ShopInfo(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ShopInfo_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
dfp_read_field_def_ShopInfo(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ShopInfo_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_ShopInfo(<<24, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ShopInfo_price(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_ShopInfo(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #'ShopInfo'{id = F@_1, type = F@_2, price = F@_3};
dfp_read_field_def_ShopInfo(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    dg_read_field_def_ShopInfo(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

dg_read_field_def_ShopInfo(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ShopInfo(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_ShopInfo(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ShopInfo_id(Rest, 0, 0, F@_1, F@_2, F@_3,
			      TrUserData);
      16 ->
	  d_field_ShopInfo_type(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      24 ->
	  d_field_ShopInfo_price(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ShopInfo(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    1 ->
		skip_64_ShopInfo(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    2 ->
		skip_length_delimited_ShopInfo(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    3 ->
		skip_group_ShopInfo(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, TrUserData);
	    5 ->
		skip_32_ShopInfo(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData)
	  end
    end;
dg_read_field_def_ShopInfo(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #'ShopInfo'{id = F@_1, type = F@_2, price = F@_3}.

d_field_ShopInfo_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ShopInfo_id(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, TrUserData);
d_field_ShopInfo_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_ShopInfo(RestF, 0, 0, NewFValue,
				F@_2, F@_3, TrUserData).

d_field_ShopInfo_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ShopInfo_type(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_ShopInfo_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_ShopInfo(RestF, 0, 0, F@_1,
				NewFValue, F@_3, TrUserData).

d_field_ShopInfo_price(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ShopInfo_price(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_ShopInfo_price(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_ShopInfo(RestF, 0, 0, F@_1, F@_2,
				NewFValue, TrUserData).

skip_varint_ShopInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_ShopInfo(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
skip_varint_ShopInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ShopInfo(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_length_delimited_ShopInfo(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_ShopInfo(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_ShopInfo(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ShopInfo(Rest2, 0, 0, F@_1, F@_2,
				F@_3, TrUserData).

skip_group_ShopInfo(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ShopInfo(Rest, 0, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_32_ShopInfo(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ShopInfo(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_64_ShopInfo(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ShopInfo(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

decode_msg_ProduceNewReq(Bin, TrUserData) ->
    dfp_read_field_def_ProduceNewReq(Bin, 0, 0, TrUserData).

dfp_read_field_def_ProduceNewReq(<<>>, 0, 0, _) ->
    #'ProduceNewReq'{};
dfp_read_field_def_ProduceNewReq(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_ProduceNewReq(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_ProduceNewReq(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ProduceNewReq(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_ProduceNewReq(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_ProduceNewReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_ProduceNewReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_ProduceNewReq(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_ProduceNewReq(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_ProduceNewReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_ProduceNewReq(<<>>, 0, 0, _) ->
    #'ProduceNewReq'{}.

skip_varint_ProduceNewReq(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_ProduceNewReq(Rest, Z1, Z2, TrUserData);
skip_varint_ProduceNewReq(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_ProduceNewReq(Rest, Z1, Z2,
				     TrUserData).

skip_length_delimited_ProduceNewReq(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_ProduceNewReq(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_ProduceNewReq(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProduceNewReq(Rest2, 0, 0,
				     TrUserData).

skip_group_ProduceNewReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ProduceNewReq(Rest, 0, Z2,
				     TrUserData).

skip_32_ProduceNewReq(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_ProduceNewReq(Rest, Z1, Z2,
				     TrUserData).

skip_64_ProduceNewReq(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_ProduceNewReq(Rest, Z1, Z2,
				     TrUserData).

decode_msg_ProduceNewRes(Bin, TrUserData) ->
    dfp_read_field_def_ProduceNewRes(Bin, 0, 0,
				     id('OK', TrUserData),
				     id(undefined, TrUserData),
				     id(0, TrUserData), id(0, TrUserData),
				     TrUserData).

dfp_read_field_def_ProduceNewRes(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_ProduceNewRes_code(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_ProduceNewRes(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_ProduceNewRes_posInfo(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
dfp_read_field_def_ProduceNewRes(<<24, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_ProduceNewRes_nextType(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData);
dfp_read_field_def_ProduceNewRes(<<32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_ProduceNewRes_nextPrice(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ProduceNewRes(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, _) ->
    #'ProduceNewRes'{code = F@_1, posInfo = F@_2,
		     nextType = F@_3, nextPrice = F@_4};
dfp_read_field_def_ProduceNewRes(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_ProduceNewRes(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_ProduceNewRes(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ProduceNewRes(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
dg_read_field_def_ProduceNewRes(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ProduceNewRes_code(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      18 ->
	  d_field_ProduceNewRes_posInfo(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
      24 ->
	  d_field_ProduceNewRes_nextType(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, TrUserData);
      32 ->
	  d_field_ProduceNewRes_nextPrice(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ProduceNewRes(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, TrUserData);
	    1 ->
		skip_64_ProduceNewRes(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, TrUserData);
	    2 ->
		skip_length_delimited_ProduceNewRes(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
	    3 ->
		skip_group_ProduceNewRes(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_ProduceNewRes(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, TrUserData)
	  end
    end;
dg_read_field_def_ProduceNewRes(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, _) ->
    #'ProduceNewRes'{code = F@_1, posInfo = F@_2,
		     nextType = F@_3, nextPrice = F@_4}.

d_field_ProduceNewRes_code(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_ProduceNewRes_code(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ProduceNewRes_code(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_ProduceNewRes(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, F@_4, TrUserData).

d_field_ProduceNewRes_posInfo(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_ProduceNewRes_posInfo(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
d_field_ProduceNewRes_posInfo(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, Prev, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_PosInfo(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ProduceNewRes(RestF, 0, 0, F@_1,
				     if Prev == undefined -> NewFValue;
					true ->
					    merge_msg_PosInfo(Prev, NewFValue,
							      TrUserData)
				     end,
				     F@_3, F@_4, TrUserData).

d_field_ProduceNewRes_nextType(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_ProduceNewRes_nextType(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
d_field_ProduceNewRes_nextType(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_ProduceNewRes(RestF, 0, 0, F@_1,
				     F@_2, NewFValue, F@_4, TrUserData).

d_field_ProduceNewRes_nextPrice(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_ProduceNewRes_nextPrice(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_ProduceNewRes_nextPrice(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_ProduceNewRes(RestF, 0, 0, F@_1,
				     F@_2, F@_3, NewFValue, TrUserData).

skip_varint_ProduceNewRes(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_ProduceNewRes(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
skip_varint_ProduceNewRes(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ProduceNewRes(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_ProduceNewRes(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_ProduceNewRes(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
skip_length_delimited_ProduceNewRes(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProduceNewRes(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_group_ProduceNewRes(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ProduceNewRes(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_32_ProduceNewRes(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ProduceNewRes(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_64_ProduceNewRes(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ProduceNewRes(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

decode_msg_MergeExchangeReq(Bin, TrUserData) ->
    dfp_read_field_def_MergeExchangeReq(Bin, 0, 0,
					id(0, TrUserData), id(0, TrUserData),
					TrUserData).

dfp_read_field_def_MergeExchangeReq(<<8, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MergeExchangeReq_posOne(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_MergeExchangeReq(<<16, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MergeExchangeReq_posTwo(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_MergeExchangeReq(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #'MergeExchangeReq'{posOne = F@_1, posTwo = F@_2};
dfp_read_field_def_MergeExchangeReq(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData) ->
    dg_read_field_def_MergeExchangeReq(Other, Z1, Z2, F@_1,
				       F@_2, TrUserData).

dg_read_field_def_MergeExchangeReq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MergeExchangeReq(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_MergeExchangeReq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_MergeExchangeReq_posOne(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      16 ->
	  d_field_MergeExchangeReq_posTwo(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MergeExchangeReq(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    1 ->
		skip_64_MergeExchangeReq(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    2 ->
		skip_length_delimited_MergeExchangeReq(Rest, 0, 0, F@_1,
						       F@_2, TrUserData);
	    3 ->
		skip_group_MergeExchangeReq(Rest, Key bsr 3, 0, F@_1,
					    F@_2, TrUserData);
	    5 ->
		skip_32_MergeExchangeReq(Rest, 0, 0, F@_1, F@_2,
					 TrUserData)
	  end
    end;
dg_read_field_def_MergeExchangeReq(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    #'MergeExchangeReq'{posOne = F@_1, posTwo = F@_2}.

d_field_MergeExchangeReq_posOne(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MergeExchangeReq_posOne(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_MergeExchangeReq_posOne(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_MergeExchangeReq(RestF, 0, 0,
					NewFValue, F@_2, TrUserData).

d_field_MergeExchangeReq_posTwo(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MergeExchangeReq_posTwo(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_MergeExchangeReq_posTwo(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_MergeExchangeReq(RestF, 0, 0, F@_1,
					NewFValue, TrUserData).

skip_varint_MergeExchangeReq(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_MergeExchangeReq(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
skip_varint_MergeExchangeReq(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MergeExchangeReq(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

skip_length_delimited_MergeExchangeReq(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MergeExchangeReq(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
skip_length_delimited_MergeExchangeReq(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MergeExchangeReq(Rest2, 0, 0, F@_1,
					F@_2, TrUserData).

skip_group_MergeExchangeReq(Bin, FNum, Z2, F@_1, F@_2,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MergeExchangeReq(Rest, 0, Z2, F@_1,
					F@_2, TrUserData).

skip_32_MergeExchangeReq(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MergeExchangeReq(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

skip_64_MergeExchangeReq(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MergeExchangeReq(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

decode_msg_MergeExchangeRes(Bin, TrUserData) ->
    dfp_read_field_def_MergeExchangeRes(Bin, 0, 0,
					id('OK', TrUserData),
					id([], TrUserData), id(0, TrUserData),
					id(0, TrUserData), TrUserData).

dfp_read_field_def_MergeExchangeRes(<<8, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    d_field_MergeExchangeRes_code(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
dfp_read_field_def_MergeExchangeRes(<<18, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    d_field_MergeExchangeRes_posInfo(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_MergeExchangeRes(<<24, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    d_field_MergeExchangeRes_nextType(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_MergeExchangeRes(<<32, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    d_field_MergeExchangeRes_nextPrice(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_MergeExchangeRes(<<>>, 0, 0, F@_1,
				    R1, F@_3, F@_4, TrUserData) ->
    #'MergeExchangeRes'{code = F@_1,
			posInfo = lists_reverse(R1, TrUserData),
			nextType = F@_3, nextPrice = F@_4};
dfp_read_field_def_MergeExchangeRes(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_MergeExchangeRes(Other, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_MergeExchangeRes(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MergeExchangeRes(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
dg_read_field_def_MergeExchangeRes(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_MergeExchangeRes_code(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
      18 ->
	  d_field_MergeExchangeRes_posInfo(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, TrUserData);
      24 ->
	  d_field_MergeExchangeRes_nextType(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
      32 ->
	  d_field_MergeExchangeRes_nextPrice(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MergeExchangeRes(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_MergeExchangeRes(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, TrUserData);
	    2 ->
		skip_length_delimited_MergeExchangeRes(Rest, 0, 0, F@_1,
						       F@_2, F@_3, F@_4,
						       TrUserData);
	    3 ->
		skip_group_MergeExchangeRes(Rest, Key bsr 3, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_MergeExchangeRes(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, TrUserData)
	  end
    end;
dg_read_field_def_MergeExchangeRes(<<>>, 0, 0, F@_1, R1,
				   F@_3, F@_4, TrUserData) ->
    #'MergeExchangeRes'{code = F@_1,
			posInfo = lists_reverse(R1, TrUserData),
			nextType = F@_3, nextPrice = F@_4}.

d_field_MergeExchangeRes_code(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_MergeExchangeRes_code(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
d_field_MergeExchangeRes_code(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_MergeExchangeRes(RestF, 0, 0,
					NewFValue, F@_2, F@_3, F@_4,
					TrUserData).

d_field_MergeExchangeRes_posInfo(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_MergeExchangeRes_posInfo(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
d_field_MergeExchangeRes_posInfo(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, Prev, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_PosInfo(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MergeExchangeRes(RestF, 0, 0, F@_1,
					cons(NewFValue, Prev, TrUserData), F@_3,
					F@_4, TrUserData).

d_field_MergeExchangeRes_nextType(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_MergeExchangeRes_nextType(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
d_field_MergeExchangeRes_nextType(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_MergeExchangeRes(RestF, 0, 0, F@_1,
					F@_2, NewFValue, F@_4, TrUserData).

d_field_MergeExchangeRes_nextPrice(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_MergeExchangeRes_nextPrice(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
d_field_MergeExchangeRes_nextPrice(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_MergeExchangeRes(RestF, 0, 0, F@_1,
					F@_2, F@_3, NewFValue, TrUserData).

skip_varint_MergeExchangeRes(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_MergeExchangeRes(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
skip_varint_MergeExchangeRes(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_MergeExchangeRes(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_MergeExchangeRes(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData)
    when N < 57 ->
    skip_length_delimited_MergeExchangeRes(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
skip_length_delimited_MergeExchangeRes(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MergeExchangeRes(Rest2, 0, 0, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

skip_group_MergeExchangeRes(Bin, FNum, Z2, F@_1, F@_2,
			    F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MergeExchangeRes(Rest, 0, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

skip_32_MergeExchangeRes(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_MergeExchangeRes(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

skip_64_MergeExchangeRes(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_MergeExchangeRes(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

decode_msg_RecoveryObjectReq(Bin, TrUserData) ->
    dfp_read_field_def_RecoveryObjectReq(Bin, 0, 0,
					 id(0, TrUserData), TrUserData).

dfp_read_field_def_RecoveryObjectReq(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    d_field_RecoveryObjectReq_pos(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_RecoveryObjectReq(<<>>, 0, 0, F@_1,
				     _) ->
    #'RecoveryObjectReq'{pos = F@_1};
dfp_read_field_def_RecoveryObjectReq(Other, Z1, Z2,
				     F@_1, TrUserData) ->
    dg_read_field_def_RecoveryObjectReq(Other, Z1, Z2, F@_1,
					TrUserData).

dg_read_field_def_RecoveryObjectReq(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RecoveryObjectReq(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_RecoveryObjectReq(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RecoveryObjectReq_pos(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RecoveryObjectReq(Rest, 0, 0, F@_1,
					      TrUserData);
	    1 ->
		skip_64_RecoveryObjectReq(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_RecoveryObjectReq(Rest, 0, 0,
							F@_1, TrUserData);
	    3 ->
		skip_group_RecoveryObjectReq(Rest, Key bsr 3, 0, F@_1,
					     TrUserData);
	    5 ->
		skip_32_RecoveryObjectReq(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_RecoveryObjectReq(<<>>, 0, 0, F@_1,
				    _) ->
    #'RecoveryObjectReq'{pos = F@_1}.

d_field_RecoveryObjectReq_pos(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_RecoveryObjectReq_pos(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_RecoveryObjectReq_pos(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_RecoveryObjectReq(RestF, 0, 0,
					 NewFValue, TrUserData).

skip_varint_RecoveryObjectReq(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_RecoveryObjectReq(Rest, Z1, Z2, F@_1,
				  TrUserData);
skip_varint_RecoveryObjectReq(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_RecoveryObjectReq(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_length_delimited_RecoveryObjectReq(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_RecoveryObjectReq(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_RecoveryObjectReq(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RecoveryObjectReq(Rest2, 0, 0, F@_1,
					 TrUserData).

skip_group_RecoveryObjectReq(Bin, FNum, Z2, F@_1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RecoveryObjectReq(Rest, 0, Z2, F@_1,
					 TrUserData).

skip_32_RecoveryObjectReq(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_RecoveryObjectReq(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_64_RecoveryObjectReq(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_RecoveryObjectReq(Rest, Z1, Z2, F@_1,
					 TrUserData).

decode_msg_RecoveryObjectRes(Bin, TrUserData) ->
    dfp_read_field_def_RecoveryObjectRes(Bin, 0, 0,
					 id('OK', TrUserData),
					 id([], TrUserData), TrUserData).

dfp_read_field_def_RecoveryObjectRes(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_RecoveryObjectRes_code(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_RecoveryObjectRes(<<18,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_RecoveryObjectRes_posInfo(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_RecoveryObjectRes(<<>>, 0, 0, F@_1,
				     R1, TrUserData) ->
    #'RecoveryObjectRes'{code = F@_1,
			 posInfo = lists_reverse(R1, TrUserData)};
dfp_read_field_def_RecoveryObjectRes(Other, Z1, Z2,
				     F@_1, F@_2, TrUserData) ->
    dg_read_field_def_RecoveryObjectRes(Other, Z1, Z2, F@_1,
					F@_2, TrUserData).

dg_read_field_def_RecoveryObjectRes(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RecoveryObjectRes(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_RecoveryObjectRes(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RecoveryObjectRes_code(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      18 ->
	  d_field_RecoveryObjectRes_posInfo(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RecoveryObjectRes(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    1 ->
		skip_64_RecoveryObjectRes(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    2 ->
		skip_length_delimited_RecoveryObjectRes(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    3 ->
		skip_group_RecoveryObjectRes(Rest, Key bsr 3, 0, F@_1,
					     F@_2, TrUserData);
	    5 ->
		skip_32_RecoveryObjectRes(Rest, 0, 0, F@_1, F@_2,
					  TrUserData)
	  end
    end;
dg_read_field_def_RecoveryObjectRes(<<>>, 0, 0, F@_1,
				    R1, TrUserData) ->
    #'RecoveryObjectRes'{code = F@_1,
			 posInfo = lists_reverse(R1, TrUserData)}.

d_field_RecoveryObjectRes_code(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_RecoveryObjectRes_code(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_RecoveryObjectRes_code(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_RecoveryObjectRes(RestF, 0, 0,
					 NewFValue, F@_2, TrUserData).

d_field_RecoveryObjectRes_posInfo(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_RecoveryObjectRes_posInfo(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_RecoveryObjectRes_posInfo(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_PosInfo(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RecoveryObjectRes(RestF, 0, 0, F@_1,
					 cons(NewFValue, Prev, TrUserData),
					 TrUserData).

skip_varint_RecoveryObjectRes(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_RecoveryObjectRes(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
skip_varint_RecoveryObjectRes(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_RecoveryObjectRes(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_length_delimited_RecoveryObjectRes(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_RecoveryObjectRes(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
skip_length_delimited_RecoveryObjectRes(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RecoveryObjectRes(Rest2, 0, 0, F@_1,
					 F@_2, TrUserData).

skip_group_RecoveryObjectRes(Bin, FNum, Z2, F@_1, F@_2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RecoveryObjectRes(Rest, 0, Z2, F@_1,
					 F@_2, TrUserData).

skip_32_RecoveryObjectRes(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_RecoveryObjectRes(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_64_RecoveryObjectRes(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_RecoveryObjectRes(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

decode_msg_ObjectProduceAssetNotify(Bin, TrUserData) ->
    dfp_read_field_def_ObjectProduceAssetNotify(Bin, 0, 0,
						id(0, TrUserData),
						id(0, TrUserData), TrUserData).

dfp_read_field_def_ObjectProduceAssetNotify(<<8,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ObjectProduceAssetNotify_pos(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_ObjectProduceAssetNotify(<<16,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ObjectProduceAssetNotify_asset(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData);
dfp_read_field_def_ObjectProduceAssetNotify(<<>>, 0, 0,
					    F@_1, F@_2, _) ->
    #'ObjectProduceAssetNotify'{pos = F@_1, asset = F@_2};
dfp_read_field_def_ObjectProduceAssetNotify(Other, Z1,
					    Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_ObjectProduceAssetNotify(Other, Z1,
					       Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_ObjectProduceAssetNotify(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ObjectProduceAssetNotify(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
dg_read_field_def_ObjectProduceAssetNotify(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ObjectProduceAssetNotify_pos(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      16 ->
	  d_field_ObjectProduceAssetNotify_asset(Rest, 0, 0, F@_1,
						 F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ObjectProduceAssetNotify(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    1 ->
		skip_64_ObjectProduceAssetNotify(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    2 ->
		skip_length_delimited_ObjectProduceAssetNotify(Rest, 0,
							       0, F@_1, F@_2,
							       TrUserData);
	    3 ->
		skip_group_ObjectProduceAssetNotify(Rest, Key bsr 3, 0,
						    F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_ObjectProduceAssetNotify(Rest, 0, 0, F@_1, F@_2,
						 TrUserData)
	  end
    end;
dg_read_field_def_ObjectProduceAssetNotify(<<>>, 0, 0,
					   F@_1, F@_2, _) ->
    #'ObjectProduceAssetNotify'{pos = F@_1, asset = F@_2}.

d_field_ObjectProduceAssetNotify_pos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ObjectProduceAssetNotify_pos(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_ObjectProduceAssetNotify_pos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_ObjectProduceAssetNotify(RestF, 0, 0,
						NewFValue, F@_2, TrUserData).

d_field_ObjectProduceAssetNotify_asset(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ObjectProduceAssetNotify_asset(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
d_field_ObjectProduceAssetNotify_asset(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_ObjectProduceAssetNotify(RestF, 0, 0,
						F@_1, NewFValue, TrUserData).

skip_varint_ObjectProduceAssetNotify(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ObjectProduceAssetNotify(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
skip_varint_ObjectProduceAssetNotify(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ObjectProduceAssetNotify(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_ObjectProduceAssetNotify(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ObjectProduceAssetNotify(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
skip_length_delimited_ObjectProduceAssetNotify(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ObjectProduceAssetNotify(Rest2, 0, 0,
						F@_1, F@_2, TrUserData).

skip_group_ObjectProduceAssetNotify(Bin, FNum, Z2, F@_1,
				    F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ObjectProduceAssetNotify(Rest, 0, Z2,
						F@_1, F@_2, TrUserData).

skip_32_ObjectProduceAssetNotify(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ObjectProduceAssetNotify(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_64_ObjectProduceAssetNotify(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ObjectProduceAssetNotify(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

decode_msg_PosInfoReq(Bin, TrUserData) ->
    dfp_read_field_def_PosInfoReq(Bin, 0, 0, TrUserData).

dfp_read_field_def_PosInfoReq(<<>>, 0, 0, _) ->
    #'PosInfoReq'{};
dfp_read_field_def_PosInfoReq(Other, Z1, Z2,
			      TrUserData) ->
    dg_read_field_def_PosInfoReq(Other, Z1, Z2, TrUserData).

dg_read_field_def_PosInfoReq(<<1:1, X:7, Rest/binary>>,
			     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PosInfoReq(Rest, N + 7, X bsl N + Acc,
				 TrUserData);
dg_read_field_def_PosInfoReq(<<0:1, X:7, Rest/binary>>,
			     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_PosInfoReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_PosInfoReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_PosInfoReq(Rest, 0, 0,
					   TrUserData);
      3 ->
	  skip_group_PosInfoReq(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_PosInfoReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_PosInfoReq(<<>>, 0, 0, _) ->
    #'PosInfoReq'{}.

skip_varint_PosInfoReq(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, TrUserData) ->
    skip_varint_PosInfoReq(Rest, Z1, Z2, TrUserData);
skip_varint_PosInfoReq(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, TrUserData) ->
    dfp_read_field_def_PosInfoReq(Rest, Z1, Z2, TrUserData).

skip_length_delimited_PosInfoReq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_PosInfoReq(Rest, N + 7,
				     X bsl N + Acc, TrUserData);
skip_length_delimited_PosInfoReq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PosInfoReq(Rest2, 0, 0, TrUserData).

skip_group_PosInfoReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PosInfoReq(Rest, 0, Z2, TrUserData).

skip_32_PosInfoReq(<<_:32, Rest/binary>>, Z1, Z2,
		   TrUserData) ->
    dfp_read_field_def_PosInfoReq(Rest, Z1, Z2, TrUserData).

skip_64_PosInfoReq(<<_:64, Rest/binary>>, Z1, Z2,
		   TrUserData) ->
    dfp_read_field_def_PosInfoReq(Rest, Z1, Z2, TrUserData).

decode_msg_PosInfoRes(Bin, TrUserData) ->
    dfp_read_field_def_PosInfoRes(Bin, 0, 0,
				  id('OK', TrUserData), id([], TrUserData),
				  id(0, TrUserData), id(0, TrUserData),
				  TrUserData).

dfp_read_field_def_PosInfoRes(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_PosInfoRes_code(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_PosInfoRes(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_PosInfoRes_posInfo(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_PosInfoRes(<<24, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_PosInfoRes_nextType(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_PosInfoRes(<<32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_PosInfoRes_nextPrice(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
dfp_read_field_def_PosInfoRes(<<>>, 0, 0, F@_1, R1,
			      F@_3, F@_4, TrUserData) ->
    #'PosInfoRes'{code = F@_1,
		  posInfo = lists_reverse(R1, TrUserData),
		  nextType = F@_3, nextPrice = F@_4};
dfp_read_field_def_PosInfoRes(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData) ->
    dg_read_field_def_PosInfoRes(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

dg_read_field_def_PosInfoRes(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PosInfoRes(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_PosInfoRes(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_PosInfoRes_code(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      18 ->
	  d_field_PosInfoRes_posInfo(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      24 ->
	  d_field_PosInfoRes_nextType(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      32 ->
	  d_field_PosInfoRes_nextPrice(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PosInfoRes(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, TrUserData);
	    1 ->
		skip_64_PosInfoRes(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
	    2 ->
		skip_length_delimited_PosInfoRes(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_PosInfoRes(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_PosInfoRes(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   TrUserData)
	  end
    end;
dg_read_field_def_PosInfoRes(<<>>, 0, 0, F@_1, R1, F@_3,
			     F@_4, TrUserData) ->
    #'PosInfoRes'{code = F@_1,
		  posInfo = lists_reverse(R1, TrUserData),
		  nextType = F@_3, nextPrice = F@_4}.

d_field_PosInfoRes_code(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_PosInfoRes_code(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_PosInfoRes_code(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_PosInfoRes(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, F@_4, TrUserData).

d_field_PosInfoRes_posInfo(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_PosInfoRes_posInfo(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_PosInfoRes_posInfo(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, Prev, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_PosInfo(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_PosInfoRes(RestF, 0, 0, F@_1,
				  cons(NewFValue, Prev, TrUserData), F@_3, F@_4,
				  TrUserData).

d_field_PosInfoRes_nextType(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_PosInfoRes_nextType(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_PosInfoRes_nextType(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_PosInfoRes(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, F@_4, TrUserData).

d_field_PosInfoRes_nextPrice(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_PosInfoRes_nextPrice(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_PosInfoRes_nextPrice(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_PosInfoRes(RestF, 0, 0, F@_1, F@_2,
				  F@_3, NewFValue, TrUserData).

skip_varint_PosInfoRes(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_PosInfoRes(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData);
skip_varint_PosInfoRes(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_PosInfoRes(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_length_delimited_PosInfoRes(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_PosInfoRes(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
skip_length_delimited_PosInfoRes(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PosInfoRes(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_group_PosInfoRes(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PosInfoRes(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_32_PosInfoRes(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_PosInfoRes(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_64_PosInfoRes(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_PosInfoRes(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

decode_msg_BuyObjectReq(Bin, TrUserData) ->
    dfp_read_field_def_BuyObjectReq(Bin, 0, 0,
				    id(0, TrUserData), TrUserData).

dfp_read_field_def_BuyObjectReq(<<8, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_BuyObjectReq_type(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_BuyObjectReq(<<>>, 0, 0, F@_1, _) ->
    #'BuyObjectReq'{type = F@_1};
dfp_read_field_def_BuyObjectReq(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_BuyObjectReq(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_BuyObjectReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_BuyObjectReq(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_BuyObjectReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_BuyObjectReq_type(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_BuyObjectReq(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_BuyObjectReq(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_BuyObjectReq(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_BuyObjectReq(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_BuyObjectReq(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_BuyObjectReq(<<>>, 0, 0, F@_1, _) ->
    #'BuyObjectReq'{type = F@_1}.

d_field_BuyObjectReq_type(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_BuyObjectReq_type(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_BuyObjectReq_type(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_BuyObjectReq(RestF, 0, 0, NewFValue,
				    TrUserData).

skip_varint_BuyObjectReq(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_BuyObjectReq(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_BuyObjectReq(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_BuyObjectReq(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_BuyObjectReq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_BuyObjectReq(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_BuyObjectReq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BuyObjectReq(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_BuyObjectReq(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_BuyObjectReq(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_BuyObjectReq(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_BuyObjectReq(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_BuyObjectReq(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_BuyObjectReq(Rest, Z1, Z2, F@_1,
				    TrUserData).

decode_msg_BuyObjectRes(Bin, TrUserData) ->
    dfp_read_field_def_BuyObjectRes(Bin, 0, 0,
				    id('OK', TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_BuyObjectRes(<<8, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_BuyObjectRes_code(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_BuyObjectRes(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_BuyObjectRes_posInfo(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_BuyObjectRes(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #'BuyObjectRes'{code = F@_1, posInfo = F@_2};
dfp_read_field_def_BuyObjectRes(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_BuyObjectRes(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_BuyObjectRes(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_BuyObjectRes(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_BuyObjectRes(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_BuyObjectRes_code(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      18 ->
	  d_field_BuyObjectRes_posInfo(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_BuyObjectRes(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_BuyObjectRes(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_BuyObjectRes(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_BuyObjectRes(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_BuyObjectRes(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_BuyObjectRes(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #'BuyObjectRes'{code = F@_1, posInfo = F@_2}.

d_field_BuyObjectRes_code(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_BuyObjectRes_code(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_BuyObjectRes_code(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_BuyObjectRes(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_BuyObjectRes_posInfo(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_BuyObjectRes_posInfo(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_BuyObjectRes_posInfo(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_PosInfo(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_BuyObjectRes(RestF, 0, 0, F@_1,
				    if Prev == undefined -> NewFValue;
				       true ->
					   merge_msg_PosInfo(Prev, NewFValue,
							     TrUserData)
				    end,
				    TrUserData).

skip_varint_BuyObjectRes(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_BuyObjectRes(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_BuyObjectRes(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_BuyObjectRes(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_BuyObjectRes(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_BuyObjectRes(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_BuyObjectRes(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BuyObjectRes(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_BuyObjectRes(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_BuyObjectRes(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_BuyObjectRes(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_BuyObjectRes(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_BuyObjectRes(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_BuyObjectRes(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

decode_msg_ShopInfoReq(Bin, TrUserData) ->
    dfp_read_field_def_ShopInfoReq(Bin, 0, 0, TrUserData).

dfp_read_field_def_ShopInfoReq(<<>>, 0, 0, _) ->
    #'ShopInfoReq'{};
dfp_read_field_def_ShopInfoReq(Other, Z1, Z2,
			       TrUserData) ->
    dg_read_field_def_ShopInfoReq(Other, Z1, Z2,
				  TrUserData).

dg_read_field_def_ShopInfoReq(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ShopInfoReq(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
dg_read_field_def_ShopInfoReq(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_ShopInfoReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_ShopInfoReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_ShopInfoReq(Rest, 0, 0,
					    TrUserData);
      3 ->
	  skip_group_ShopInfoReq(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_ShopInfoReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_ShopInfoReq(<<>>, 0, 0, _) ->
    #'ShopInfoReq'{}.

skip_varint_ShopInfoReq(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    skip_varint_ShopInfoReq(Rest, Z1, Z2, TrUserData);
skip_varint_ShopInfoReq(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    dfp_read_field_def_ShopInfoReq(Rest, Z1, Z2,
				   TrUserData).

skip_length_delimited_ShopInfoReq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_ShopInfoReq(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
skip_length_delimited_ShopInfoReq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ShopInfoReq(Rest2, 0, 0, TrUserData).

skip_group_ShopInfoReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ShopInfoReq(Rest, 0, Z2, TrUserData).

skip_32_ShopInfoReq(<<_:32, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_ShopInfoReq(Rest, Z1, Z2,
				   TrUserData).

skip_64_ShopInfoReq(<<_:64, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_ShopInfoReq(Rest, Z1, Z2,
				   TrUserData).

decode_msg_ShopInfoRes(Bin, TrUserData) ->
    dfp_read_field_def_ShopInfoRes(Bin, 0, 0,
				   id('OK', TrUserData), id([], TrUserData),
				   TrUserData).

dfp_read_field_def_ShopInfoRes(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_ShopInfoRes_code(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_ShopInfoRes(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_ShopInfoRes_shopInfo(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_ShopInfoRes(<<>>, 0, 0, F@_1, R1,
			       TrUserData) ->
    #'ShopInfoRes'{code = F@_1,
		   shopInfo = lists_reverse(R1, TrUserData)};
dfp_read_field_def_ShopInfoRes(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_ShopInfoRes(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_ShopInfoRes(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ShopInfoRes(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_ShopInfoRes(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ShopInfoRes_code(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      18 ->
	  d_field_ShopInfoRes_shopInfo(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ShopInfoRes(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_ShopInfoRes(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_ShopInfoRes(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_ShopInfoRes(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_ShopInfoRes(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_ShopInfoRes(<<>>, 0, 0, F@_1, R1,
			      TrUserData) ->
    #'ShopInfoRes'{code = F@_1,
		   shopInfo = lists_reverse(R1, TrUserData)}.

d_field_ShopInfoRes_code(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ShopInfoRes_code(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_ShopInfoRes_code(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_ShopInfoRes(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_ShopInfoRes_shopInfo(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ShopInfoRes_shopInfo(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_ShopInfoRes_shopInfo(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ShopInfo(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ShopInfoRes(RestF, 0, 0, F@_1,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_ShopInfoRes(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ShopInfoRes(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_ShopInfoRes(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ShopInfoRes(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_ShopInfoRes(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ShopInfoRes(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_ShopInfoRes(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ShopInfoRes(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_ShopInfoRes(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ShopInfoRes(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_ShopInfoRes(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_ShopInfoRes(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_ShopInfoRes(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_ShopInfoRes(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

decode_msg_SignInfoReq(Bin, TrUserData) ->
    dfp_read_field_def_SignInfoReq(Bin, 0, 0, TrUserData).

dfp_read_field_def_SignInfoReq(<<>>, 0, 0, _) ->
    #'SignInfoReq'{};
dfp_read_field_def_SignInfoReq(Other, Z1, Z2,
			       TrUserData) ->
    dg_read_field_def_SignInfoReq(Other, Z1, Z2,
				  TrUserData).

dg_read_field_def_SignInfoReq(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SignInfoReq(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
dg_read_field_def_SignInfoReq(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_SignInfoReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_SignInfoReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_SignInfoReq(Rest, 0, 0,
					    TrUserData);
      3 ->
	  skip_group_SignInfoReq(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_SignInfoReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_SignInfoReq(<<>>, 0, 0, _) ->
    #'SignInfoReq'{}.

skip_varint_SignInfoReq(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    skip_varint_SignInfoReq(Rest, Z1, Z2, TrUserData);
skip_varint_SignInfoReq(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    dfp_read_field_def_SignInfoReq(Rest, Z1, Z2,
				   TrUserData).

skip_length_delimited_SignInfoReq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_SignInfoReq(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
skip_length_delimited_SignInfoReq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SignInfoReq(Rest2, 0, 0, TrUserData).

skip_group_SignInfoReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SignInfoReq(Rest, 0, Z2, TrUserData).

skip_32_SignInfoReq(<<_:32, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_SignInfoReq(Rest, Z1, Z2,
				   TrUserData).

skip_64_SignInfoReq(<<_:64, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_SignInfoReq(Rest, Z1, Z2,
				   TrUserData).

decode_msg_SignInfoRes(Bin, TrUserData) ->
    dfp_read_field_def_SignInfoRes(Bin, 0, 0,
				   id('OK', TrUserData), id(false, TrUserData),
				   id(0, TrUserData), TrUserData).

dfp_read_field_def_SignInfoRes(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_SignInfoRes_code(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
dfp_read_field_def_SignInfoRes(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_SignInfoRes_isSign(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_SignInfoRes(<<24, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_SignInfoRes_totalSignCnt(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData);
dfp_read_field_def_SignInfoRes(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, _) ->
    #'SignInfoRes'{code = F@_1, isSign = F@_2,
		   totalSignCnt = F@_3};
dfp_read_field_def_SignInfoRes(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, TrUserData) ->
    dg_read_field_def_SignInfoRes(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

dg_read_field_def_SignInfoRes(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SignInfoRes(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_SignInfoRes(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_SignInfoRes_code(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
      16 ->
	  d_field_SignInfoRes_isSign(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      24 ->
	  d_field_SignInfoRes_totalSignCnt(Rest, 0, 0, F@_1, F@_2,
					   F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SignInfoRes(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData);
	    1 ->
		skip_64_SignInfoRes(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    2 ->
		skip_length_delimited_SignInfoRes(Rest, 0, 0, F@_1,
						  F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_SignInfoRes(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, TrUserData);
	    5 ->
		skip_32_SignInfoRes(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData)
	  end
    end;
dg_read_field_def_SignInfoRes(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, _) ->
    #'SignInfoRes'{code = F@_1, isSign = F@_2,
		   totalSignCnt = F@_3}.

d_field_SignInfoRes_code(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_SignInfoRes_code(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
d_field_SignInfoRes_code(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_SignInfoRes(RestF, 0, 0, NewFValue,
				   F@_2, F@_3, TrUserData).

d_field_SignInfoRes_isSign(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_SignInfoRes_isSign(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_SignInfoRes_isSign(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_SignInfoRes(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, TrUserData).

d_field_SignInfoRes_totalSignCnt(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_SignInfoRes_totalSignCnt(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
d_field_SignInfoRes_totalSignCnt(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_SignInfoRes(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, TrUserData).

skip_varint_SignInfoRes(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_SignInfoRes(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
skip_varint_SignInfoRes(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_SignInfoRes(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_length_delimited_SignInfoRes(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_SignInfoRes(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
skip_length_delimited_SignInfoRes(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SignInfoRes(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, TrUserData).

skip_group_SignInfoRes(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SignInfoRes(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_32_SignInfoRes(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_SignInfoRes(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_64_SignInfoRes(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_SignInfoRes(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

decode_msg_SignRewardReq(Bin, TrUserData) ->
    dfp_read_field_def_SignRewardReq(Bin, 0, 0,
				     id(0, TrUserData), TrUserData).

dfp_read_field_def_SignRewardReq(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, TrUserData) ->
    d_field_SignRewardReq_type(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_SignRewardReq(<<>>, 0, 0, F@_1, _) ->
    #'SignRewardReq'{type = F@_1};
dfp_read_field_def_SignRewardReq(Other, Z1, Z2, F@_1,
				 TrUserData) ->
    dg_read_field_def_SignRewardReq(Other, Z1, Z2, F@_1,
				    TrUserData).

dg_read_field_def_SignRewardReq(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SignRewardReq(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_SignRewardReq(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_SignRewardReq_type(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SignRewardReq(Rest, 0, 0, F@_1, TrUserData);
	    1 ->
		skip_64_SignRewardReq(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_SignRewardReq(Rest, 0, 0, F@_1,
						    TrUserData);
	    3 ->
		skip_group_SignRewardReq(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
	    5 -> skip_32_SignRewardReq(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_SignRewardReq(<<>>, 0, 0, F@_1, _) ->
    #'SignRewardReq'{type = F@_1}.

d_field_SignRewardReq_type(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_SignRewardReq_type(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_SignRewardReq_type(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_SignRewardReq(RestF, 0, 0, NewFValue,
				     TrUserData).

skip_varint_SignRewardReq(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    skip_varint_SignRewardReq(Rest, Z1, Z2, F@_1,
			      TrUserData);
skip_varint_SignRewardReq(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    dfp_read_field_def_SignRewardReq(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_length_delimited_SignRewardReq(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_SignRewardReq(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_SignRewardReq(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SignRewardReq(Rest2, 0, 0, F@_1,
				     TrUserData).

skip_group_SignRewardReq(Bin, FNum, Z2, F@_1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SignRewardReq(Rest, 0, Z2, F@_1,
				     TrUserData).

skip_32_SignRewardReq(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_SignRewardReq(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_64_SignRewardReq(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_SignRewardReq(Rest, Z1, Z2, F@_1,
				     TrUserData).

decode_msg_SignRewardRes(Bin, TrUserData) ->
    dfp_read_field_def_SignRewardRes(Bin, 0, 0,
				     id('OK', TrUserData), TrUserData).

dfp_read_field_def_SignRewardRes(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, TrUserData) ->
    d_field_SignRewardRes_code(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_SignRewardRes(<<>>, 0, 0, F@_1, _) ->
    #'SignRewardRes'{code = F@_1};
dfp_read_field_def_SignRewardRes(Other, Z1, Z2, F@_1,
				 TrUserData) ->
    dg_read_field_def_SignRewardRes(Other, Z1, Z2, F@_1,
				    TrUserData).

dg_read_field_def_SignRewardRes(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SignRewardRes(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_SignRewardRes(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_SignRewardRes_code(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SignRewardRes(Rest, 0, 0, F@_1, TrUserData);
	    1 ->
		skip_64_SignRewardRes(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_SignRewardRes(Rest, 0, 0, F@_1,
						    TrUserData);
	    3 ->
		skip_group_SignRewardRes(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
	    5 -> skip_32_SignRewardRes(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_SignRewardRes(<<>>, 0, 0, F@_1, _) ->
    #'SignRewardRes'{code = F@_1}.

d_field_SignRewardRes_code(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_SignRewardRes_code(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_SignRewardRes_code(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_SignRewardRes(RestF, 0, 0, NewFValue,
				     TrUserData).

skip_varint_SignRewardRes(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    skip_varint_SignRewardRes(Rest, Z1, Z2, F@_1,
			      TrUserData);
skip_varint_SignRewardRes(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    dfp_read_field_def_SignRewardRes(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_length_delimited_SignRewardRes(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_SignRewardRes(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_SignRewardRes(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SignRewardRes(Rest2, 0, 0, F@_1,
				     TrUserData).

skip_group_SignRewardRes(Bin, FNum, Z2, F@_1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SignRewardRes(Rest, 0, Z2, F@_1,
				     TrUserData).

skip_32_SignRewardRes(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_SignRewardRes(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_64_SignRewardRes(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_SignRewardRes(Rest, Z1, Z2, F@_1,
				     TrUserData).

decode_msg_TurntableInfoReq(Bin, TrUserData) ->
    dfp_read_field_def_TurntableInfoReq(Bin, 0, 0,
					TrUserData).

dfp_read_field_def_TurntableInfoReq(<<>>, 0, 0, _) ->
    #'TurntableInfoReq'{};
dfp_read_field_def_TurntableInfoReq(Other, Z1, Z2,
				    TrUserData) ->
    dg_read_field_def_TurntableInfoReq(Other, Z1, Z2,
				       TrUserData).

dg_read_field_def_TurntableInfoReq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TurntableInfoReq(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
dg_read_field_def_TurntableInfoReq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_TurntableInfoReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_TurntableInfoReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_TurntableInfoReq(Rest, 0, 0,
						 TrUserData);
      3 ->
	  skip_group_TurntableInfoReq(Rest, Key bsr 3, 0,
				      TrUserData);
      5 -> skip_32_TurntableInfoReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_TurntableInfoReq(<<>>, 0, 0, _) ->
    #'TurntableInfoReq'{}.

skip_varint_TurntableInfoReq(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    skip_varint_TurntableInfoReq(Rest, Z1, Z2, TrUserData);
skip_varint_TurntableInfoReq(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    dfp_read_field_def_TurntableInfoReq(Rest, Z1, Z2,
					TrUserData).

skip_length_delimited_TurntableInfoReq(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_TurntableInfoReq(Rest, N + 7,
					   X bsl N + Acc, TrUserData);
skip_length_delimited_TurntableInfoReq(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TurntableInfoReq(Rest2, 0, 0,
					TrUserData).

skip_group_TurntableInfoReq(Bin, FNum, Z2,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TurntableInfoReq(Rest, 0, Z2,
					TrUserData).

skip_32_TurntableInfoReq(<<_:32, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_TurntableInfoReq(Rest, Z1, Z2,
					TrUserData).

skip_64_TurntableInfoReq(<<_:64, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_TurntableInfoReq(Rest, Z1, Z2,
					TrUserData).

decode_msg_TurntableInfoRes(Bin, TrUserData) ->
    dfp_read_field_def_TurntableInfoRes(Bin, 0, 0,
					id('OK', TrUserData), id(0, TrUserData),
					TrUserData).

dfp_read_field_def_TurntableInfoRes(<<8, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_TurntableInfoRes_code(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_TurntableInfoRes(<<16, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_TurntableInfoRes_turntableCnt(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_TurntableInfoRes(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #'TurntableInfoRes'{code = F@_1, turntableCnt = F@_2};
dfp_read_field_def_TurntableInfoRes(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData) ->
    dg_read_field_def_TurntableInfoRes(Other, Z1, Z2, F@_1,
				       F@_2, TrUserData).

dg_read_field_def_TurntableInfoRes(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TurntableInfoRes(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_TurntableInfoRes(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_TurntableInfoRes_code(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      16 ->
	  d_field_TurntableInfoRes_turntableCnt(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TurntableInfoRes(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    1 ->
		skip_64_TurntableInfoRes(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    2 ->
		skip_length_delimited_TurntableInfoRes(Rest, 0, 0, F@_1,
						       F@_2, TrUserData);
	    3 ->
		skip_group_TurntableInfoRes(Rest, Key bsr 3, 0, F@_1,
					    F@_2, TrUserData);
	    5 ->
		skip_32_TurntableInfoRes(Rest, 0, 0, F@_1, F@_2,
					 TrUserData)
	  end
    end;
dg_read_field_def_TurntableInfoRes(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    #'TurntableInfoRes'{code = F@_1, turntableCnt = F@_2}.

d_field_TurntableInfoRes_code(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_TurntableInfoRes_code(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_TurntableInfoRes_code(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_TurntableInfoRes(RestF, 0, 0,
					NewFValue, F@_2, TrUserData).

d_field_TurntableInfoRes_turntableCnt(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_TurntableInfoRes_turntableCnt(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_TurntableInfoRes_turntableCnt(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_TurntableInfoRes(RestF, 0, 0, F@_1,
					NewFValue, TrUserData).

skip_varint_TurntableInfoRes(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_TurntableInfoRes(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
skip_varint_TurntableInfoRes(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_TurntableInfoRes(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

skip_length_delimited_TurntableInfoRes(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_TurntableInfoRes(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
skip_length_delimited_TurntableInfoRes(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TurntableInfoRes(Rest2, 0, 0, F@_1,
					F@_2, TrUserData).

skip_group_TurntableInfoRes(Bin, FNum, Z2, F@_1, F@_2,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TurntableInfoRes(Rest, 0, Z2, F@_1,
					F@_2, TrUserData).

skip_32_TurntableInfoRes(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_TurntableInfoRes(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

skip_64_TurntableInfoRes(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_TurntableInfoRes(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

decode_msg_PlayTurntableReq(Bin, TrUserData) ->
    dfp_read_field_def_PlayTurntableReq(Bin, 0, 0,
					TrUserData).

dfp_read_field_def_PlayTurntableReq(<<>>, 0, 0, _) ->
    #'PlayTurntableReq'{};
dfp_read_field_def_PlayTurntableReq(Other, Z1, Z2,
				    TrUserData) ->
    dg_read_field_def_PlayTurntableReq(Other, Z1, Z2,
				       TrUserData).

dg_read_field_def_PlayTurntableReq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PlayTurntableReq(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
dg_read_field_def_PlayTurntableReq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_PlayTurntableReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_PlayTurntableReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_PlayTurntableReq(Rest, 0, 0,
						 TrUserData);
      3 ->
	  skip_group_PlayTurntableReq(Rest, Key bsr 3, 0,
				      TrUserData);
      5 -> skip_32_PlayTurntableReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_PlayTurntableReq(<<>>, 0, 0, _) ->
    #'PlayTurntableReq'{}.

skip_varint_PlayTurntableReq(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    skip_varint_PlayTurntableReq(Rest, Z1, Z2, TrUserData);
skip_varint_PlayTurntableReq(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    dfp_read_field_def_PlayTurntableReq(Rest, Z1, Z2,
					TrUserData).

skip_length_delimited_PlayTurntableReq(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_PlayTurntableReq(Rest, N + 7,
					   X bsl N + Acc, TrUserData);
skip_length_delimited_PlayTurntableReq(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PlayTurntableReq(Rest2, 0, 0,
					TrUserData).

skip_group_PlayTurntableReq(Bin, FNum, Z2,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PlayTurntableReq(Rest, 0, Z2,
					TrUserData).

skip_32_PlayTurntableReq(<<_:32, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_PlayTurntableReq(Rest, Z1, Z2,
					TrUserData).

skip_64_PlayTurntableReq(<<_:64, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_PlayTurntableReq(Rest, Z1, Z2,
					TrUserData).

decode_msg_PlayTurntableRes(Bin, TrUserData) ->
    dfp_read_field_def_PlayTurntableRes(Bin, 0, 0,
					id('OK', TrUserData), id(0, TrUserData),
					id(0, TrUserData), TrUserData).

dfp_read_field_def_PlayTurntableRes(<<8, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_PlayTurntableRes_code(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_PlayTurntableRes(<<16, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_PlayTurntableRes_pos(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_PlayTurntableRes(<<24, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_PlayTurntableRes_turntableCnt(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_PlayTurntableRes(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, _) ->
    #'PlayTurntableRes'{code = F@_1, pos = F@_2,
			turntableCnt = F@_3};
dfp_read_field_def_PlayTurntableRes(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData) ->
    dg_read_field_def_PlayTurntableRes(Other, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData).

dg_read_field_def_PlayTurntableRes(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PlayTurntableRes(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
dg_read_field_def_PlayTurntableRes(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_PlayTurntableRes_code(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      16 ->
	  d_field_PlayTurntableRes_pos(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      24 ->
	  d_field_PlayTurntableRes_turntableCnt(Rest, 0, 0, F@_1,
						F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PlayTurntableRes(Rest, 0, 0, F@_1, F@_2,
					     F@_3, TrUserData);
	    1 ->
		skip_64_PlayTurntableRes(Rest, 0, 0, F@_1, F@_2, F@_3,
					 TrUserData);
	    2 ->
		skip_length_delimited_PlayTurntableRes(Rest, 0, 0, F@_1,
						       F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_PlayTurntableRes(Rest, Key bsr 3, 0, F@_1,
					    F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_PlayTurntableRes(Rest, 0, 0, F@_1, F@_2, F@_3,
					 TrUserData)
	  end
    end;
dg_read_field_def_PlayTurntableRes(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, _) ->
    #'PlayTurntableRes'{code = F@_1, pos = F@_2,
			turntableCnt = F@_3}.

d_field_PlayTurntableRes_code(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_PlayTurntableRes_code(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_PlayTurntableRes_code(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_PlayTurntableRes(RestF, 0, 0,
					NewFValue, F@_2, F@_3, TrUserData).

d_field_PlayTurntableRes_pos(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_PlayTurntableRes_pos(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_PlayTurntableRes_pos(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_PlayTurntableRes(RestF, 0, 0, F@_1,
					NewFValue, F@_3, TrUserData).

d_field_PlayTurntableRes_turntableCnt(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_PlayTurntableRes_turntableCnt(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
d_field_PlayTurntableRes_turntableCnt(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_PlayTurntableRes(RestF, 0, 0, F@_1,
					F@_2, NewFValue, TrUserData).

skip_varint_PlayTurntableRes(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_PlayTurntableRes(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
skip_varint_PlayTurntableRes(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_PlayTurntableRes(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData).

skip_length_delimited_PlayTurntableRes(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_PlayTurntableRes(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
skip_length_delimited_PlayTurntableRes(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PlayTurntableRes(Rest2, 0, 0, F@_1,
					F@_2, F@_3, TrUserData).

skip_group_PlayTurntableRes(Bin, FNum, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PlayTurntableRes(Rest, 0, Z2, F@_1,
					F@_2, F@_3, TrUserData).

skip_32_PlayTurntableRes(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_PlayTurntableRes(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData).

skip_64_PlayTurntableRes(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_PlayTurntableRes(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData).

decode_msg_AdRewardReq(Bin, TrUserData) ->
    dfp_read_field_def_AdRewardReq(Bin, 0, 0, TrUserData).

dfp_read_field_def_AdRewardReq(<<>>, 0, 0, _) ->
    #'AdRewardReq'{};
dfp_read_field_def_AdRewardReq(Other, Z1, Z2,
			       TrUserData) ->
    dg_read_field_def_AdRewardReq(Other, Z1, Z2,
				  TrUserData).

dg_read_field_def_AdRewardReq(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AdRewardReq(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
dg_read_field_def_AdRewardReq(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_AdRewardReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_AdRewardReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_AdRewardReq(Rest, 0, 0,
					    TrUserData);
      3 ->
	  skip_group_AdRewardReq(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_AdRewardReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_AdRewardReq(<<>>, 0, 0, _) ->
    #'AdRewardReq'{}.

skip_varint_AdRewardReq(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    skip_varint_AdRewardReq(Rest, Z1, Z2, TrUserData);
skip_varint_AdRewardReq(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    dfp_read_field_def_AdRewardReq(Rest, Z1, Z2,
				   TrUserData).

skip_length_delimited_AdRewardReq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_AdRewardReq(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
skip_length_delimited_AdRewardReq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AdRewardReq(Rest2, 0, 0, TrUserData).

skip_group_AdRewardReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AdRewardReq(Rest, 0, Z2, TrUserData).

skip_32_AdRewardReq(<<_:32, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_AdRewardReq(Rest, Z1, Z2,
				   TrUserData).

skip_64_AdRewardReq(<<_:64, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_AdRewardReq(Rest, Z1, Z2,
				   TrUserData).

decode_msg_AdRewardRes(Bin, TrUserData) ->
    dfp_read_field_def_AdRewardRes(Bin, 0, 0,
				   id('OK', TrUserData), TrUserData).

dfp_read_field_def_AdRewardRes(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_AdRewardRes_code(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_AdRewardRes(<<>>, 0, 0, F@_1, _) ->
    #'AdRewardRes'{code = F@_1};
dfp_read_field_def_AdRewardRes(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_AdRewardRes(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_AdRewardRes(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AdRewardRes(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_AdRewardRes(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_AdRewardRes_code(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AdRewardRes(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_AdRewardRes(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_AdRewardRes(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_AdRewardRes(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_AdRewardRes(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_AdRewardRes(<<>>, 0, 0, F@_1, _) ->
    #'AdRewardRes'{code = F@_1}.

d_field_AdRewardRes_code(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_AdRewardRes_code(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
d_field_AdRewardRes_code(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_AdRewardRes(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_AdRewardRes(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_AdRewardRes(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_AdRewardRes(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_AdRewardRes(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_AdRewardRes(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_AdRewardRes(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_AdRewardRes(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AdRewardRes(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_AdRewardRes(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AdRewardRes(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_AdRewardRes(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_AdRewardRes(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_AdRewardRes(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_AdRewardRes(Rest, Z1, Z2, F@_1,
				   TrUserData).

decode_msg_InviteInfo(Bin, TrUserData) ->
    dfp_read_field_def_InviteInfo(Bin, 0, 0,
				  id([], TrUserData), id([], TrUserData),
				  id(0, TrUserData), id(false, TrUserData),
				  TrUserData).

dfp_read_field_def_InviteInfo(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_InviteInfo_tokenId(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_InviteInfo(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_InviteInfo_headUrl(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_InviteInfo(<<24, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_InviteInfo_sort(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_InviteInfo(<<32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_InviteInfo_isReward(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_InviteInfo(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, _) ->
    #'InviteInfo'{tokenId = F@_1, headUrl = F@_2,
		  sort = F@_3, isReward = F@_4};
dfp_read_field_def_InviteInfo(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData) ->
    dg_read_field_def_InviteInfo(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

dg_read_field_def_InviteInfo(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_InviteInfo(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_InviteInfo(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_InviteInfo_tokenId(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      18 ->
	  d_field_InviteInfo_headUrl(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      24 ->
	  d_field_InviteInfo_sort(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      32 ->
	  d_field_InviteInfo_isReward(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_InviteInfo(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, TrUserData);
	    1 ->
		skip_64_InviteInfo(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
	    2 ->
		skip_length_delimited_InviteInfo(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_InviteInfo(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_InviteInfo(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   TrUserData)
	  end
    end;
dg_read_field_def_InviteInfo(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, _) ->
    #'InviteInfo'{tokenId = F@_1, headUrl = F@_2,
		  sort = F@_3, isReward = F@_4}.

d_field_InviteInfo_tokenId(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_InviteInfo_tokenId(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_InviteInfo_tokenId(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_InviteInfo(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, F@_4, TrUserData).

d_field_InviteInfo_headUrl(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_InviteInfo_headUrl(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_InviteInfo_headUrl(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_InviteInfo(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, F@_4, TrUserData).

d_field_InviteInfo_sort(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_InviteInfo_sort(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_InviteInfo_sort(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_InviteInfo(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, F@_4, TrUserData).

d_field_InviteInfo_isReward(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_InviteInfo_isReward(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_InviteInfo_isReward(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_InviteInfo(RestF, 0, 0, F@_1, F@_2,
				  F@_3, NewFValue, TrUserData).

skip_varint_InviteInfo(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_InviteInfo(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData);
skip_varint_InviteInfo(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_InviteInfo(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_length_delimited_InviteInfo(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_InviteInfo(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
skip_length_delimited_InviteInfo(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_InviteInfo(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_group_InviteInfo(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_InviteInfo(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_32_InviteInfo(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_InviteInfo(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_64_InviteInfo(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_InviteInfo(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

decode_msg_InviteInfoReq(Bin, TrUserData) ->
    dfp_read_field_def_InviteInfoReq(Bin, 0, 0, TrUserData).

dfp_read_field_def_InviteInfoReq(<<>>, 0, 0, _) ->
    #'InviteInfoReq'{};
dfp_read_field_def_InviteInfoReq(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_InviteInfoReq(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_InviteInfoReq(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_InviteInfoReq(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_InviteInfoReq(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_InviteInfoReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_InviteInfoReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_InviteInfoReq(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_InviteInfoReq(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_InviteInfoReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_InviteInfoReq(<<>>, 0, 0, _) ->
    #'InviteInfoReq'{}.

skip_varint_InviteInfoReq(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_InviteInfoReq(Rest, Z1, Z2, TrUserData);
skip_varint_InviteInfoReq(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_InviteInfoReq(Rest, Z1, Z2,
				     TrUserData).

skip_length_delimited_InviteInfoReq(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_InviteInfoReq(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_InviteInfoReq(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_InviteInfoReq(Rest2, 0, 0,
				     TrUserData).

skip_group_InviteInfoReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_InviteInfoReq(Rest, 0, Z2,
				     TrUserData).

skip_32_InviteInfoReq(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_InviteInfoReq(Rest, Z1, Z2,
				     TrUserData).

skip_64_InviteInfoReq(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_InviteInfoReq(Rest, Z1, Z2,
				     TrUserData).

decode_msg_InviteInfoRes(Bin, TrUserData) ->
    dfp_read_field_def_InviteInfoRes(Bin, 0, 0,
				     id('OK', TrUserData), id([], TrUserData),
				     TrUserData).

dfp_read_field_def_InviteInfoRes(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, TrUserData) ->
    d_field_InviteInfoRes_code(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_InviteInfoRes(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_InviteInfoRes_infos(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_InviteInfoRes(<<>>, 0, 0, F@_1, R1,
				 TrUserData) ->
    #'InviteInfoRes'{code = F@_1,
		     infos = lists_reverse(R1, TrUserData)};
dfp_read_field_def_InviteInfoRes(Other, Z1, Z2, F@_1,
				 F@_2, TrUserData) ->
    dg_read_field_def_InviteInfoRes(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData).

dg_read_field_def_InviteInfoRes(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_InviteInfoRes(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_InviteInfoRes(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_InviteInfoRes_code(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      18 ->
	  d_field_InviteInfoRes_infos(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_InviteInfoRes(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    1 ->
		skip_64_InviteInfoRes(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    2 ->
		skip_length_delimited_InviteInfoRes(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    3 ->
		skip_group_InviteInfoRes(Rest, Key bsr 3, 0, F@_1, F@_2,
					 TrUserData);
	    5 ->
		skip_32_InviteInfoRes(Rest, 0, 0, F@_1, F@_2,
				      TrUserData)
	  end
    end;
dg_read_field_def_InviteInfoRes(<<>>, 0, 0, F@_1, R1,
				TrUserData) ->
    #'InviteInfoRes'{code = F@_1,
		     infos = lists_reverse(R1, TrUserData)}.

d_field_InviteInfoRes_code(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_InviteInfoRes_code(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_InviteInfoRes_code(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_InviteInfoRes(RestF, 0, 0, NewFValue,
				     F@_2, TrUserData).

d_field_InviteInfoRes_infos(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_InviteInfoRes_infos(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_InviteInfoRes_infos(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_InviteInfo(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_InviteInfoRes(RestF, 0, 0, F@_1,
				     cons(NewFValue, Prev, TrUserData),
				     TrUserData).

skip_varint_InviteInfoRes(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_InviteInfoRes(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
skip_varint_InviteInfoRes(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_InviteInfoRes(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_length_delimited_InviteInfoRes(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_InviteInfoRes(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_InviteInfoRes(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_InviteInfoRes(Rest2, 0, 0, F@_1,
				     F@_2, TrUserData).

skip_group_InviteInfoRes(Bin, FNum, Z2, F@_1, F@_2,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_InviteInfoRes(Rest, 0, Z2, F@_1,
				     F@_2, TrUserData).

skip_32_InviteInfoRes(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_InviteInfoRes(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_64_InviteInfoRes(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_InviteInfoRes(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

decode_msg_InviteRewardReq(Bin, TrUserData) ->
    dfp_read_field_def_InviteRewardReq(Bin, 0, 0,
				       id(0, TrUserData), TrUserData).

dfp_read_field_def_InviteRewardReq(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_InviteRewardReq_id(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_InviteRewardReq(<<>>, 0, 0, F@_1,
				   _) ->
    #'InviteRewardReq'{id = F@_1};
dfp_read_field_def_InviteRewardReq(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_InviteRewardReq(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_InviteRewardReq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_InviteRewardReq(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_InviteRewardReq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_InviteRewardReq_id(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_InviteRewardReq(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_InviteRewardReq(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_InviteRewardReq(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_InviteRewardReq(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_InviteRewardReq(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_InviteRewardReq(<<>>, 0, 0, F@_1,
				  _) ->
    #'InviteRewardReq'{id = F@_1}.

d_field_InviteRewardReq_id(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_InviteRewardReq_id(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_InviteRewardReq_id(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_InviteRewardReq(RestF, 0, 0,
				       NewFValue, TrUserData).

skip_varint_InviteRewardReq(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_InviteRewardReq(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_InviteRewardReq(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_InviteRewardReq(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_InviteRewardReq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_InviteRewardReq(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_InviteRewardReq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_InviteRewardReq(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_InviteRewardReq(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_InviteRewardReq(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_InviteRewardReq(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_InviteRewardReq(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_InviteRewardReq(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_InviteRewardReq(Rest, Z1, Z2, F@_1,
				       TrUserData).

decode_msg_InviteRewardRes(Bin, TrUserData) ->
    dfp_read_field_def_InviteRewardRes(Bin, 0, 0,
				       id('OK', TrUserData), id(0, TrUserData),
				       TrUserData).

dfp_read_field_def_InviteRewardRes(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_InviteRewardRes_code(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_InviteRewardRes(<<16, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_InviteRewardRes_id(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_InviteRewardRes(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    #'InviteRewardRes'{code = F@_1, id = F@_2};
dfp_read_field_def_InviteRewardRes(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData) ->
    dg_read_field_def_InviteRewardRes(Other, Z1, Z2, F@_1,
				      F@_2, TrUserData).

dg_read_field_def_InviteRewardRes(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_InviteRewardRes(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_InviteRewardRes(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_InviteRewardRes_code(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      16 ->
	  d_field_InviteRewardRes_id(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_InviteRewardRes(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    1 ->
		skip_64_InviteRewardRes(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    2 ->
		skip_length_delimited_InviteRewardRes(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    3 ->
		skip_group_InviteRewardRes(Rest, Key bsr 3, 0, F@_1,
					   F@_2, TrUserData);
	    5 ->
		skip_32_InviteRewardRes(Rest, 0, 0, F@_1, F@_2,
					TrUserData)
	  end
    end;
dg_read_field_def_InviteRewardRes(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #'InviteRewardRes'{code = F@_1, id = F@_2}.

d_field_InviteRewardRes_code(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_InviteRewardRes_code(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_InviteRewardRes_code(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_InviteRewardRes(RestF, 0, 0,
				       NewFValue, F@_2, TrUserData).

d_field_InviteRewardRes_id(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_InviteRewardRes_id(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_InviteRewardRes_id(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_InviteRewardRes(RestF, 0, 0, F@_1,
				       NewFValue, TrUserData).

skip_varint_InviteRewardRes(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_InviteRewardRes(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
skip_varint_InviteRewardRes(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_InviteRewardRes(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_length_delimited_InviteRewardRes(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_InviteRewardRes(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
skip_length_delimited_InviteRewardRes(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_InviteRewardRes(Rest2, 0, 0, F@_1,
				       F@_2, TrUserData).

skip_group_InviteRewardRes(Bin, FNum, Z2, F@_1, F@_2,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_InviteRewardRes(Rest, 0, Z2, F@_1,
				       F@_2, TrUserData).

skip_32_InviteRewardRes(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_InviteRewardRes(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_64_InviteRewardRes(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_InviteRewardRes(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

decode_msg_OrderInfo(Bin, TrUserData) ->
    dfp_read_field_def_OrderInfo(Bin, 0, 0,
				 id(0, TrUserData), id(0, TrUserData),
				 id(0, TrUserData), id(0, TrUserData),
				 TrUserData).

dfp_read_field_def_OrderInfo(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_OrderInfo_orderId(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
dfp_read_field_def_OrderInfo(<<16, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_OrderInfo_mapId(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_OrderInfo(<<24, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_OrderInfo_orderState(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
dfp_read_field_def_OrderInfo(<<32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_OrderInfo_orderTime(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_OrderInfo(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, _) ->
    #'OrderInfo'{orderId = F@_1, mapId = F@_2,
		 orderState = F@_3, orderTime = F@_4};
dfp_read_field_def_OrderInfo(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, TrUserData) ->
    dg_read_field_def_OrderInfo(Other, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

dg_read_field_def_OrderInfo(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OrderInfo(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_OrderInfo(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_OrderInfo_orderId(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, TrUserData);
      16 ->
	  d_field_OrderInfo_mapId(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      24 ->
	  d_field_OrderInfo_orderState(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
      32 ->
	  d_field_OrderInfo_orderTime(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OrderInfo(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, TrUserData);
	    1 ->
		skip_64_OrderInfo(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
	    2 ->
		skip_length_delimited_OrderInfo(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_OrderInfo(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_OrderInfo(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  TrUserData)
	  end
    end;
dg_read_field_def_OrderInfo(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, _) ->
    #'OrderInfo'{orderId = F@_1, mapId = F@_2,
		 orderState = F@_3, orderTime = F@_4}.

d_field_OrderInfo_orderId(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_OrderInfo_orderId(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_OrderInfo_orderId(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_OrderInfo(RestF, 0, 0, NewFValue,
				 F@_2, F@_3, F@_4, TrUserData).

d_field_OrderInfo_mapId(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_OrderInfo_mapId(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_OrderInfo_mapId(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_OrderInfo(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, F@_4, TrUserData).

d_field_OrderInfo_orderState(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_OrderInfo_orderState(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_OrderInfo_orderState(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_OrderInfo(RestF, 0, 0, F@_1, F@_2,
				 NewFValue, F@_4, TrUserData).

d_field_OrderInfo_orderTime(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_OrderInfo_orderTime(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_OrderInfo_orderTime(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_OrderInfo(RestF, 0, 0, F@_1, F@_2,
				 F@_3, NewFValue, TrUserData).

skip_varint_OrderInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_OrderInfo(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, TrUserData);
skip_varint_OrderInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_OrderInfo(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

skip_length_delimited_OrderInfo(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_OrderInfo(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
skip_length_delimited_OrderInfo(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OrderInfo(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

skip_group_OrderInfo(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OrderInfo(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

skip_32_OrderInfo(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_OrderInfo(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

skip_64_OrderInfo(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_OrderInfo(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

decode_msg_OrderInfoReq(Bin, TrUserData) ->
    dfp_read_field_def_OrderInfoReq(Bin, 0, 0, TrUserData).

dfp_read_field_def_OrderInfoReq(<<>>, 0, 0, _) ->
    #'OrderInfoReq'{};
dfp_read_field_def_OrderInfoReq(Other, Z1, Z2,
				TrUserData) ->
    dg_read_field_def_OrderInfoReq(Other, Z1, Z2,
				   TrUserData).

dg_read_field_def_OrderInfoReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OrderInfoReq(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
dg_read_field_def_OrderInfoReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_OrderInfoReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_OrderInfoReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_OrderInfoReq(Rest, 0, 0,
					     TrUserData);
      3 ->
	  skip_group_OrderInfoReq(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_OrderInfoReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_OrderInfoReq(<<>>, 0, 0, _) ->
    #'OrderInfoReq'{}.

skip_varint_OrderInfoReq(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    skip_varint_OrderInfoReq(Rest, Z1, Z2, TrUserData);
skip_varint_OrderInfoReq(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    dfp_read_field_def_OrderInfoReq(Rest, Z1, Z2,
				    TrUserData).

skip_length_delimited_OrderInfoReq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_OrderInfoReq(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
skip_length_delimited_OrderInfoReq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OrderInfoReq(Rest2, 0, 0,
				    TrUserData).

skip_group_OrderInfoReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OrderInfoReq(Rest, 0, Z2,
				    TrUserData).

skip_32_OrderInfoReq(<<_:32, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_OrderInfoReq(Rest, Z1, Z2,
				    TrUserData).

skip_64_OrderInfoReq(<<_:64, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_OrderInfoReq(Rest, Z1, Z2,
				    TrUserData).

decode_msg_OrderInfoRes(Bin, TrUserData) ->
    dfp_read_field_def_OrderInfoRes(Bin, 0, 0,
				    id('OK', TrUserData), id([], TrUserData),
				    TrUserData).

dfp_read_field_def_OrderInfoRes(<<8, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_OrderInfoRes_code(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_OrderInfoRes(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_OrderInfoRes_orderInfo(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_OrderInfoRes(<<>>, 0, 0, F@_1, R1,
				TrUserData) ->
    #'OrderInfoRes'{code = F@_1,
		    orderInfo = lists_reverse(R1, TrUserData)};
dfp_read_field_def_OrderInfoRes(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_OrderInfoRes(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_OrderInfoRes(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OrderInfoRes(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_OrderInfoRes(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_OrderInfoRes_code(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      18 ->
	  d_field_OrderInfoRes_orderInfo(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OrderInfoRes(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_OrderInfoRes(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_OrderInfoRes(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_OrderInfoRes(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_OrderInfoRes(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_OrderInfoRes(<<>>, 0, 0, F@_1, R1,
			       TrUserData) ->
    #'OrderInfoRes'{code = F@_1,
		    orderInfo = lists_reverse(R1, TrUserData)}.

d_field_OrderInfoRes_code(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_OrderInfoRes_code(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_OrderInfoRes_code(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_OrderInfoRes(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_OrderInfoRes_orderInfo(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_OrderInfoRes_orderInfo(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_OrderInfoRes_orderInfo(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_OrderInfo(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_OrderInfoRes(RestF, 0, 0, F@_1,
				    cons(NewFValue, Prev, TrUserData),
				    TrUserData).

skip_varint_OrderInfoRes(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_OrderInfoRes(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_OrderInfoRes(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_OrderInfoRes(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_OrderInfoRes(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_OrderInfoRes(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_OrderInfoRes(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OrderInfoRes(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_OrderInfoRes(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OrderInfoRes(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_OrderInfoRes(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_OrderInfoRes(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_OrderInfoRes(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_OrderInfoRes(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

decode_msg_OrderAcceptReq(Bin, TrUserData) ->
    dfp_read_field_def_OrderAcceptReq(Bin, 0, 0,
				      id(0, TrUserData), TrUserData).

dfp_read_field_def_OrderAcceptReq(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_OrderAcceptReq_orderId(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_OrderAcceptReq(<<>>, 0, 0, F@_1,
				  _) ->
    #'OrderAcceptReq'{orderId = F@_1};
dfp_read_field_def_OrderAcceptReq(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_OrderAcceptReq(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_OrderAcceptReq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OrderAcceptReq(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_OrderAcceptReq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_OrderAcceptReq_orderId(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OrderAcceptReq(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_OrderAcceptReq(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_OrderAcceptReq(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_OrderAcceptReq(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_OrderAcceptReq(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_OrderAcceptReq(<<>>, 0, 0, F@_1, _) ->
    #'OrderAcceptReq'{orderId = F@_1}.

d_field_OrderAcceptReq_orderId(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_OrderAcceptReq_orderId(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_OrderAcceptReq_orderId(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_OrderAcceptReq(RestF, 0, 0,
				      NewFValue, TrUserData).

skip_varint_OrderAcceptReq(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_OrderAcceptReq(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_OrderAcceptReq(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_OrderAcceptReq(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_OrderAcceptReq(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_OrderAcceptReq(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_OrderAcceptReq(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OrderAcceptReq(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_OrderAcceptReq(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OrderAcceptReq(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_OrderAcceptReq(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_OrderAcceptReq(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_OrderAcceptReq(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_OrderAcceptReq(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_OrderDeliveryReq(Bin, TrUserData) ->
    dfp_read_field_def_OrderDeliveryReq(Bin, 0, 0,
					id(0, TrUserData), TrUserData).

dfp_read_field_def_OrderDeliveryReq(<<8, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_OrderDeliveryReq_orderId(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_OrderDeliveryReq(<<>>, 0, 0, F@_1,
				    _) ->
    #'OrderDeliveryReq'{orderId = F@_1};
dfp_read_field_def_OrderDeliveryReq(Other, Z1, Z2, F@_1,
				    TrUserData) ->
    dg_read_field_def_OrderDeliveryReq(Other, Z1, Z2, F@_1,
				       TrUserData).

dg_read_field_def_OrderDeliveryReq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OrderDeliveryReq(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_OrderDeliveryReq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_OrderDeliveryReq_orderId(Rest, 0, 0, F@_1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OrderDeliveryReq(Rest, 0, 0, F@_1,
					     TrUserData);
	    1 ->
		skip_64_OrderDeliveryReq(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_OrderDeliveryReq(Rest, 0, 0, F@_1,
						       TrUserData);
	    3 ->
		skip_group_OrderDeliveryReq(Rest, Key bsr 3, 0, F@_1,
					    TrUserData);
	    5 ->
		skip_32_OrderDeliveryReq(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_OrderDeliveryReq(<<>>, 0, 0, F@_1,
				   _) ->
    #'OrderDeliveryReq'{orderId = F@_1}.

d_field_OrderDeliveryReq_orderId(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_OrderDeliveryReq_orderId(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_OrderDeliveryReq_orderId(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_OrderDeliveryReq(RestF, 0, 0,
					NewFValue, TrUserData).

skip_varint_OrderDeliveryReq(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_OrderDeliveryReq(Rest, Z1, Z2, F@_1,
				 TrUserData);
skip_varint_OrderDeliveryReq(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_OrderDeliveryReq(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_length_delimited_OrderDeliveryReq(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_OrderDeliveryReq(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_OrderDeliveryReq(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OrderDeliveryReq(Rest2, 0, 0, F@_1,
					TrUserData).

skip_group_OrderDeliveryReq(Bin, FNum, Z2, F@_1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OrderDeliveryReq(Rest, 0, Z2, F@_1,
					TrUserData).

skip_32_OrderDeliveryReq(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_OrderDeliveryReq(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_64_OrderDeliveryReq(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_OrderDeliveryReq(Rest, Z1, Z2, F@_1,
					TrUserData).

decode_msg_OrderRewardReq(Bin, TrUserData) ->
    dfp_read_field_def_OrderRewardReq(Bin, 0, 0,
				      id(0, TrUserData), TrUserData).

dfp_read_field_def_OrderRewardReq(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_OrderRewardReq_orderId(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_OrderRewardReq(<<>>, 0, 0, F@_1,
				  _) ->
    #'OrderRewardReq'{orderId = F@_1};
dfp_read_field_def_OrderRewardReq(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_OrderRewardReq(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_OrderRewardReq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OrderRewardReq(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_OrderRewardReq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_OrderRewardReq_orderId(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OrderRewardReq(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_OrderRewardReq(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_OrderRewardReq(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_OrderRewardReq(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_OrderRewardReq(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_OrderRewardReq(<<>>, 0, 0, F@_1, _) ->
    #'OrderRewardReq'{orderId = F@_1}.

d_field_OrderRewardReq_orderId(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_OrderRewardReq_orderId(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_OrderRewardReq_orderId(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_OrderRewardReq(RestF, 0, 0,
				      NewFValue, TrUserData).

skip_varint_OrderRewardReq(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_OrderRewardReq(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_OrderRewardReq(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_OrderRewardReq(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_OrderRewardReq(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_OrderRewardReq(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_OrderRewardReq(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OrderRewardReq(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_OrderRewardReq(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OrderRewardReq(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_OrderRewardReq(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_OrderRewardReq(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_OrderRewardReq(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_OrderRewardReq(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_OrderCommonRes(Bin, TrUserData) ->
    dfp_read_field_def_OrderCommonRes(Bin, 0, 0,
				      id('OK', TrUserData), TrUserData).

dfp_read_field_def_OrderCommonRes(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_OrderCommonRes_code(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_OrderCommonRes(<<>>, 0, 0, F@_1,
				  _) ->
    #'OrderCommonRes'{code = F@_1};
dfp_read_field_def_OrderCommonRes(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_OrderCommonRes(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_OrderCommonRes(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OrderCommonRes(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_OrderCommonRes(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_OrderCommonRes_code(Rest, 0, 0, F@_1,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OrderCommonRes(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_OrderCommonRes(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_OrderCommonRes(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_OrderCommonRes(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_OrderCommonRes(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_OrderCommonRes(<<>>, 0, 0, F@_1, _) ->
    #'OrderCommonRes'{code = F@_1}.

d_field_OrderCommonRes_code(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_OrderCommonRes_code(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_OrderCommonRes_code(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_OrderCommonRes(RestF, 0, 0,
				      NewFValue, TrUserData).

skip_varint_OrderCommonRes(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_OrderCommonRes(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_OrderCommonRes(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_OrderCommonRes(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_OrderCommonRes(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_OrderCommonRes(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_OrderCommonRes(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OrderCommonRes(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_OrderCommonRes(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OrderCommonRes(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_OrderCommonRes(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_OrderCommonRes(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_OrderCommonRes(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_OrderCommonRes(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_WaiterInfo(Bin, TrUserData) ->
    dfp_read_field_def_WaiterInfo(Bin, 0, 0,
				  id(0, TrUserData), id(0, TrUserData),
				  id(0, TrUserData), id(0, TrUserData),
				  TrUserData).

dfp_read_field_def_WaiterInfo(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_WaiterInfo_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, TrUserData);
dfp_read_field_def_WaiterInfo(<<16, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_WaiterInfo_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_WaiterInfo(<<24, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_WaiterInfo_intimate(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_WaiterInfo(<<32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_WaiterInfo_skillLv(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_WaiterInfo(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, _) ->
    #'WaiterInfo'{id = F@_1, type = F@_2, intimate = F@_3,
		  skillLv = F@_4};
dfp_read_field_def_WaiterInfo(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData) ->
    dg_read_field_def_WaiterInfo(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

dg_read_field_def_WaiterInfo(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_WaiterInfo(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_WaiterInfo(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_WaiterInfo_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, TrUserData);
      16 ->
	  d_field_WaiterInfo_type(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      24 ->
	  d_field_WaiterInfo_intimate(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      32 ->
	  d_field_WaiterInfo_skillLv(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_WaiterInfo(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, TrUserData);
	    1 ->
		skip_64_WaiterInfo(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
	    2 ->
		skip_length_delimited_WaiterInfo(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_WaiterInfo(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_WaiterInfo(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   TrUserData)
	  end
    end;
dg_read_field_def_WaiterInfo(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, _) ->
    #'WaiterInfo'{id = F@_1, type = F@_2, intimate = F@_3,
		  skillLv = F@_4}.

d_field_WaiterInfo_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_WaiterInfo_id(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, TrUserData);
d_field_WaiterInfo_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_WaiterInfo(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, F@_4, TrUserData).

d_field_WaiterInfo_type(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_WaiterInfo_type(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_WaiterInfo_type(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_WaiterInfo(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, F@_4, TrUserData).

d_field_WaiterInfo_intimate(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_WaiterInfo_intimate(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_WaiterInfo_intimate(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_WaiterInfo(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, F@_4, TrUserData).

d_field_WaiterInfo_skillLv(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_WaiterInfo_skillLv(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_WaiterInfo_skillLv(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_WaiterInfo(RestF, 0, 0, F@_1, F@_2,
				  F@_3, NewFValue, TrUserData).

skip_varint_WaiterInfo(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_WaiterInfo(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData);
skip_varint_WaiterInfo(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_WaiterInfo(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_length_delimited_WaiterInfo(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_WaiterInfo(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
skip_length_delimited_WaiterInfo(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_WaiterInfo(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_group_WaiterInfo(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_WaiterInfo(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_32_WaiterInfo(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_WaiterInfo(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_64_WaiterInfo(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_WaiterInfo(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

decode_msg_WaiterInfoReq(Bin, TrUserData) ->
    dfp_read_field_def_WaiterInfoReq(Bin, 0, 0, TrUserData).

dfp_read_field_def_WaiterInfoReq(<<>>, 0, 0, _) ->
    #'WaiterInfoReq'{};
dfp_read_field_def_WaiterInfoReq(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_WaiterInfoReq(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_WaiterInfoReq(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_WaiterInfoReq(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_WaiterInfoReq(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_WaiterInfoReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_WaiterInfoReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_WaiterInfoReq(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_WaiterInfoReq(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_WaiterInfoReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_WaiterInfoReq(<<>>, 0, 0, _) ->
    #'WaiterInfoReq'{}.

skip_varint_WaiterInfoReq(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_WaiterInfoReq(Rest, Z1, Z2, TrUserData);
skip_varint_WaiterInfoReq(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_WaiterInfoReq(Rest, Z1, Z2,
				     TrUserData).

skip_length_delimited_WaiterInfoReq(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_WaiterInfoReq(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_WaiterInfoReq(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_WaiterInfoReq(Rest2, 0, 0,
				     TrUserData).

skip_group_WaiterInfoReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_WaiterInfoReq(Rest, 0, Z2,
				     TrUserData).

skip_32_WaiterInfoReq(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_WaiterInfoReq(Rest, Z1, Z2,
				     TrUserData).

skip_64_WaiterInfoReq(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_WaiterInfoReq(Rest, Z1, Z2,
				     TrUserData).

decode_msg_WaiterInfoRes(Bin, TrUserData) ->
    dfp_read_field_def_WaiterInfoRes(Bin, 0, 0,
				     id('OK', TrUserData), id([], TrUserData),
				     TrUserData).

dfp_read_field_def_WaiterInfoRes(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, TrUserData) ->
    d_field_WaiterInfoRes_code(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_WaiterInfoRes(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_WaiterInfoRes_waiterInfo(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_WaiterInfoRes(<<>>, 0, 0, F@_1, R1,
				 TrUserData) ->
    #'WaiterInfoRes'{code = F@_1,
		     waiterInfo = lists_reverse(R1, TrUserData)};
dfp_read_field_def_WaiterInfoRes(Other, Z1, Z2, F@_1,
				 F@_2, TrUserData) ->
    dg_read_field_def_WaiterInfoRes(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData).

dg_read_field_def_WaiterInfoRes(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_WaiterInfoRes(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_WaiterInfoRes(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_WaiterInfoRes_code(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      18 ->
	  d_field_WaiterInfoRes_waiterInfo(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_WaiterInfoRes(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    1 ->
		skip_64_WaiterInfoRes(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    2 ->
		skip_length_delimited_WaiterInfoRes(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    3 ->
		skip_group_WaiterInfoRes(Rest, Key bsr 3, 0, F@_1, F@_2,
					 TrUserData);
	    5 ->
		skip_32_WaiterInfoRes(Rest, 0, 0, F@_1, F@_2,
				      TrUserData)
	  end
    end;
dg_read_field_def_WaiterInfoRes(<<>>, 0, 0, F@_1, R1,
				TrUserData) ->
    #'WaiterInfoRes'{code = F@_1,
		     waiterInfo = lists_reverse(R1, TrUserData)}.

d_field_WaiterInfoRes_code(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_WaiterInfoRes_code(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_WaiterInfoRes_code(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_WaiterInfoRes(RestF, 0, 0, NewFValue,
				     F@_2, TrUserData).

d_field_WaiterInfoRes_waiterInfo(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_WaiterInfoRes_waiterInfo(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_WaiterInfoRes_waiterInfo(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_WaiterInfo(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_WaiterInfoRes(RestF, 0, 0, F@_1,
				     cons(NewFValue, Prev, TrUserData),
				     TrUserData).

skip_varint_WaiterInfoRes(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_WaiterInfoRes(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
skip_varint_WaiterInfoRes(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_WaiterInfoRes(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_length_delimited_WaiterInfoRes(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_WaiterInfoRes(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_WaiterInfoRes(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_WaiterInfoRes(Rest2, 0, 0, F@_1,
				     F@_2, TrUserData).

skip_group_WaiterInfoRes(Bin, FNum, Z2, F@_1, F@_2,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_WaiterInfoRes(Rest, 0, Z2, F@_1,
				     F@_2, TrUserData).

skip_32_WaiterInfoRes(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_WaiterInfoRes(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_64_WaiterInfoRes(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_WaiterInfoRes(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

decode_msg_WaiterUnlockReq(Bin, TrUserData) ->
    dfp_read_field_def_WaiterUnlockReq(Bin, 0, 0,
				       id(0, TrUserData), TrUserData).

dfp_read_field_def_WaiterUnlockReq(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_WaiterUnlockReq_type(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_WaiterUnlockReq(<<>>, 0, 0, F@_1,
				   _) ->
    #'WaiterUnlockReq'{type = F@_1};
dfp_read_field_def_WaiterUnlockReq(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_WaiterUnlockReq(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_WaiterUnlockReq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_WaiterUnlockReq(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_WaiterUnlockReq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_WaiterUnlockReq_type(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_WaiterUnlockReq(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_WaiterUnlockReq(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_WaiterUnlockReq(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_WaiterUnlockReq(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_WaiterUnlockReq(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_WaiterUnlockReq(<<>>, 0, 0, F@_1,
				  _) ->
    #'WaiterUnlockReq'{type = F@_1}.

d_field_WaiterUnlockReq_type(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_WaiterUnlockReq_type(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_WaiterUnlockReq_type(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_WaiterUnlockReq(RestF, 0, 0,
				       NewFValue, TrUserData).

skip_varint_WaiterUnlockReq(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_WaiterUnlockReq(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_WaiterUnlockReq(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_WaiterUnlockReq(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_WaiterUnlockReq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_WaiterUnlockReq(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_WaiterUnlockReq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_WaiterUnlockReq(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_WaiterUnlockReq(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_WaiterUnlockReq(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_WaiterUnlockReq(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_WaiterUnlockReq(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_WaiterUnlockReq(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_WaiterUnlockReq(Rest, Z1, Z2, F@_1,
				       TrUserData).

decode_msg_WaiterUnlockRes(Bin, TrUserData) ->
    dfp_read_field_def_WaiterUnlockRes(Bin, 0, 0,
				       id('OK', TrUserData), TrUserData).

dfp_read_field_def_WaiterUnlockRes(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_WaiterUnlockRes_code(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_WaiterUnlockRes(<<>>, 0, 0, F@_1,
				   _) ->
    #'WaiterUnlockRes'{code = F@_1};
dfp_read_field_def_WaiterUnlockRes(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_WaiterUnlockRes(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_WaiterUnlockRes(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_WaiterUnlockRes(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_WaiterUnlockRes(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_WaiterUnlockRes_code(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_WaiterUnlockRes(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_WaiterUnlockRes(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_WaiterUnlockRes(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_WaiterUnlockRes(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_WaiterUnlockRes(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_WaiterUnlockRes(<<>>, 0, 0, F@_1,
				  _) ->
    #'WaiterUnlockRes'{code = F@_1}.

d_field_WaiterUnlockRes_code(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_WaiterUnlockRes_code(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_WaiterUnlockRes_code(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_WaiterUnlockRes(RestF, 0, 0,
				       NewFValue, TrUserData).

skip_varint_WaiterUnlockRes(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_WaiterUnlockRes(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_WaiterUnlockRes(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_WaiterUnlockRes(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_WaiterUnlockRes(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_WaiterUnlockRes(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_WaiterUnlockRes(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_WaiterUnlockRes(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_WaiterUnlockRes(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_WaiterUnlockRes(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_WaiterUnlockRes(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_WaiterUnlockRes(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_WaiterUnlockRes(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_WaiterUnlockRes(Rest, Z1, Z2, F@_1,
				       TrUserData).

decode_msg_WaiterIntimateReq(Bin, TrUserData) ->
    dfp_read_field_def_WaiterIntimateReq(Bin, 0, 0,
					 id(0, TrUserData), TrUserData).

dfp_read_field_def_WaiterIntimateReq(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    d_field_WaiterIntimateReq_id(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_WaiterIntimateReq(<<>>, 0, 0, F@_1,
				     _) ->
    #'WaiterIntimateReq'{id = F@_1};
dfp_read_field_def_WaiterIntimateReq(Other, Z1, Z2,
				     F@_1, TrUserData) ->
    dg_read_field_def_WaiterIntimateReq(Other, Z1, Z2, F@_1,
					TrUserData).

dg_read_field_def_WaiterIntimateReq(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_WaiterIntimateReq(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_WaiterIntimateReq(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_WaiterIntimateReq_id(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_WaiterIntimateReq(Rest, 0, 0, F@_1,
					      TrUserData);
	    1 ->
		skip_64_WaiterIntimateReq(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_WaiterIntimateReq(Rest, 0, 0,
							F@_1, TrUserData);
	    3 ->
		skip_group_WaiterIntimateReq(Rest, Key bsr 3, 0, F@_1,
					     TrUserData);
	    5 ->
		skip_32_WaiterIntimateReq(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_WaiterIntimateReq(<<>>, 0, 0, F@_1,
				    _) ->
    #'WaiterIntimateReq'{id = F@_1}.

d_field_WaiterIntimateReq_id(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_WaiterIntimateReq_id(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_WaiterIntimateReq_id(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_WaiterIntimateReq(RestF, 0, 0,
					 NewFValue, TrUserData).

skip_varint_WaiterIntimateReq(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_WaiterIntimateReq(Rest, Z1, Z2, F@_1,
				  TrUserData);
skip_varint_WaiterIntimateReq(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_WaiterIntimateReq(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_length_delimited_WaiterIntimateReq(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_WaiterIntimateReq(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_WaiterIntimateReq(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_WaiterIntimateReq(Rest2, 0, 0, F@_1,
					 TrUserData).

skip_group_WaiterIntimateReq(Bin, FNum, Z2, F@_1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_WaiterIntimateReq(Rest, 0, Z2, F@_1,
					 TrUserData).

skip_32_WaiterIntimateReq(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_WaiterIntimateReq(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_64_WaiterIntimateReq(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_WaiterIntimateReq(Rest, Z1, Z2, F@_1,
					 TrUserData).

decode_msg_WaiterIntimateRes(Bin, TrUserData) ->
    dfp_read_field_def_WaiterIntimateRes(Bin, 0, 0,
					 id('OK', TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_WaiterIntimateRes(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_WaiterIntimateRes_code(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_WaiterIntimateRes(<<18,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_WaiterIntimateRes_waiterInfo(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_WaiterIntimateRes(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #'WaiterIntimateRes'{code = F@_1, waiterInfo = F@_2};
dfp_read_field_def_WaiterIntimateRes(Other, Z1, Z2,
				     F@_1, F@_2, TrUserData) ->
    dg_read_field_def_WaiterIntimateRes(Other, Z1, Z2, F@_1,
					F@_2, TrUserData).

dg_read_field_def_WaiterIntimateRes(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_WaiterIntimateRes(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_WaiterIntimateRes(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_WaiterIntimateRes_code(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      18 ->
	  d_field_WaiterIntimateRes_waiterInfo(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_WaiterIntimateRes(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    1 ->
		skip_64_WaiterIntimateRes(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    2 ->
		skip_length_delimited_WaiterIntimateRes(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    3 ->
		skip_group_WaiterIntimateRes(Rest, Key bsr 3, 0, F@_1,
					     F@_2, TrUserData);
	    5 ->
		skip_32_WaiterIntimateRes(Rest, 0, 0, F@_1, F@_2,
					  TrUserData)
	  end
    end;
dg_read_field_def_WaiterIntimateRes(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #'WaiterIntimateRes'{code = F@_1, waiterInfo = F@_2}.

d_field_WaiterIntimateRes_code(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_WaiterIntimateRes_code(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_WaiterIntimateRes_code(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_WaiterIntimateRes(RestF, 0, 0,
					 NewFValue, F@_2, TrUserData).

d_field_WaiterIntimateRes_waiterInfo(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_WaiterIntimateRes_waiterInfo(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_WaiterIntimateRes_waiterInfo(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_WaiterInfo(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_WaiterIntimateRes(RestF, 0, 0, F@_1,
					 if Prev == undefined -> NewFValue;
					    true ->
						merge_msg_WaiterInfo(Prev,
								     NewFValue,
								     TrUserData)
					 end,
					 TrUserData).

skip_varint_WaiterIntimateRes(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_WaiterIntimateRes(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
skip_varint_WaiterIntimateRes(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_WaiterIntimateRes(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_length_delimited_WaiterIntimateRes(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_WaiterIntimateRes(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
skip_length_delimited_WaiterIntimateRes(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_WaiterIntimateRes(Rest2, 0, 0, F@_1,
					 F@_2, TrUserData).

skip_group_WaiterIntimateRes(Bin, FNum, Z2, F@_1, F@_2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_WaiterIntimateRes(Rest, 0, Z2, F@_1,
					 F@_2, TrUserData).

skip_32_WaiterIntimateRes(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_WaiterIntimateRes(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_64_WaiterIntimateRes(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_WaiterIntimateRes(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

decode_msg_SpeedUpReq(Bin, TrUserData) ->
    dfp_read_field_def_SpeedUpReq(Bin, 0, 0,
				  id(0, TrUserData), TrUserData).

dfp_read_field_def_SpeedUpReq(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_SpeedUpReq_type(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_SpeedUpReq(<<>>, 0, 0, F@_1, _) ->
    #'SpeedUpReq'{type = F@_1};
dfp_read_field_def_SpeedUpReq(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_SpeedUpReq(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_SpeedUpReq(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SpeedUpReq(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_SpeedUpReq(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_SpeedUpReq_type(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SpeedUpReq(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_SpeedUpReq(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_SpeedUpReq(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_SpeedUpReq(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_SpeedUpReq(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_SpeedUpReq(<<>>, 0, 0, F@_1, _) ->
    #'SpeedUpReq'{type = F@_1}.

d_field_SpeedUpReq_type(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_SpeedUpReq_type(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_SpeedUpReq_type(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_SpeedUpReq(RestF, 0, 0, NewFValue,
				  TrUserData).

skip_varint_SpeedUpReq(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_SpeedUpReq(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_SpeedUpReq(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_SpeedUpReq(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_SpeedUpReq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_SpeedUpReq(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_SpeedUpReq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SpeedUpReq(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_SpeedUpReq(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SpeedUpReq(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_SpeedUpReq(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_SpeedUpReq(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_SpeedUpReq(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_SpeedUpReq(Rest, Z1, Z2, F@_1,
				  TrUserData).

decode_msg_SpeedUpRes(Bin, TrUserData) ->
    dfp_read_field_def_SpeedUpRes(Bin, 0, 0,
				  id('OK', TrUserData), id(0, TrUserData),
				  TrUserData).

dfp_read_field_def_SpeedUpRes(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_SpeedUpRes_code(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_SpeedUpRes(<<16, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_SpeedUpRes_coin(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_SpeedUpRes(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #'SpeedUpRes'{code = F@_1, coin = F@_2};
dfp_read_field_def_SpeedUpRes(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData) ->
    dg_read_field_def_SpeedUpRes(Other, Z1, Z2, F@_1, F@_2,
				 TrUserData).

dg_read_field_def_SpeedUpRes(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SpeedUpRes(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
dg_read_field_def_SpeedUpRes(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_SpeedUpRes_code(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      16 ->
	  d_field_SpeedUpRes_coin(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SpeedUpRes(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    1 ->
		skip_64_SpeedUpRes(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_SpeedUpRes(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    3 ->
		skip_group_SpeedUpRes(Rest, Key bsr 3, 0, F@_1, F@_2,
				      TrUserData);
	    5 ->
		skip_32_SpeedUpRes(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_SpeedUpRes(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #'SpeedUpRes'{code = F@_1, coin = F@_2}.

d_field_SpeedUpRes_code(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_SpeedUpRes_code(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_SpeedUpRes_code(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_SpeedUpRes(RestF, 0, 0, NewFValue,
				  F@_2, TrUserData).

d_field_SpeedUpRes_coin(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_SpeedUpRes_coin(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_SpeedUpRes_coin(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_SpeedUpRes(RestF, 0, 0, F@_1,
				  NewFValue, TrUserData).

skip_varint_SpeedUpRes(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_SpeedUpRes(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
skip_varint_SpeedUpRes(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_SpeedUpRes(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

skip_length_delimited_SpeedUpRes(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_SpeedUpRes(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_SpeedUpRes(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SpeedUpRes(Rest2, 0, 0, F@_1, F@_2,
				  TrUserData).

skip_group_SpeedUpRes(Bin, FNum, Z2, F@_1, F@_2,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SpeedUpRes(Rest, 0, Z2, F@_1, F@_2,
				  TrUserData).

skip_32_SpeedUpRes(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, TrUserData) ->
    dfp_read_field_def_SpeedUpRes(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

skip_64_SpeedUpRes(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, TrUserData) ->
    dfp_read_field_def_SpeedUpRes(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

decode_msg_WechatLoginReq(Bin, TrUserData) ->
    dfp_read_field_def_WechatLoginReq(Bin, 0, 0,
				      id([], TrUserData), TrUserData).

dfp_read_field_def_WechatLoginReq(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_WechatLoginReq_wxCode(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_WechatLoginReq(<<>>, 0, 0, F@_1,
				  _) ->
    #'WechatLoginReq'{wxCode = F@_1};
dfp_read_field_def_WechatLoginReq(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_WechatLoginReq(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_WechatLoginReq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_WechatLoginReq(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_WechatLoginReq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_WechatLoginReq_wxCode(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_WechatLoginReq(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_WechatLoginReq(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_WechatLoginReq(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_WechatLoginReq(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_WechatLoginReq(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_WechatLoginReq(<<>>, 0, 0, F@_1, _) ->
    #'WechatLoginReq'{wxCode = F@_1}.

d_field_WechatLoginReq_wxCode(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_WechatLoginReq_wxCode(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_WechatLoginReq_wxCode(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_WechatLoginReq(RestF, 0, 0,
				      NewFValue, TrUserData).

skip_varint_WechatLoginReq(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_WechatLoginReq(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_WechatLoginReq(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_WechatLoginReq(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_WechatLoginReq(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_WechatLoginReq(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_WechatLoginReq(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_WechatLoginReq(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_WechatLoginReq(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_WechatLoginReq(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_WechatLoginReq(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_WechatLoginReq(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_WechatLoginReq(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_WechatLoginReq(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_WechatLoginRes(Bin, TrUserData) ->
    dfp_read_field_def_WechatLoginRes(Bin, 0, 0,
				      id('OK', TrUserData), id([], TrUserData),
				      TrUserData).

dfp_read_field_def_WechatLoginRes(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_WechatLoginRes_code(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_WechatLoginRes(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_WechatLoginRes_openId(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_WechatLoginRes(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #'WechatLoginRes'{code = F@_1, openId = F@_2};
dfp_read_field_def_WechatLoginRes(Other, Z1, Z2, F@_1,
				  F@_2, TrUserData) ->
    dg_read_field_def_WechatLoginRes(Other, Z1, Z2, F@_1,
				     F@_2, TrUserData).

dg_read_field_def_WechatLoginRes(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_WechatLoginRes(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_WechatLoginRes(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_WechatLoginRes_code(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      18 ->
	  d_field_WechatLoginRes_openId(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_WechatLoginRes(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    1 ->
		skip_64_WechatLoginRes(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    2 ->
		skip_length_delimited_WechatLoginRes(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    3 ->
		skip_group_WechatLoginRes(Rest, Key bsr 3, 0, F@_1,
					  F@_2, TrUserData);
	    5 ->
		skip_32_WechatLoginRes(Rest, 0, 0, F@_1, F@_2,
				       TrUserData)
	  end
    end;
dg_read_field_def_WechatLoginRes(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #'WechatLoginRes'{code = F@_1, openId = F@_2}.

d_field_WechatLoginRes_code(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_WechatLoginRes_code(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_WechatLoginRes_code(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ERROR_CODE(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_WechatLoginRes(RestF, 0, 0,
				      NewFValue, F@_2, TrUserData).

d_field_WechatLoginRes_openId(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_WechatLoginRes_openId(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_WechatLoginRes_openId(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_WechatLoginRes(RestF, 0, 0, F@_1,
				      NewFValue, TrUserData).

skip_varint_WechatLoginRes(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_WechatLoginRes(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
skip_varint_WechatLoginRes(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_WechatLoginRes(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_length_delimited_WechatLoginRes(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_WechatLoginRes(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_WechatLoginRes(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_WechatLoginRes(Rest2, 0, 0, F@_1,
				      F@_2, TrUserData).

skip_group_WechatLoginRes(Bin, FNum, Z2, F@_1, F@_2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_WechatLoginRes(Rest, 0, Z2, F@_1,
				      F@_2, TrUserData).

skip_32_WechatLoginRes(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_WechatLoginRes(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_64_WechatLoginRes(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_WechatLoginRes(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

d_enum_ERROR_CODE(0) -> 'OK';
d_enum_ERROR_CODE(10000) -> 'ERR_COMMON_SYS';
d_enum_ERROR_CODE(10001) -> 'ERR_COMMON_COST_LIMIT';
d_enum_ERROR_CODE(10002) -> 'ERR_COMMON_MAP_LIMIT';
d_enum_ERROR_CODE(10003) -> 'ERR_COMMON_BUY_LIMIT';
d_enum_ERROR_CODE(10004) -> 'ERR_COMMON_ALREADY_SIGN';
d_enum_ERROR_CODE(10005) -> 'ERR_COMMON_REWARD_LIMIT';
d_enum_ERROR_CODE(10006) -> 'ERR_COMMON_REWARD_ALREADY';
d_enum_ERROR_CODE(10007) -> 'ERR_COMMON_CNT_LIMIT';
d_enum_ERROR_CODE(10008) -> 'ERR_COMMON_FUNC_UNOPEND';
d_enum_ERROR_CODE(10009) -> 'ERR_COMMON_ORDER_OUTTIME';
d_enum_ERROR_CODE(10010) -> 'ERR_COMMON_ORDER_NOACCEPT';
d_enum_ERROR_CODE(10011) ->
    'ERR_COMMON_INSUFFICIENT_MATERIAL';
d_enum_ERROR_CODE(10012) ->
    'ERR_COMMON_ORDER_NOCOMMPLET';
d_enum_ERROR_CODE(10013) -> 'ERR_COMMON_WAITER_NOEXIST';
d_enum_ERROR_CODE(10014) -> 'ERR_COMMON_WAITER_UNLOCK';
d_enum_ERROR_CODE(10015) -> 'ERR_COMMON_ORDER_COMMPLET';
d_enum_ERROR_CODE(10016) -> 'ERR_COMMON_BUY_ERR';
d_enum_ERROR_CODE(10017) -> 'ERR_COMMON_ORDER_ACCEPT';
d_enum_ERROR_CODE(10018) -> 'ERR_COMMON_DIAMOND_LIMIT';
d_enum_ERROR_CODE(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'HeartReq' -> merge_msg_HeartReq(Prev, New, TrUserData);
      'HeartRes' -> merge_msg_HeartRes(Prev, New, TrUserData);
      'LoginReq' -> merge_msg_LoginReq(Prev, New, TrUserData);
      'LoginRes' -> merge_msg_LoginRes(Prev, New, TrUserData);
      'RoleInfo' -> merge_msg_RoleInfo(Prev, New, TrUserData);
      'RoleInfoReq' ->
	  merge_msg_RoleInfoReq(Prev, New, TrUserData);
      'RoleInfoRes' ->
	  merge_msg_RoleInfoRes(Prev, New, TrUserData);
      'RoleAssetChangeNotify' ->
	  merge_msg_RoleAssetChangeNotify(Prev, New, TrUserData);
      'BoxRewardReq' ->
	  merge_msg_BoxRewardReq(Prev, New, TrUserData);
      'BoxRewardRes' ->
	  merge_msg_BoxRewardRes(Prev, New, TrUserData);
      'OfflineRewardReq' ->
	  merge_msg_OfflineRewardReq(Prev, New, TrUserData);
      'OfflineRewardRes' ->
	  merge_msg_OfflineRewardRes(Prev, New, TrUserData);
      'OfflineInfoReq' ->
	  merge_msg_OfflineInfoReq(Prev, New, TrUserData);
      'OfflineInfoRes' ->
	  merge_msg_OfflineInfoRes(Prev, New, TrUserData);
      'PosInfo' -> merge_msg_PosInfo(Prev, New, TrUserData);
      'ShopInfo' -> merge_msg_ShopInfo(Prev, New, TrUserData);
      'ProduceNewReq' ->
	  merge_msg_ProduceNewReq(Prev, New, TrUserData);
      'ProduceNewRes' ->
	  merge_msg_ProduceNewRes(Prev, New, TrUserData);
      'MergeExchangeReq' ->
	  merge_msg_MergeExchangeReq(Prev, New, TrUserData);
      'MergeExchangeRes' ->
	  merge_msg_MergeExchangeRes(Prev, New, TrUserData);
      'RecoveryObjectReq' ->
	  merge_msg_RecoveryObjectReq(Prev, New, TrUserData);
      'RecoveryObjectRes' ->
	  merge_msg_RecoveryObjectRes(Prev, New, TrUserData);
      'ObjectProduceAssetNotify' ->
	  merge_msg_ObjectProduceAssetNotify(Prev, New,
					     TrUserData);
      'PosInfoReq' ->
	  merge_msg_PosInfoReq(Prev, New, TrUserData);
      'PosInfoRes' ->
	  merge_msg_PosInfoRes(Prev, New, TrUserData);
      'BuyObjectReq' ->
	  merge_msg_BuyObjectReq(Prev, New, TrUserData);
      'BuyObjectRes' ->
	  merge_msg_BuyObjectRes(Prev, New, TrUserData);
      'ShopInfoReq' ->
	  merge_msg_ShopInfoReq(Prev, New, TrUserData);
      'ShopInfoRes' ->
	  merge_msg_ShopInfoRes(Prev, New, TrUserData);
      'SignInfoReq' ->
	  merge_msg_SignInfoReq(Prev, New, TrUserData);
      'SignInfoRes' ->
	  merge_msg_SignInfoRes(Prev, New, TrUserData);
      'SignRewardReq' ->
	  merge_msg_SignRewardReq(Prev, New, TrUserData);
      'SignRewardRes' ->
	  merge_msg_SignRewardRes(Prev, New, TrUserData);
      'TurntableInfoReq' ->
	  merge_msg_TurntableInfoReq(Prev, New, TrUserData);
      'TurntableInfoRes' ->
	  merge_msg_TurntableInfoRes(Prev, New, TrUserData);
      'PlayTurntableReq' ->
	  merge_msg_PlayTurntableReq(Prev, New, TrUserData);
      'PlayTurntableRes' ->
	  merge_msg_PlayTurntableRes(Prev, New, TrUserData);
      'AdRewardReq' ->
	  merge_msg_AdRewardReq(Prev, New, TrUserData);
      'AdRewardRes' ->
	  merge_msg_AdRewardRes(Prev, New, TrUserData);
      'InviteInfo' ->
	  merge_msg_InviteInfo(Prev, New, TrUserData);
      'InviteInfoReq' ->
	  merge_msg_InviteInfoReq(Prev, New, TrUserData);
      'InviteInfoRes' ->
	  merge_msg_InviteInfoRes(Prev, New, TrUserData);
      'InviteRewardReq' ->
	  merge_msg_InviteRewardReq(Prev, New, TrUserData);
      'InviteRewardRes' ->
	  merge_msg_InviteRewardRes(Prev, New, TrUserData);
      'OrderInfo' ->
	  merge_msg_OrderInfo(Prev, New, TrUserData);
      'OrderInfoReq' ->
	  merge_msg_OrderInfoReq(Prev, New, TrUserData);
      'OrderInfoRes' ->
	  merge_msg_OrderInfoRes(Prev, New, TrUserData);
      'OrderAcceptReq' ->
	  merge_msg_OrderAcceptReq(Prev, New, TrUserData);
      'OrderDeliveryReq' ->
	  merge_msg_OrderDeliveryReq(Prev, New, TrUserData);
      'OrderRewardReq' ->
	  merge_msg_OrderRewardReq(Prev, New, TrUserData);
      'OrderCommonRes' ->
	  merge_msg_OrderCommonRes(Prev, New, TrUserData);
      'WaiterInfo' ->
	  merge_msg_WaiterInfo(Prev, New, TrUserData);
      'WaiterInfoReq' ->
	  merge_msg_WaiterInfoReq(Prev, New, TrUserData);
      'WaiterInfoRes' ->
	  merge_msg_WaiterInfoRes(Prev, New, TrUserData);
      'WaiterUnlockReq' ->
	  merge_msg_WaiterUnlockReq(Prev, New, TrUserData);
      'WaiterUnlockRes' ->
	  merge_msg_WaiterUnlockRes(Prev, New, TrUserData);
      'WaiterIntimateReq' ->
	  merge_msg_WaiterIntimateReq(Prev, New, TrUserData);
      'WaiterIntimateRes' ->
	  merge_msg_WaiterIntimateRes(Prev, New, TrUserData);
      'SpeedUpReq' ->
	  merge_msg_SpeedUpReq(Prev, New, TrUserData);
      'SpeedUpRes' ->
	  merge_msg_SpeedUpRes(Prev, New, TrUserData);
      'WechatLoginReq' ->
	  merge_msg_WechatLoginReq(Prev, New, TrUserData);
      'WechatLoginRes' ->
	  merge_msg_WechatLoginRes(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_HeartReq/3}).
merge_msg_HeartReq(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_HeartRes/3}).
merge_msg_HeartRes(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_LoginReq/3}).
merge_msg_LoginReq(#'LoginReq'{tokenId = PFtokenId,
			       name = PFname, headUrl = PFheadUrl,
			       gender = PFgender,
			       inviteTokenId = PFinviteTokenId},
		   #'LoginReq'{tokenId = NFtokenId, name = NFname,
			       headUrl = NFheadUrl, gender = NFgender,
			       inviteTokenId = NFinviteTokenId},
		   _) ->
    #'LoginReq'{tokenId =
		    if NFtokenId =:= undefined -> PFtokenId;
		       true -> NFtokenId
		    end,
		name =
		    if NFname =:= undefined -> PFname;
		       true -> NFname
		    end,
		headUrl =
		    if NFheadUrl =:= undefined -> PFheadUrl;
		       true -> NFheadUrl
		    end,
		gender =
		    if NFgender =:= undefined -> PFgender;
		       true -> NFgender
		    end,
		inviteTokenId =
		    if NFinviteTokenId =:= undefined -> PFinviteTokenId;
		       true -> NFinviteTokenId
		    end}.

-compile({nowarn_unused_function,merge_msg_LoginRes/3}).
merge_msg_LoginRes(#'LoginRes'{code = PFcode,
			       tokenId = PFtokenId},
		   #'LoginRes'{code = NFcode, tokenId = NFtokenId}, _) ->
    #'LoginRes'{code =
		    if NFcode =:= undefined -> PFcode;
		       true -> NFcode
		    end,
		tokenId =
		    if NFtokenId =:= undefined -> PFtokenId;
		       true -> NFtokenId
		    end}.

-compile({nowarn_unused_function,merge_msg_RoleInfo/3}).
merge_msg_RoleInfo(#'RoleInfo'{tokenId = PFtokenId,
			       headUrl = PFheadUrl, name = PFname, lv = PFlv,
			       diamond = PFdiamond, coin = PFcoin,
			       reputation = PFreputation, gender = PFgender,
			       loginDay = PFloginDay,
			       lastLogoutTime = PFlastLogoutTime},
		   #'RoleInfo'{tokenId = NFtokenId, headUrl = NFheadUrl,
			       name = NFname, lv = NFlv, diamond = NFdiamond,
			       coin = NFcoin, reputation = NFreputation,
			       gender = NFgender, loginDay = NFloginDay,
			       lastLogoutTime = NFlastLogoutTime},
		   _) ->
    #'RoleInfo'{tokenId =
		    if NFtokenId =:= undefined -> PFtokenId;
		       true -> NFtokenId
		    end,
		headUrl =
		    if NFheadUrl =:= undefined -> PFheadUrl;
		       true -> NFheadUrl
		    end,
		name =
		    if NFname =:= undefined -> PFname;
		       true -> NFname
		    end,
		lv =
		    if NFlv =:= undefined -> PFlv;
		       true -> NFlv
		    end,
		diamond =
		    if NFdiamond =:= undefined -> PFdiamond;
		       true -> NFdiamond
		    end,
		coin =
		    if NFcoin =:= undefined -> PFcoin;
		       true -> NFcoin
		    end,
		reputation =
		    if NFreputation =:= undefined -> PFreputation;
		       true -> NFreputation
		    end,
		gender =
		    if NFgender =:= undefined -> PFgender;
		       true -> NFgender
		    end,
		loginDay =
		    if NFloginDay =:= undefined -> PFloginDay;
		       true -> NFloginDay
		    end,
		lastLogoutTime =
		    if NFlastLogoutTime =:= undefined -> PFlastLogoutTime;
		       true -> NFlastLogoutTime
		    end}.

-compile({nowarn_unused_function,merge_msg_RoleInfoReq/3}).
merge_msg_RoleInfoReq(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_RoleInfoRes/3}).
merge_msg_RoleInfoRes(#'RoleInfoRes'{code = PFcode,
				     roleInfo = PFroleInfo},
		      #'RoleInfoRes'{code = NFcode, roleInfo = NFroleInfo},
		      TrUserData) ->
    #'RoleInfoRes'{code =
		       if NFcode =:= undefined -> PFcode;
			  true -> NFcode
		       end,
		   roleInfo =
		       if PFroleInfo /= undefined, NFroleInfo /= undefined ->
			      merge_msg_RoleInfo(PFroleInfo, NFroleInfo,
						 TrUserData);
			  PFroleInfo == undefined -> NFroleInfo;
			  NFroleInfo == undefined -> PFroleInfo
		       end}.

-compile({nowarn_unused_function,merge_msg_RoleAssetChangeNotify/3}).
merge_msg_RoleAssetChangeNotify(#'RoleAssetChangeNotify'{diamond
							     = PFdiamond,
							 coin = PFcoin,
							 reputation =
							     PFreputation},
				#'RoleAssetChangeNotify'{diamond = NFdiamond,
							 coin = NFcoin,
							 reputation =
							     NFreputation},
				_) ->
    #'RoleAssetChangeNotify'{diamond =
				 if NFdiamond =:= undefined -> PFdiamond;
				    true -> NFdiamond
				 end,
			     coin =
				 if NFcoin =:= undefined -> PFcoin;
				    true -> NFcoin
				 end,
			     reputation =
				 if NFreputation =:= undefined -> PFreputation;
				    true -> NFreputation
				 end}.

-compile({nowarn_unused_function,merge_msg_BoxRewardReq/3}).
merge_msg_BoxRewardReq(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_BoxRewardRes/3}).
merge_msg_BoxRewardRes(#'BoxRewardRes'{code = PFcode},
		       #'BoxRewardRes'{code = NFcode}, _) ->
    #'BoxRewardRes'{code =
			if NFcode =:= undefined -> PFcode;
			   true -> NFcode
			end}.

-compile({nowarn_unused_function,merge_msg_OfflineRewardReq/3}).
merge_msg_OfflineRewardReq(#'OfflineRewardReq'{type =
						   PFtype},
			   #'OfflineRewardReq'{type = NFtype}, _) ->
    #'OfflineRewardReq'{type =
			    if NFtype =:= undefined -> PFtype;
			       true -> NFtype
			    end}.

-compile({nowarn_unused_function,merge_msg_OfflineRewardRes/3}).
merge_msg_OfflineRewardRes(#'OfflineRewardRes'{code =
						   PFcode},
			   #'OfflineRewardRes'{code = NFcode}, _) ->
    #'OfflineRewardRes'{code =
			    if NFcode =:= undefined -> PFcode;
			       true -> NFcode
			    end}.

-compile({nowarn_unused_function,merge_msg_OfflineInfoReq/3}).
merge_msg_OfflineInfoReq(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_OfflineInfoRes/3}).
merge_msg_OfflineInfoRes(#'OfflineInfoRes'{code =
					       PFcode,
					   coin = PFcoin},
			 #'OfflineInfoRes'{code = NFcode, coin = NFcoin}, _) ->
    #'OfflineInfoRes'{code =
			  if NFcode =:= undefined -> PFcode;
			     true -> NFcode
			  end,
		      coin =
			  if NFcoin =:= undefined -> PFcoin;
			     true -> NFcoin
			  end}.

-compile({nowarn_unused_function,merge_msg_PosInfo/3}).
merge_msg_PosInfo(#'PosInfo'{pos = PFpos,
			     type = PFtype},
		  #'PosInfo'{pos = NFpos, type = NFtype}, _) ->
    #'PosInfo'{pos =
		   if NFpos =:= undefined -> PFpos;
		      true -> NFpos
		   end,
	       type =
		   if NFtype =:= undefined -> PFtype;
		      true -> NFtype
		   end}.

-compile({nowarn_unused_function,merge_msg_ShopInfo/3}).
merge_msg_ShopInfo(#'ShopInfo'{id = PFid, type = PFtype,
			       price = PFprice},
		   #'ShopInfo'{id = NFid, type = NFtype, price = NFprice},
		   _) ->
    #'ShopInfo'{id =
		    if NFid =:= undefined -> PFid;
		       true -> NFid
		    end,
		type =
		    if NFtype =:= undefined -> PFtype;
		       true -> NFtype
		    end,
		price =
		    if NFprice =:= undefined -> PFprice;
		       true -> NFprice
		    end}.

-compile({nowarn_unused_function,merge_msg_ProduceNewReq/3}).
merge_msg_ProduceNewReq(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_ProduceNewRes/3}).
merge_msg_ProduceNewRes(#'ProduceNewRes'{code = PFcode,
					 posInfo = PFposInfo,
					 nextType = PFnextType,
					 nextPrice = PFnextPrice},
			#'ProduceNewRes'{code = NFcode, posInfo = NFposInfo,
					 nextType = NFnextType,
					 nextPrice = NFnextPrice},
			TrUserData) ->
    #'ProduceNewRes'{code =
			 if NFcode =:= undefined -> PFcode;
			    true -> NFcode
			 end,
		     posInfo =
			 if PFposInfo /= undefined, NFposInfo /= undefined ->
				merge_msg_PosInfo(PFposInfo, NFposInfo,
						  TrUserData);
			    PFposInfo == undefined -> NFposInfo;
			    NFposInfo == undefined -> PFposInfo
			 end,
		     nextType =
			 if NFnextType =:= undefined -> PFnextType;
			    true -> NFnextType
			 end,
		     nextPrice =
			 if NFnextPrice =:= undefined -> PFnextPrice;
			    true -> NFnextPrice
			 end}.

-compile({nowarn_unused_function,merge_msg_MergeExchangeReq/3}).
merge_msg_MergeExchangeReq(#'MergeExchangeReq'{posOne =
						   PFposOne,
					       posTwo = PFposTwo},
			   #'MergeExchangeReq'{posOne = NFposOne,
					       posTwo = NFposTwo},
			   _) ->
    #'MergeExchangeReq'{posOne =
			    if NFposOne =:= undefined -> PFposOne;
			       true -> NFposOne
			    end,
			posTwo =
			    if NFposTwo =:= undefined -> PFposTwo;
			       true -> NFposTwo
			    end}.

-compile({nowarn_unused_function,merge_msg_MergeExchangeRes/3}).
merge_msg_MergeExchangeRes(#'MergeExchangeRes'{code =
						   PFcode,
					       posInfo = PFposInfo,
					       nextType = PFnextType,
					       nextPrice = PFnextPrice},
			   #'MergeExchangeRes'{code = NFcode,
					       posInfo = NFposInfo,
					       nextType = NFnextType,
					       nextPrice = NFnextPrice},
			   TrUserData) ->
    #'MergeExchangeRes'{code =
			    if NFcode =:= undefined -> PFcode;
			       true -> NFcode
			    end,
			posInfo =
			    if PFposInfo /= undefined, NFposInfo /= undefined ->
				   'erlang_++'(PFposInfo, NFposInfo,
					       TrUserData);
			       PFposInfo == undefined -> NFposInfo;
			       NFposInfo == undefined -> PFposInfo
			    end,
			nextType =
			    if NFnextType =:= undefined -> PFnextType;
			       true -> NFnextType
			    end,
			nextPrice =
			    if NFnextPrice =:= undefined -> PFnextPrice;
			       true -> NFnextPrice
			    end}.

-compile({nowarn_unused_function,merge_msg_RecoveryObjectReq/3}).
merge_msg_RecoveryObjectReq(#'RecoveryObjectReq'{pos =
						     PFpos},
			    #'RecoveryObjectReq'{pos = NFpos}, _) ->
    #'RecoveryObjectReq'{pos =
			     if NFpos =:= undefined -> PFpos;
				true -> NFpos
			     end}.

-compile({nowarn_unused_function,merge_msg_RecoveryObjectRes/3}).
merge_msg_RecoveryObjectRes(#'RecoveryObjectRes'{code =
						     PFcode,
						 posInfo = PFposInfo},
			    #'RecoveryObjectRes'{code = NFcode,
						 posInfo = NFposInfo},
			    TrUserData) ->
    #'RecoveryObjectRes'{code =
			     if NFcode =:= undefined -> PFcode;
				true -> NFcode
			     end,
			 posInfo =
			     if PFposInfo /= undefined,
				NFposInfo /= undefined ->
				    'erlang_++'(PFposInfo, NFposInfo,
						TrUserData);
				PFposInfo == undefined -> NFposInfo;
				NFposInfo == undefined -> PFposInfo
			     end}.

-compile({nowarn_unused_function,merge_msg_ObjectProduceAssetNotify/3}).
merge_msg_ObjectProduceAssetNotify(#'ObjectProduceAssetNotify'{pos
								   = PFpos,
							       asset = PFasset},
				   #'ObjectProduceAssetNotify'{pos = NFpos,
							       asset = NFasset},
				   _) ->
    #'ObjectProduceAssetNotify'{pos =
				    if NFpos =:= undefined -> PFpos;
				       true -> NFpos
				    end,
				asset =
				    if NFasset =:= undefined -> PFasset;
				       true -> NFasset
				    end}.

-compile({nowarn_unused_function,merge_msg_PosInfoReq/3}).
merge_msg_PosInfoReq(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_PosInfoRes/3}).
merge_msg_PosInfoRes(#'PosInfoRes'{code = PFcode,
				   posInfo = PFposInfo, nextType = PFnextType,
				   nextPrice = PFnextPrice},
		     #'PosInfoRes'{code = NFcode, posInfo = NFposInfo,
				   nextType = NFnextType,
				   nextPrice = NFnextPrice},
		     TrUserData) ->
    #'PosInfoRes'{code =
		      if NFcode =:= undefined -> PFcode;
			 true -> NFcode
		      end,
		  posInfo =
		      if PFposInfo /= undefined, NFposInfo /= undefined ->
			     'erlang_++'(PFposInfo, NFposInfo, TrUserData);
			 PFposInfo == undefined -> NFposInfo;
			 NFposInfo == undefined -> PFposInfo
		      end,
		  nextType =
		      if NFnextType =:= undefined -> PFnextType;
			 true -> NFnextType
		      end,
		  nextPrice =
		      if NFnextPrice =:= undefined -> PFnextPrice;
			 true -> NFnextPrice
		      end}.

-compile({nowarn_unused_function,merge_msg_BuyObjectReq/3}).
merge_msg_BuyObjectReq(#'BuyObjectReq'{type = PFtype},
		       #'BuyObjectReq'{type = NFtype}, _) ->
    #'BuyObjectReq'{type =
			if NFtype =:= undefined -> PFtype;
			   true -> NFtype
			end}.

-compile({nowarn_unused_function,merge_msg_BuyObjectRes/3}).
merge_msg_BuyObjectRes(#'BuyObjectRes'{code = PFcode,
				       posInfo = PFposInfo},
		       #'BuyObjectRes'{code = NFcode, posInfo = NFposInfo},
		       TrUserData) ->
    #'BuyObjectRes'{code =
			if NFcode =:= undefined -> PFcode;
			   true -> NFcode
			end,
		    posInfo =
			if PFposInfo /= undefined, NFposInfo /= undefined ->
			       merge_msg_PosInfo(PFposInfo, NFposInfo,
						 TrUserData);
			   PFposInfo == undefined -> NFposInfo;
			   NFposInfo == undefined -> PFposInfo
			end}.

-compile({nowarn_unused_function,merge_msg_ShopInfoReq/3}).
merge_msg_ShopInfoReq(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_ShopInfoRes/3}).
merge_msg_ShopInfoRes(#'ShopInfoRes'{code = PFcode,
				     shopInfo = PFshopInfo},
		      #'ShopInfoRes'{code = NFcode, shopInfo = NFshopInfo},
		      TrUserData) ->
    #'ShopInfoRes'{code =
		       if NFcode =:= undefined -> PFcode;
			  true -> NFcode
		       end,
		   shopInfo =
		       if PFshopInfo /= undefined, NFshopInfo /= undefined ->
			      'erlang_++'(PFshopInfo, NFshopInfo, TrUserData);
			  PFshopInfo == undefined -> NFshopInfo;
			  NFshopInfo == undefined -> PFshopInfo
		       end}.

-compile({nowarn_unused_function,merge_msg_SignInfoReq/3}).
merge_msg_SignInfoReq(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_SignInfoRes/3}).
merge_msg_SignInfoRes(#'SignInfoRes'{code = PFcode,
				     isSign = PFisSign,
				     totalSignCnt = PFtotalSignCnt},
		      #'SignInfoRes'{code = NFcode, isSign = NFisSign,
				     totalSignCnt = NFtotalSignCnt},
		      _) ->
    #'SignInfoRes'{code =
		       if NFcode =:= undefined -> PFcode;
			  true -> NFcode
		       end,
		   isSign =
		       if NFisSign =:= undefined -> PFisSign;
			  true -> NFisSign
		       end,
		   totalSignCnt =
		       if NFtotalSignCnt =:= undefined -> PFtotalSignCnt;
			  true -> NFtotalSignCnt
		       end}.

-compile({nowarn_unused_function,merge_msg_SignRewardReq/3}).
merge_msg_SignRewardReq(#'SignRewardReq'{type = PFtype},
			#'SignRewardReq'{type = NFtype}, _) ->
    #'SignRewardReq'{type =
			 if NFtype =:= undefined -> PFtype;
			    true -> NFtype
			 end}.

-compile({nowarn_unused_function,merge_msg_SignRewardRes/3}).
merge_msg_SignRewardRes(#'SignRewardRes'{code = PFcode},
			#'SignRewardRes'{code = NFcode}, _) ->
    #'SignRewardRes'{code =
			 if NFcode =:= undefined -> PFcode;
			    true -> NFcode
			 end}.

-compile({nowarn_unused_function,merge_msg_TurntableInfoReq/3}).
merge_msg_TurntableInfoReq(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_TurntableInfoRes/3}).
merge_msg_TurntableInfoRes(#'TurntableInfoRes'{code =
						   PFcode,
					       turntableCnt = PFturntableCnt},
			   #'TurntableInfoRes'{code = NFcode,
					       turntableCnt = NFturntableCnt},
			   _) ->
    #'TurntableInfoRes'{code =
			    if NFcode =:= undefined -> PFcode;
			       true -> NFcode
			    end,
			turntableCnt =
			    if NFturntableCnt =:= undefined -> PFturntableCnt;
			       true -> NFturntableCnt
			    end}.

-compile({nowarn_unused_function,merge_msg_PlayTurntableReq/3}).
merge_msg_PlayTurntableReq(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_PlayTurntableRes/3}).
merge_msg_PlayTurntableRes(#'PlayTurntableRes'{code =
						   PFcode,
					       pos = PFpos,
					       turntableCnt = PFturntableCnt},
			   #'PlayTurntableRes'{code = NFcode, pos = NFpos,
					       turntableCnt = NFturntableCnt},
			   _) ->
    #'PlayTurntableRes'{code =
			    if NFcode =:= undefined -> PFcode;
			       true -> NFcode
			    end,
			pos =
			    if NFpos =:= undefined -> PFpos;
			       true -> NFpos
			    end,
			turntableCnt =
			    if NFturntableCnt =:= undefined -> PFturntableCnt;
			       true -> NFturntableCnt
			    end}.

-compile({nowarn_unused_function,merge_msg_AdRewardReq/3}).
merge_msg_AdRewardReq(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_AdRewardRes/3}).
merge_msg_AdRewardRes(#'AdRewardRes'{code = PFcode},
		      #'AdRewardRes'{code = NFcode}, _) ->
    #'AdRewardRes'{code =
		       if NFcode =:= undefined -> PFcode;
			  true -> NFcode
		       end}.

-compile({nowarn_unused_function,merge_msg_InviteInfo/3}).
merge_msg_InviteInfo(#'InviteInfo'{tokenId = PFtokenId,
				   headUrl = PFheadUrl, sort = PFsort,
				   isReward = PFisReward},
		     #'InviteInfo'{tokenId = NFtokenId, headUrl = NFheadUrl,
				   sort = NFsort, isReward = NFisReward},
		     _) ->
    #'InviteInfo'{tokenId =
		      if NFtokenId =:= undefined -> PFtokenId;
			 true -> NFtokenId
		      end,
		  headUrl =
		      if NFheadUrl =:= undefined -> PFheadUrl;
			 true -> NFheadUrl
		      end,
		  sort =
		      if NFsort =:= undefined -> PFsort;
			 true -> NFsort
		      end,
		  isReward =
		      if NFisReward =:= undefined -> PFisReward;
			 true -> NFisReward
		      end}.

-compile({nowarn_unused_function,merge_msg_InviteInfoReq/3}).
merge_msg_InviteInfoReq(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_InviteInfoRes/3}).
merge_msg_InviteInfoRes(#'InviteInfoRes'{code = PFcode,
					 infos = PFinfos},
			#'InviteInfoRes'{code = NFcode, infos = NFinfos},
			TrUserData) ->
    #'InviteInfoRes'{code =
			 if NFcode =:= undefined -> PFcode;
			    true -> NFcode
			 end,
		     infos =
			 if PFinfos /= undefined, NFinfos /= undefined ->
				'erlang_++'(PFinfos, NFinfos, TrUserData);
			    PFinfos == undefined -> NFinfos;
			    NFinfos == undefined -> PFinfos
			 end}.

-compile({nowarn_unused_function,merge_msg_InviteRewardReq/3}).
merge_msg_InviteRewardReq(#'InviteRewardReq'{id = PFid},
			  #'InviteRewardReq'{id = NFid}, _) ->
    #'InviteRewardReq'{id =
			   if NFid =:= undefined -> PFid;
			      true -> NFid
			   end}.

-compile({nowarn_unused_function,merge_msg_InviteRewardRes/3}).
merge_msg_InviteRewardRes(#'InviteRewardRes'{code =
						 PFcode,
					     id = PFid},
			  #'InviteRewardRes'{code = NFcode, id = NFid}, _) ->
    #'InviteRewardRes'{code =
			   if NFcode =:= undefined -> PFcode;
			      true -> NFcode
			   end,
		       id =
			   if NFid =:= undefined -> PFid;
			      true -> NFid
			   end}.

-compile({nowarn_unused_function,merge_msg_OrderInfo/3}).
merge_msg_OrderInfo(#'OrderInfo'{orderId = PForderId,
				 mapId = PFmapId, orderState = PForderState,
				 orderTime = PForderTime},
		    #'OrderInfo'{orderId = NForderId, mapId = NFmapId,
				 orderState = NForderState,
				 orderTime = NForderTime},
		    _) ->
    #'OrderInfo'{orderId =
		     if NForderId =:= undefined -> PForderId;
			true -> NForderId
		     end,
		 mapId =
		     if NFmapId =:= undefined -> PFmapId;
			true -> NFmapId
		     end,
		 orderState =
		     if NForderState =:= undefined -> PForderState;
			true -> NForderState
		     end,
		 orderTime =
		     if NForderTime =:= undefined -> PForderTime;
			true -> NForderTime
		     end}.

-compile({nowarn_unused_function,merge_msg_OrderInfoReq/3}).
merge_msg_OrderInfoReq(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_OrderInfoRes/3}).
merge_msg_OrderInfoRes(#'OrderInfoRes'{code = PFcode,
				       orderInfo = PForderInfo},
		       #'OrderInfoRes'{code = NFcode, orderInfo = NForderInfo},
		       TrUserData) ->
    #'OrderInfoRes'{code =
			if NFcode =:= undefined -> PFcode;
			   true -> NFcode
			end,
		    orderInfo =
			if PForderInfo /= undefined, NForderInfo /= undefined ->
			       'erlang_++'(PForderInfo, NForderInfo,
					   TrUserData);
			   PForderInfo == undefined -> NForderInfo;
			   NForderInfo == undefined -> PForderInfo
			end}.

-compile({nowarn_unused_function,merge_msg_OrderAcceptReq/3}).
merge_msg_OrderAcceptReq(#'OrderAcceptReq'{orderId =
					       PForderId},
			 #'OrderAcceptReq'{orderId = NForderId}, _) ->
    #'OrderAcceptReq'{orderId =
			  if NForderId =:= undefined -> PForderId;
			     true -> NForderId
			  end}.

-compile({nowarn_unused_function,merge_msg_OrderDeliveryReq/3}).
merge_msg_OrderDeliveryReq(#'OrderDeliveryReq'{orderId =
						   PForderId},
			   #'OrderDeliveryReq'{orderId = NForderId}, _) ->
    #'OrderDeliveryReq'{orderId =
			    if NForderId =:= undefined -> PForderId;
			       true -> NForderId
			    end}.

-compile({nowarn_unused_function,merge_msg_OrderRewardReq/3}).
merge_msg_OrderRewardReq(#'OrderRewardReq'{orderId =
					       PForderId},
			 #'OrderRewardReq'{orderId = NForderId}, _) ->
    #'OrderRewardReq'{orderId =
			  if NForderId =:= undefined -> PForderId;
			     true -> NForderId
			  end}.

-compile({nowarn_unused_function,merge_msg_OrderCommonRes/3}).
merge_msg_OrderCommonRes(#'OrderCommonRes'{code =
					       PFcode},
			 #'OrderCommonRes'{code = NFcode}, _) ->
    #'OrderCommonRes'{code =
			  if NFcode =:= undefined -> PFcode;
			     true -> NFcode
			  end}.

-compile({nowarn_unused_function,merge_msg_WaiterInfo/3}).
merge_msg_WaiterInfo(#'WaiterInfo'{id = PFid,
				   type = PFtype, intimate = PFintimate,
				   skillLv = PFskillLv},
		     #'WaiterInfo'{id = NFid, type = NFtype,
				   intimate = NFintimate, skillLv = NFskillLv},
		     _) ->
    #'WaiterInfo'{id =
		      if NFid =:= undefined -> PFid;
			 true -> NFid
		      end,
		  type =
		      if NFtype =:= undefined -> PFtype;
			 true -> NFtype
		      end,
		  intimate =
		      if NFintimate =:= undefined -> PFintimate;
			 true -> NFintimate
		      end,
		  skillLv =
		      if NFskillLv =:= undefined -> PFskillLv;
			 true -> NFskillLv
		      end}.

-compile({nowarn_unused_function,merge_msg_WaiterInfoReq/3}).
merge_msg_WaiterInfoReq(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_WaiterInfoRes/3}).
merge_msg_WaiterInfoRes(#'WaiterInfoRes'{code = PFcode,
					 waiterInfo = PFwaiterInfo},
			#'WaiterInfoRes'{code = NFcode,
					 waiterInfo = NFwaiterInfo},
			TrUserData) ->
    #'WaiterInfoRes'{code =
			 if NFcode =:= undefined -> PFcode;
			    true -> NFcode
			 end,
		     waiterInfo =
			 if PFwaiterInfo /= undefined,
			    NFwaiterInfo /= undefined ->
				'erlang_++'(PFwaiterInfo, NFwaiterInfo,
					    TrUserData);
			    PFwaiterInfo == undefined -> NFwaiterInfo;
			    NFwaiterInfo == undefined -> PFwaiterInfo
			 end}.

-compile({nowarn_unused_function,merge_msg_WaiterUnlockReq/3}).
merge_msg_WaiterUnlockReq(#'WaiterUnlockReq'{type =
						 PFtype},
			  #'WaiterUnlockReq'{type = NFtype}, _) ->
    #'WaiterUnlockReq'{type =
			   if NFtype =:= undefined -> PFtype;
			      true -> NFtype
			   end}.

-compile({nowarn_unused_function,merge_msg_WaiterUnlockRes/3}).
merge_msg_WaiterUnlockRes(#'WaiterUnlockRes'{code =
						 PFcode},
			  #'WaiterUnlockRes'{code = NFcode}, _) ->
    #'WaiterUnlockRes'{code =
			   if NFcode =:= undefined -> PFcode;
			      true -> NFcode
			   end}.

-compile({nowarn_unused_function,merge_msg_WaiterIntimateReq/3}).
merge_msg_WaiterIntimateReq(#'WaiterIntimateReq'{id =
						     PFid},
			    #'WaiterIntimateReq'{id = NFid}, _) ->
    #'WaiterIntimateReq'{id =
			     if NFid =:= undefined -> PFid;
				true -> NFid
			     end}.

-compile({nowarn_unused_function,merge_msg_WaiterIntimateRes/3}).
merge_msg_WaiterIntimateRes(#'WaiterIntimateRes'{code =
						     PFcode,
						 waiterInfo = PFwaiterInfo},
			    #'WaiterIntimateRes'{code = NFcode,
						 waiterInfo = NFwaiterInfo},
			    TrUserData) ->
    #'WaiterIntimateRes'{code =
			     if NFcode =:= undefined -> PFcode;
				true -> NFcode
			     end,
			 waiterInfo =
			     if PFwaiterInfo /= undefined,
				NFwaiterInfo /= undefined ->
				    merge_msg_WaiterInfo(PFwaiterInfo,
							 NFwaiterInfo,
							 TrUserData);
				PFwaiterInfo == undefined -> NFwaiterInfo;
				NFwaiterInfo == undefined -> PFwaiterInfo
			     end}.

-compile({nowarn_unused_function,merge_msg_SpeedUpReq/3}).
merge_msg_SpeedUpReq(#'SpeedUpReq'{type = PFtype},
		     #'SpeedUpReq'{type = NFtype}, _) ->
    #'SpeedUpReq'{type =
		      if NFtype =:= undefined -> PFtype;
			 true -> NFtype
		      end}.

-compile({nowarn_unused_function,merge_msg_SpeedUpRes/3}).
merge_msg_SpeedUpRes(#'SpeedUpRes'{code = PFcode,
				   coin = PFcoin},
		     #'SpeedUpRes'{code = NFcode, coin = NFcoin}, _) ->
    #'SpeedUpRes'{code =
		      if NFcode =:= undefined -> PFcode;
			 true -> NFcode
		      end,
		  coin =
		      if NFcoin =:= undefined -> PFcoin;
			 true -> NFcoin
		      end}.

-compile({nowarn_unused_function,merge_msg_WechatLoginReq/3}).
merge_msg_WechatLoginReq(#'WechatLoginReq'{wxCode =
					       PFwxCode},
			 #'WechatLoginReq'{wxCode = NFwxCode}, _) ->
    #'WechatLoginReq'{wxCode =
			  if NFwxCode =:= undefined -> PFwxCode;
			     true -> NFwxCode
			  end}.

-compile({nowarn_unused_function,merge_msg_WechatLoginRes/3}).
merge_msg_WechatLoginRes(#'WechatLoginRes'{code =
					       PFcode,
					   openId = PFopenId},
			 #'WechatLoginRes'{code = NFcode, openId = NFopenId},
			 _) ->
    #'WechatLoginRes'{code =
			  if NFcode =:= undefined -> PFcode;
			     true -> NFcode
			  end,
		      openId =
			  if NFopenId =:= undefined -> PFopenId;
			     true -> NFopenId
			  end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'HeartReq' ->
	  v_msg_HeartReq(Msg, [MsgName], TrUserData);
      'HeartRes' ->
	  v_msg_HeartRes(Msg, [MsgName], TrUserData);
      'LoginReq' ->
	  v_msg_LoginReq(Msg, [MsgName], TrUserData);
      'LoginRes' ->
	  v_msg_LoginRes(Msg, [MsgName], TrUserData);
      'RoleInfo' ->
	  v_msg_RoleInfo(Msg, [MsgName], TrUserData);
      'RoleInfoReq' ->
	  v_msg_RoleInfoReq(Msg, [MsgName], TrUserData);
      'RoleInfoRes' ->
	  v_msg_RoleInfoRes(Msg, [MsgName], TrUserData);
      'RoleAssetChangeNotify' ->
	  v_msg_RoleAssetChangeNotify(Msg, [MsgName], TrUserData);
      'BoxRewardReq' ->
	  v_msg_BoxRewardReq(Msg, [MsgName], TrUserData);
      'BoxRewardRes' ->
	  v_msg_BoxRewardRes(Msg, [MsgName], TrUserData);
      'OfflineRewardReq' ->
	  v_msg_OfflineRewardReq(Msg, [MsgName], TrUserData);
      'OfflineRewardRes' ->
	  v_msg_OfflineRewardRes(Msg, [MsgName], TrUserData);
      'OfflineInfoReq' ->
	  v_msg_OfflineInfoReq(Msg, [MsgName], TrUserData);
      'OfflineInfoRes' ->
	  v_msg_OfflineInfoRes(Msg, [MsgName], TrUserData);
      'PosInfo' -> v_msg_PosInfo(Msg, [MsgName], TrUserData);
      'ShopInfo' ->
	  v_msg_ShopInfo(Msg, [MsgName], TrUserData);
      'ProduceNewReq' ->
	  v_msg_ProduceNewReq(Msg, [MsgName], TrUserData);
      'ProduceNewRes' ->
	  v_msg_ProduceNewRes(Msg, [MsgName], TrUserData);
      'MergeExchangeReq' ->
	  v_msg_MergeExchangeReq(Msg, [MsgName], TrUserData);
      'MergeExchangeRes' ->
	  v_msg_MergeExchangeRes(Msg, [MsgName], TrUserData);
      'RecoveryObjectReq' ->
	  v_msg_RecoveryObjectReq(Msg, [MsgName], TrUserData);
      'RecoveryObjectRes' ->
	  v_msg_RecoveryObjectRes(Msg, [MsgName], TrUserData);
      'ObjectProduceAssetNotify' ->
	  v_msg_ObjectProduceAssetNotify(Msg, [MsgName],
					 TrUserData);
      'PosInfoReq' ->
	  v_msg_PosInfoReq(Msg, [MsgName], TrUserData);
      'PosInfoRes' ->
	  v_msg_PosInfoRes(Msg, [MsgName], TrUserData);
      'BuyObjectReq' ->
	  v_msg_BuyObjectReq(Msg, [MsgName], TrUserData);
      'BuyObjectRes' ->
	  v_msg_BuyObjectRes(Msg, [MsgName], TrUserData);
      'ShopInfoReq' ->
	  v_msg_ShopInfoReq(Msg, [MsgName], TrUserData);
      'ShopInfoRes' ->
	  v_msg_ShopInfoRes(Msg, [MsgName], TrUserData);
      'SignInfoReq' ->
	  v_msg_SignInfoReq(Msg, [MsgName], TrUserData);
      'SignInfoRes' ->
	  v_msg_SignInfoRes(Msg, [MsgName], TrUserData);
      'SignRewardReq' ->
	  v_msg_SignRewardReq(Msg, [MsgName], TrUserData);
      'SignRewardRes' ->
	  v_msg_SignRewardRes(Msg, [MsgName], TrUserData);
      'TurntableInfoReq' ->
	  v_msg_TurntableInfoReq(Msg, [MsgName], TrUserData);
      'TurntableInfoRes' ->
	  v_msg_TurntableInfoRes(Msg, [MsgName], TrUserData);
      'PlayTurntableReq' ->
	  v_msg_PlayTurntableReq(Msg, [MsgName], TrUserData);
      'PlayTurntableRes' ->
	  v_msg_PlayTurntableRes(Msg, [MsgName], TrUserData);
      'AdRewardReq' ->
	  v_msg_AdRewardReq(Msg, [MsgName], TrUserData);
      'AdRewardRes' ->
	  v_msg_AdRewardRes(Msg, [MsgName], TrUserData);
      'InviteInfo' ->
	  v_msg_InviteInfo(Msg, [MsgName], TrUserData);
      'InviteInfoReq' ->
	  v_msg_InviteInfoReq(Msg, [MsgName], TrUserData);
      'InviteInfoRes' ->
	  v_msg_InviteInfoRes(Msg, [MsgName], TrUserData);
      'InviteRewardReq' ->
	  v_msg_InviteRewardReq(Msg, [MsgName], TrUserData);
      'InviteRewardRes' ->
	  v_msg_InviteRewardRes(Msg, [MsgName], TrUserData);
      'OrderInfo' ->
	  v_msg_OrderInfo(Msg, [MsgName], TrUserData);
      'OrderInfoReq' ->
	  v_msg_OrderInfoReq(Msg, [MsgName], TrUserData);
      'OrderInfoRes' ->
	  v_msg_OrderInfoRes(Msg, [MsgName], TrUserData);
      'OrderAcceptReq' ->
	  v_msg_OrderAcceptReq(Msg, [MsgName], TrUserData);
      'OrderDeliveryReq' ->
	  v_msg_OrderDeliveryReq(Msg, [MsgName], TrUserData);
      'OrderRewardReq' ->
	  v_msg_OrderRewardReq(Msg, [MsgName], TrUserData);
      'OrderCommonRes' ->
	  v_msg_OrderCommonRes(Msg, [MsgName], TrUserData);
      'WaiterInfo' ->
	  v_msg_WaiterInfo(Msg, [MsgName], TrUserData);
      'WaiterInfoReq' ->
	  v_msg_WaiterInfoReq(Msg, [MsgName], TrUserData);
      'WaiterInfoRes' ->
	  v_msg_WaiterInfoRes(Msg, [MsgName], TrUserData);
      'WaiterUnlockReq' ->
	  v_msg_WaiterUnlockReq(Msg, [MsgName], TrUserData);
      'WaiterUnlockRes' ->
	  v_msg_WaiterUnlockRes(Msg, [MsgName], TrUserData);
      'WaiterIntimateReq' ->
	  v_msg_WaiterIntimateReq(Msg, [MsgName], TrUserData);
      'WaiterIntimateRes' ->
	  v_msg_WaiterIntimateRes(Msg, [MsgName], TrUserData);
      'SpeedUpReq' ->
	  v_msg_SpeedUpReq(Msg, [MsgName], TrUserData);
      'SpeedUpRes' ->
	  v_msg_SpeedUpRes(Msg, [MsgName], TrUserData);
      'WechatLoginReq' ->
	  v_msg_WechatLoginReq(Msg, [MsgName], TrUserData);
      'WechatLoginRes' ->
	  v_msg_WechatLoginRes(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_HeartReq/3}).
-dialyzer({nowarn_function,v_msg_HeartReq/3}).
v_msg_HeartReq(#'HeartReq'{}, _Path, _) -> ok;
v_msg_HeartReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'HeartReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_HeartRes/3}).
-dialyzer({nowarn_function,v_msg_HeartRes/3}).
v_msg_HeartRes(#'HeartRes'{}, _Path, _) -> ok;
v_msg_HeartRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'HeartRes'}, X, Path).

-compile({nowarn_unused_function,v_msg_LoginReq/3}).
-dialyzer({nowarn_function,v_msg_LoginReq/3}).
v_msg_LoginReq(#'LoginReq'{tokenId = F1, name = F2,
			   headUrl = F3, gender = F4, inviteTokenId = F5},
	       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [tokenId | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [name | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [headUrl | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [gender | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_string(F5, [inviteTokenId | Path], TrUserData)
    end,
    ok;
v_msg_LoginReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LoginReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_LoginRes/3}).
-dialyzer({nowarn_function,v_msg_LoginRes/3}).
v_msg_LoginRes(#'LoginRes'{code = F1, tokenId = F2},
	       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [tokenId | Path], TrUserData)
    end,
    ok;
v_msg_LoginRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LoginRes'}, X, Path).

-compile({nowarn_unused_function,v_msg_RoleInfo/3}).
-dialyzer({nowarn_function,v_msg_RoleInfo/3}).
v_msg_RoleInfo(#'RoleInfo'{tokenId = F1, headUrl = F2,
			   name = F3, lv = F4, diamond = F5, coin = F6,
			   reputation = F7, gender = F8, loginDay = F9,
			   lastLogoutTime = F10},
	       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [tokenId | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [headUrl | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [name | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [lv | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [diamond | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint64(F6, [coin | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
	   v_type_uint32(F7, [reputation | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [gender | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_uint32(F9, [loginDay | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true ->
	   v_type_uint32(F10, [lastLogoutTime | Path], TrUserData)
    end,
    ok;
v_msg_RoleInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RoleInfo'}, X, Path).

-compile({nowarn_unused_function,v_msg_RoleInfoReq/3}).
-dialyzer({nowarn_function,v_msg_RoleInfoReq/3}).
v_msg_RoleInfoReq(#'RoleInfoReq'{}, _Path, _) -> ok;
v_msg_RoleInfoReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RoleInfoReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_RoleInfoRes/3}).
-dialyzer({nowarn_function,v_msg_RoleInfoRes/3}).
v_msg_RoleInfoRes(#'RoleInfoRes'{code = F1,
				 roleInfo = F2},
		  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_RoleInfo(F2, [roleInfo | Path], TrUserData)
    end,
    ok;
v_msg_RoleInfoRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RoleInfoRes'}, X, Path).

-compile({nowarn_unused_function,v_msg_RoleAssetChangeNotify/3}).
-dialyzer({nowarn_function,v_msg_RoleAssetChangeNotify/3}).
v_msg_RoleAssetChangeNotify(#'RoleAssetChangeNotify'{diamond
							 = F1,
						     coin = F2,
						     reputation = F3},
			    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [diamond | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [coin | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_uint32(F3, [reputation | Path], TrUserData)
    end,
    ok;
v_msg_RoleAssetChangeNotify(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RoleAssetChangeNotify'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_BoxRewardReq/3}).
-dialyzer({nowarn_function,v_msg_BoxRewardReq/3}).
v_msg_BoxRewardReq(#'BoxRewardReq'{}, _Path, _) -> ok;
v_msg_BoxRewardReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'BoxRewardReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_BoxRewardRes/3}).
-dialyzer({nowarn_function,v_msg_BoxRewardRes/3}).
v_msg_BoxRewardRes(#'BoxRewardRes'{code = F1}, Path,
		   TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    ok;
v_msg_BoxRewardRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'BoxRewardRes'}, X, Path).

-compile({nowarn_unused_function,v_msg_OfflineRewardReq/3}).
-dialyzer({nowarn_function,v_msg_OfflineRewardReq/3}).
v_msg_OfflineRewardReq(#'OfflineRewardReq'{type = F1},
		       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [type | Path], TrUserData)
    end,
    ok;
v_msg_OfflineRewardReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OfflineRewardReq'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_OfflineRewardRes/3}).
-dialyzer({nowarn_function,v_msg_OfflineRewardRes/3}).
v_msg_OfflineRewardRes(#'OfflineRewardRes'{code = F1},
		       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    ok;
v_msg_OfflineRewardRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OfflineRewardRes'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_OfflineInfoReq/3}).
-dialyzer({nowarn_function,v_msg_OfflineInfoReq/3}).
v_msg_OfflineInfoReq(#'OfflineInfoReq'{}, _Path, _) ->
    ok;
v_msg_OfflineInfoReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OfflineInfoReq'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_OfflineInfoRes/3}).
-dialyzer({nowarn_function,v_msg_OfflineInfoRes/3}).
v_msg_OfflineInfoRes(#'OfflineInfoRes'{code = F1,
				       coin = F2},
		     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [coin | Path], TrUserData)
    end,
    ok;
v_msg_OfflineInfoRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OfflineInfoRes'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_PosInfo/3}).
-dialyzer({nowarn_function,v_msg_PosInfo/3}).
v_msg_PosInfo(#'PosInfo'{pos = F1, type = F2}, Path,
	      TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [pos | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [type | Path], TrUserData)
    end,
    ok;
v_msg_PosInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PosInfo'}, X, Path).

-compile({nowarn_unused_function,v_msg_ShopInfo/3}).
-dialyzer({nowarn_function,v_msg_ShopInfo/3}).
v_msg_ShopInfo(#'ShopInfo'{id = F1, type = F2,
			   price = F3},
	       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [type | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [price | Path], TrUserData)
    end,
    ok;
v_msg_ShopInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ShopInfo'}, X, Path).

-compile({nowarn_unused_function,v_msg_ProduceNewReq/3}).
-dialyzer({nowarn_function,v_msg_ProduceNewReq/3}).
v_msg_ProduceNewReq(#'ProduceNewReq'{}, _Path, _) -> ok;
v_msg_ProduceNewReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ProduceNewReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_ProduceNewRes/3}).
-dialyzer({nowarn_function,v_msg_ProduceNewRes/3}).
v_msg_ProduceNewRes(#'ProduceNewRes'{code = F1,
				     posInfo = F2, nextType = F3,
				     nextPrice = F4},
		    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_PosInfo(F2, [posInfo | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [nextType | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_uint32(F4, [nextPrice | Path], TrUserData)
    end,
    ok;
v_msg_ProduceNewRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ProduceNewRes'}, X, Path).

-compile({nowarn_unused_function,v_msg_MergeExchangeReq/3}).
-dialyzer({nowarn_function,v_msg_MergeExchangeReq/3}).
v_msg_MergeExchangeReq(#'MergeExchangeReq'{posOne = F1,
					   posTwo = F2},
		       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [posOne | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [posTwo | Path], TrUserData)
    end,
    ok;
v_msg_MergeExchangeReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MergeExchangeReq'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_MergeExchangeRes/3}).
-dialyzer({nowarn_function,v_msg_MergeExchangeRes/3}).
v_msg_MergeExchangeRes(#'MergeExchangeRes'{code = F1,
					   posInfo = F2, nextType = F3,
					   nextPrice = F4},
		       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = [v_msg_PosInfo(Elem, [posInfo | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'PosInfo'}}, F2,
			 [posInfo | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [nextType | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_uint32(F4, [nextPrice | Path], TrUserData)
    end,
    ok;
v_msg_MergeExchangeRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MergeExchangeRes'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_RecoveryObjectReq/3}).
-dialyzer({nowarn_function,v_msg_RecoveryObjectReq/3}).
v_msg_RecoveryObjectReq(#'RecoveryObjectReq'{pos = F1},
			Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [pos | Path], TrUserData)
    end,
    ok;
v_msg_RecoveryObjectReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RecoveryObjectReq'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_RecoveryObjectRes/3}).
-dialyzer({nowarn_function,v_msg_RecoveryObjectRes/3}).
v_msg_RecoveryObjectRes(#'RecoveryObjectRes'{code = F1,
					     posInfo = F2},
			Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = [v_msg_PosInfo(Elem, [posInfo | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'PosInfo'}}, F2,
			 [posInfo | Path])
    end,
    ok;
v_msg_RecoveryObjectRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RecoveryObjectRes'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_ObjectProduceAssetNotify/3}).
-dialyzer({nowarn_function,v_msg_ObjectProduceAssetNotify/3}).
v_msg_ObjectProduceAssetNotify(#'ObjectProduceAssetNotify'{pos
							       = F1,
							   asset = F2},
			       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [pos | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [asset | Path], TrUserData)
    end,
    ok;
v_msg_ObjectProduceAssetNotify(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ObjectProduceAssetNotify'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_PosInfoReq/3}).
-dialyzer({nowarn_function,v_msg_PosInfoReq/3}).
v_msg_PosInfoReq(#'PosInfoReq'{}, _Path, _) -> ok;
v_msg_PosInfoReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PosInfoReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_PosInfoRes/3}).
-dialyzer({nowarn_function,v_msg_PosInfoRes/3}).
v_msg_PosInfoRes(#'PosInfoRes'{code = F1, posInfo = F2,
			       nextType = F3, nextPrice = F4},
		 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = [v_msg_PosInfo(Elem, [posInfo | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'PosInfo'}}, F2,
			 [posInfo | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [nextType | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_uint32(F4, [nextPrice | Path], TrUserData)
    end,
    ok;
v_msg_PosInfoRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PosInfoRes'}, X, Path).

-compile({nowarn_unused_function,v_msg_BuyObjectReq/3}).
-dialyzer({nowarn_function,v_msg_BuyObjectReq/3}).
v_msg_BuyObjectReq(#'BuyObjectReq'{type = F1}, Path,
		   TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [type | Path], TrUserData)
    end,
    ok;
v_msg_BuyObjectReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'BuyObjectReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_BuyObjectRes/3}).
-dialyzer({nowarn_function,v_msg_BuyObjectRes/3}).
v_msg_BuyObjectRes(#'BuyObjectRes'{code = F1,
				   posInfo = F2},
		   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_PosInfo(F2, [posInfo | Path], TrUserData)
    end,
    ok;
v_msg_BuyObjectRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'BuyObjectRes'}, X, Path).

-compile({nowarn_unused_function,v_msg_ShopInfoReq/3}).
-dialyzer({nowarn_function,v_msg_ShopInfoReq/3}).
v_msg_ShopInfoReq(#'ShopInfoReq'{}, _Path, _) -> ok;
v_msg_ShopInfoReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ShopInfoReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_ShopInfoRes/3}).
-dialyzer({nowarn_function,v_msg_ShopInfoRes/3}).
v_msg_ShopInfoRes(#'ShopInfoRes'{code = F1,
				 shopInfo = F2},
		  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = [v_msg_ShopInfo(Elem, [shopInfo | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'ShopInfo'}}, F2,
			 [shopInfo | Path])
    end,
    ok;
v_msg_ShopInfoRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ShopInfoRes'}, X, Path).

-compile({nowarn_unused_function,v_msg_SignInfoReq/3}).
-dialyzer({nowarn_function,v_msg_SignInfoReq/3}).
v_msg_SignInfoReq(#'SignInfoReq'{}, _Path, _) -> ok;
v_msg_SignInfoReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SignInfoReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_SignInfoRes/3}).
-dialyzer({nowarn_function,v_msg_SignInfoRes/3}).
v_msg_SignInfoRes(#'SignInfoRes'{code = F1, isSign = F2,
				 totalSignCnt = F3},
		  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [isSign | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_uint32(F3, [totalSignCnt | Path], TrUserData)
    end,
    ok;
v_msg_SignInfoRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SignInfoRes'}, X, Path).

-compile({nowarn_unused_function,v_msg_SignRewardReq/3}).
-dialyzer({nowarn_function,v_msg_SignRewardReq/3}).
v_msg_SignRewardReq(#'SignRewardReq'{type = F1}, Path,
		    TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [type | Path], TrUserData)
    end,
    ok;
v_msg_SignRewardReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SignRewardReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_SignRewardRes/3}).
-dialyzer({nowarn_function,v_msg_SignRewardRes/3}).
v_msg_SignRewardRes(#'SignRewardRes'{code = F1}, Path,
		    TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    ok;
v_msg_SignRewardRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SignRewardRes'}, X, Path).

-compile({nowarn_unused_function,v_msg_TurntableInfoReq/3}).
-dialyzer({nowarn_function,v_msg_TurntableInfoReq/3}).
v_msg_TurntableInfoReq(#'TurntableInfoReq'{}, _Path,
		       _) ->
    ok;
v_msg_TurntableInfoReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TurntableInfoReq'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_TurntableInfoRes/3}).
-dialyzer({nowarn_function,v_msg_TurntableInfoRes/3}).
v_msg_TurntableInfoRes(#'TurntableInfoRes'{code = F1,
					   turntableCnt = F2},
		       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_uint32(F2, [turntableCnt | Path], TrUserData)
    end,
    ok;
v_msg_TurntableInfoRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TurntableInfoRes'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_PlayTurntableReq/3}).
-dialyzer({nowarn_function,v_msg_PlayTurntableReq/3}).
v_msg_PlayTurntableReq(#'PlayTurntableReq'{}, _Path,
		       _) ->
    ok;
v_msg_PlayTurntableReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PlayTurntableReq'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_PlayTurntableRes/3}).
-dialyzer({nowarn_function,v_msg_PlayTurntableRes/3}).
v_msg_PlayTurntableRes(#'PlayTurntableRes'{code = F1,
					   pos = F2, turntableCnt = F3},
		       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [pos | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_uint32(F3, [turntableCnt | Path], TrUserData)
    end,
    ok;
v_msg_PlayTurntableRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PlayTurntableRes'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AdRewardReq/3}).
-dialyzer({nowarn_function,v_msg_AdRewardReq/3}).
v_msg_AdRewardReq(#'AdRewardReq'{}, _Path, _) -> ok;
v_msg_AdRewardReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AdRewardReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_AdRewardRes/3}).
-dialyzer({nowarn_function,v_msg_AdRewardRes/3}).
v_msg_AdRewardRes(#'AdRewardRes'{code = F1}, Path,
		  TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    ok;
v_msg_AdRewardRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AdRewardRes'}, X, Path).

-compile({nowarn_unused_function,v_msg_InviteInfo/3}).
-dialyzer({nowarn_function,v_msg_InviteInfo/3}).
v_msg_InviteInfo(#'InviteInfo'{tokenId = F1,
			       headUrl = F2, sort = F3, isReward = F4},
		 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [tokenId | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [headUrl | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [sort | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [isReward | Path], TrUserData)
    end,
    ok;
v_msg_InviteInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'InviteInfo'}, X, Path).

-compile({nowarn_unused_function,v_msg_InviteInfoReq/3}).
-dialyzer({nowarn_function,v_msg_InviteInfoReq/3}).
v_msg_InviteInfoReq(#'InviteInfoReq'{}, _Path, _) -> ok;
v_msg_InviteInfoReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'InviteInfoReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_InviteInfoRes/3}).
-dialyzer({nowarn_function,v_msg_InviteInfoRes/3}).
v_msg_InviteInfoRes(#'InviteInfoRes'{code = F1,
				     infos = F2},
		    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = [v_msg_InviteInfo(Elem, [infos | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'InviteInfo'}},
			 F2, [infos | Path])
    end,
    ok;
v_msg_InviteInfoRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'InviteInfoRes'}, X, Path).

-compile({nowarn_unused_function,v_msg_InviteRewardReq/3}).
-dialyzer({nowarn_function,v_msg_InviteRewardReq/3}).
v_msg_InviteRewardReq(#'InviteRewardReq'{id = F1}, Path,
		      TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [id | Path], TrUserData)
    end,
    ok;
v_msg_InviteRewardReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'InviteRewardReq'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_InviteRewardRes/3}).
-dialyzer({nowarn_function,v_msg_InviteRewardRes/3}).
v_msg_InviteRewardRes(#'InviteRewardRes'{code = F1,
					 id = F2},
		      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [id | Path], TrUserData)
    end,
    ok;
v_msg_InviteRewardRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'InviteRewardRes'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_OrderInfo/3}).
-dialyzer({nowarn_function,v_msg_OrderInfo/3}).
v_msg_OrderInfo(#'OrderInfo'{orderId = F1, mapId = F2,
			     orderState = F3, orderTime = F4},
		Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [orderId | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [mapId | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_uint32(F3, [orderState | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_uint32(F4, [orderTime | Path], TrUserData)
    end,
    ok;
v_msg_OrderInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OrderInfo'}, X, Path).

-compile({nowarn_unused_function,v_msg_OrderInfoReq/3}).
-dialyzer({nowarn_function,v_msg_OrderInfoReq/3}).
v_msg_OrderInfoReq(#'OrderInfoReq'{}, _Path, _) -> ok;
v_msg_OrderInfoReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OrderInfoReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_OrderInfoRes/3}).
-dialyzer({nowarn_function,v_msg_OrderInfoRes/3}).
v_msg_OrderInfoRes(#'OrderInfoRes'{code = F1,
				   orderInfo = F2},
		   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = [v_msg_OrderInfo(Elem, [orderInfo | Path],
				TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'OrderInfo'}}, F2,
			 [orderInfo | Path])
    end,
    ok;
v_msg_OrderInfoRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OrderInfoRes'}, X, Path).

-compile({nowarn_unused_function,v_msg_OrderAcceptReq/3}).
-dialyzer({nowarn_function,v_msg_OrderAcceptReq/3}).
v_msg_OrderAcceptReq(#'OrderAcceptReq'{orderId = F1},
		     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [orderId | Path], TrUserData)
    end,
    ok;
v_msg_OrderAcceptReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OrderAcceptReq'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_OrderDeliveryReq/3}).
-dialyzer({nowarn_function,v_msg_OrderDeliveryReq/3}).
v_msg_OrderDeliveryReq(#'OrderDeliveryReq'{orderId =
					       F1},
		       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [orderId | Path], TrUserData)
    end,
    ok;
v_msg_OrderDeliveryReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OrderDeliveryReq'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_OrderRewardReq/3}).
-dialyzer({nowarn_function,v_msg_OrderRewardReq/3}).
v_msg_OrderRewardReq(#'OrderRewardReq'{orderId = F1},
		     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [orderId | Path], TrUserData)
    end,
    ok;
v_msg_OrderRewardReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OrderRewardReq'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_OrderCommonRes/3}).
-dialyzer({nowarn_function,v_msg_OrderCommonRes/3}).
v_msg_OrderCommonRes(#'OrderCommonRes'{code = F1}, Path,
		     TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    ok;
v_msg_OrderCommonRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OrderCommonRes'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_WaiterInfo/3}).
-dialyzer({nowarn_function,v_msg_WaiterInfo/3}).
v_msg_WaiterInfo(#'WaiterInfo'{id = F1, type = F2,
			       intimate = F3, skillLv = F4},
		 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [type | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [intimate | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [skillLv | Path], TrUserData)
    end,
    ok;
v_msg_WaiterInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'WaiterInfo'}, X, Path).

-compile({nowarn_unused_function,v_msg_WaiterInfoReq/3}).
-dialyzer({nowarn_function,v_msg_WaiterInfoReq/3}).
v_msg_WaiterInfoReq(#'WaiterInfoReq'{}, _Path, _) -> ok;
v_msg_WaiterInfoReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'WaiterInfoReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_WaiterInfoRes/3}).
-dialyzer({nowarn_function,v_msg_WaiterInfoRes/3}).
v_msg_WaiterInfoRes(#'WaiterInfoRes'{code = F1,
				     waiterInfo = F2},
		    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = [v_msg_WaiterInfo(Elem, [waiterInfo | Path],
				 TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'WaiterInfo'}},
			 F2, [waiterInfo | Path])
    end,
    ok;
v_msg_WaiterInfoRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'WaiterInfoRes'}, X, Path).

-compile({nowarn_unused_function,v_msg_WaiterUnlockReq/3}).
-dialyzer({nowarn_function,v_msg_WaiterUnlockReq/3}).
v_msg_WaiterUnlockReq(#'WaiterUnlockReq'{type = F1},
		      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [type | Path], TrUserData)
    end,
    ok;
v_msg_WaiterUnlockReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'WaiterUnlockReq'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_WaiterUnlockRes/3}).
-dialyzer({nowarn_function,v_msg_WaiterUnlockRes/3}).
v_msg_WaiterUnlockRes(#'WaiterUnlockRes'{code = F1},
		      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    ok;
v_msg_WaiterUnlockRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'WaiterUnlockRes'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_WaiterIntimateReq/3}).
-dialyzer({nowarn_function,v_msg_WaiterIntimateReq/3}).
v_msg_WaiterIntimateReq(#'WaiterIntimateReq'{id = F1},
			Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [id | Path], TrUserData)
    end,
    ok;
v_msg_WaiterIntimateReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'WaiterIntimateReq'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_WaiterIntimateRes/3}).
-dialyzer({nowarn_function,v_msg_WaiterIntimateRes/3}).
v_msg_WaiterIntimateRes(#'WaiterIntimateRes'{code = F1,
					     waiterInfo = F2},
			Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_WaiterInfo(F2, [waiterInfo | Path], TrUserData)
    end,
    ok;
v_msg_WaiterIntimateRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'WaiterIntimateRes'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_SpeedUpReq/3}).
-dialyzer({nowarn_function,v_msg_SpeedUpReq/3}).
v_msg_SpeedUpReq(#'SpeedUpReq'{type = F1}, Path,
		 TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [type | Path], TrUserData)
    end,
    ok;
v_msg_SpeedUpReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SpeedUpReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_SpeedUpRes/3}).
-dialyzer({nowarn_function,v_msg_SpeedUpRes/3}).
v_msg_SpeedUpRes(#'SpeedUpRes'{code = F1, coin = F2},
		 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [coin | Path], TrUserData)
    end,
    ok;
v_msg_SpeedUpRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SpeedUpRes'}, X, Path).

-compile({nowarn_unused_function,v_msg_WechatLoginReq/3}).
-dialyzer({nowarn_function,v_msg_WechatLoginReq/3}).
v_msg_WechatLoginReq(#'WechatLoginReq'{wxCode = F1},
		     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [wxCode | Path], TrUserData)
    end,
    ok;
v_msg_WechatLoginReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'WechatLoginReq'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_WechatLoginRes/3}).
-dialyzer({nowarn_function,v_msg_WechatLoginRes/3}).
v_msg_WechatLoginRes(#'WechatLoginRes'{code = F1,
				       openId = F2},
		     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_ERROR_CODE(F1, [code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [openId | Path], TrUserData)
    end,
    ok;
v_msg_WechatLoginRes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'WechatLoginRes'}, X,
		  Path).

-compile({nowarn_unused_function,v_enum_ERROR_CODE/3}).
-dialyzer({nowarn_function,v_enum_ERROR_CODE/3}).
v_enum_ERROR_CODE('OK', _Path, _TrUserData) -> ok;
v_enum_ERROR_CODE('ERR_COMMON_SYS', _Path,
		  _TrUserData) ->
    ok;
v_enum_ERROR_CODE('ERR_COMMON_COST_LIMIT', _Path,
		  _TrUserData) ->
    ok;
v_enum_ERROR_CODE('ERR_COMMON_MAP_LIMIT', _Path,
		  _TrUserData) ->
    ok;
v_enum_ERROR_CODE('ERR_COMMON_BUY_LIMIT', _Path,
		  _TrUserData) ->
    ok;
v_enum_ERROR_CODE('ERR_COMMON_ALREADY_SIGN', _Path,
		  _TrUserData) ->
    ok;
v_enum_ERROR_CODE('ERR_COMMON_REWARD_LIMIT', _Path,
		  _TrUserData) ->
    ok;
v_enum_ERROR_CODE('ERR_COMMON_REWARD_ALREADY', _Path,
		  _TrUserData) ->
    ok;
v_enum_ERROR_CODE('ERR_COMMON_CNT_LIMIT', _Path,
		  _TrUserData) ->
    ok;
v_enum_ERROR_CODE('ERR_COMMON_FUNC_UNOPEND', _Path,
		  _TrUserData) ->
    ok;
v_enum_ERROR_CODE('ERR_COMMON_ORDER_OUTTIME', _Path,
		  _TrUserData) ->
    ok;
v_enum_ERROR_CODE('ERR_COMMON_ORDER_NOACCEPT', _Path,
		  _TrUserData) ->
    ok;
v_enum_ERROR_CODE('ERR_COMMON_INSUFFICIENT_MATERIAL',
		  _Path, _TrUserData) ->
    ok;
v_enum_ERROR_CODE('ERR_COMMON_ORDER_NOCOMMPLET', _Path,
		  _TrUserData) ->
    ok;
v_enum_ERROR_CODE('ERR_COMMON_WAITER_NOEXIST', _Path,
		  _TrUserData) ->
    ok;
v_enum_ERROR_CODE('ERR_COMMON_WAITER_UNLOCK', _Path,
		  _TrUserData) ->
    ok;
v_enum_ERROR_CODE('ERR_COMMON_ORDER_COMMPLET', _Path,
		  _TrUserData) ->
    ok;
v_enum_ERROR_CODE('ERR_COMMON_BUY_ERR', _Path,
		  _TrUserData) ->
    ok;
v_enum_ERROR_CODE('ERR_COMMON_ORDER_ACCEPT', _Path,
		  _TrUserData) ->
    ok;
v_enum_ERROR_CODE('ERR_COMMON_DIAMOND_LIMIT', _Path,
		  _TrUserData) ->
    ok;
v_enum_ERROR_CODE(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_ERROR_CODE(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'ERROR_CODE'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'MSG'},
      [{'NONE', 0}, {'HEART_REQ', 10001},
       {'HEART_RES', 10002}, {'LOGIN_REQ', 10003},
       {'LOGIN_RES', 10004}, {'ROLE_INFO_REQ', 11001},
       {'ROLE_INFO_RES', 11002},
       {'ROLE_ASSET_CHANGE_NOTIFY', 11003},
       {'BOX_REWARD_REQ', 11004}, {'BOX_REWARD_RES', 11005},
       {'OFFLINE_REWARD_REQ', 11006},
       {'OFFLINE_REWARD_RES', 11007},
       {'OFFLINE_INFO_REQ', 11008},
       {'OFFLINE_INFO_RES', 11009}, {'PRODUCE_NEW_REQ', 11101},
       {'PRODUCE_NEW_RES', 11102},
       {'MERGE_EXCHANGE_REQ', 11103},
       {'MERGE_EXCHANGE_RES', 11104},
       {'RECOVERY_OBJECT_REQ', 11105},
       {'RECOVERY_OBJECT_RES', 11106},
       {'OBJECT_PRODUCE_ASSET_NOTIFY', 11107},
       {'POS_INFO_REQ', 11108}, {'POS_INFO_RES', 11109},
       {'BUY_OBJECT_REQ', 11110}, {'BUY_OBJECT_RES', 11111},
       {'SHOP_INFO_REQ', 11112}, {'SHOP_INFO_RES', 11113},
       {'SIGN_INFO_REQ', 11201}, {'SIGN_INFO_RES', 11202},
       {'SIGN_REWARD_REQ', 11203}, {'SIGN_REWARD_RES', 11204},
       {'TURNTABLE_INFO_REQ', 11301},
       {'TURNTABLE_INFO_RES', 11302},
       {'PLAY_TURNTABLE_REQ', 11303},
       {'PLAY_TURNTABLE_RES', 11304}, {'AD_REWARD_REQ', 11305},
       {'AD_REWARD_RES', 11306}, {'INVITE_INFO_REQ', 11401},
       {'INVITE_INFO_RES', 11402},
       {'INVITE_REWARD_REQ', 11403},
       {'INVITE_REWARD_RES', 11404}, {'ORDER_INFO_REQ', 11501},
       {'ORDER_INFO_RES', 11502}, {'ORDER_ACCEPT_REQ', 11503},
       {'ORDER_DELIVERY_REQ', 11504},
       {'ORDER_REWQRD_REQ', 11505},
       {'OPDER_COMMON_RES', 11506}, {'WAITER_INFO_REQ', 11601},
       {'WAITER_INFO_RES', 11602},
       {'WAITER_UNLOCK_REQ', 11603},
       {'WAITER_UNLOCK_RES', 11604},
       {'WAITER_INTIMATE_REQ', 11605},
       {'WAITER_INTIMATE_RES', 11606}, {'SPEED_UP_REQ', 11703},
       {'SPEED_UP_RES', 11704}, {'WECHAT_LOGIN_REQ', 11801},
       {'WECHAT_LOGIN_RES', 11802}]},
     {{enum, 'ERROR_CODE'},
      [{'OK', 0}, {'ERR_COMMON_SYS', 10000},
       {'ERR_COMMON_COST_LIMIT', 10001},
       {'ERR_COMMON_MAP_LIMIT', 10002},
       {'ERR_COMMON_BUY_LIMIT', 10003},
       {'ERR_COMMON_ALREADY_SIGN', 10004},
       {'ERR_COMMON_REWARD_LIMIT', 10005},
       {'ERR_COMMON_REWARD_ALREADY', 10006},
       {'ERR_COMMON_CNT_LIMIT', 10007},
       {'ERR_COMMON_FUNC_UNOPEND', 10008},
       {'ERR_COMMON_ORDER_OUTTIME', 10009},
       {'ERR_COMMON_ORDER_NOACCEPT', 10010},
       {'ERR_COMMON_INSUFFICIENT_MATERIAL', 10011},
       {'ERR_COMMON_ORDER_NOCOMMPLET', 10012},
       {'ERR_COMMON_WAITER_NOEXIST', 10013},
       {'ERR_COMMON_WAITER_UNLOCK', 10014},
       {'ERR_COMMON_ORDER_COMMPLET', 10015},
       {'ERR_COMMON_BUY_ERR', 10016},
       {'ERR_COMMON_ORDER_ACCEPT', 10017},
       {'ERR_COMMON_DIAMOND_LIMIT', 10018}]},
     {{msg, 'HeartReq'}, []}, {{msg, 'HeartRes'}, []},
     {{msg, 'LoginReq'},
      [#field{name = tokenId, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = headUrl, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = gender, fnum = 4, rnum = 5, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = inviteTokenId, fnum = 5, rnum = 6,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'LoginRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []},
       #field{name = tokenId, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'RoleInfo'},
      [#field{name = tokenId, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = headUrl, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = name, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = lv, fnum = 4, rnum = 5, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = diamond, fnum = 5, rnum = 6,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = coin, fnum = 6, rnum = 7, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = reputation, fnum = 7, rnum = 8,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = gender, fnum = 8, rnum = 9, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = loginDay, fnum = 9, rnum = 10,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = lastLogoutTime, fnum = 10, rnum = 11,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'RoleInfoReq'}, []},
     {{msg, 'RoleInfoRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []},
       #field{name = roleInfo, fnum = 2, rnum = 3,
	      type = {msg, 'RoleInfo'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'RoleAssetChangeNotify'},
      [#field{name = diamond, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = coin, fnum = 2, rnum = 3, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = reputation, fnum = 3, rnum = 4,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'BoxRewardReq'}, []},
     {{msg, 'BoxRewardRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'OfflineRewardReq'},
      [#field{name = type, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, 'OfflineRewardRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'OfflineInfoReq'}, []},
     {{msg, 'OfflineInfoRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []},
       #field{name = coin, fnum = 2, rnum = 3, type = uint64,
	      occurrence = optional, opts = []}]},
     {{msg, 'PosInfo'},
      [#field{name = pos, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = type, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, 'ShopInfo'},
      [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = type, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = price, fnum = 3, rnum = 4, type = uint64,
	      occurrence = optional, opts = []}]},
     {{msg, 'ProduceNewReq'}, []},
     {{msg, 'ProduceNewRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []},
       #field{name = posInfo, fnum = 2, rnum = 3,
	      type = {msg, 'PosInfo'}, occurrence = optional,
	      opts = []},
       #field{name = nextType, fnum = 3, rnum = 4,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = nextPrice, fnum = 4, rnum = 5,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'MergeExchangeReq'},
      [#field{name = posOne, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = posTwo, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, 'MergeExchangeRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []},
       #field{name = posInfo, fnum = 2, rnum = 3,
	      type = {msg, 'PosInfo'}, occurrence = repeated,
	      opts = []},
       #field{name = nextType, fnum = 3, rnum = 4,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = nextPrice, fnum = 4, rnum = 5,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'RecoveryObjectReq'},
      [#field{name = pos, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, 'RecoveryObjectRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []},
       #field{name = posInfo, fnum = 2, rnum = 3,
	      type = {msg, 'PosInfo'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'ObjectProduceAssetNotify'},
      [#field{name = pos, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = asset, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, 'PosInfoReq'}, []},
     {{msg, 'PosInfoRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []},
       #field{name = posInfo, fnum = 2, rnum = 3,
	      type = {msg, 'PosInfo'}, occurrence = repeated,
	      opts = []},
       #field{name = nextType, fnum = 3, rnum = 4,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = nextPrice, fnum = 4, rnum = 5,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'BuyObjectReq'},
      [#field{name = type, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, 'BuyObjectRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []},
       #field{name = posInfo, fnum = 2, rnum = 3,
	      type = {msg, 'PosInfo'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'ShopInfoReq'}, []},
     {{msg, 'ShopInfoRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []},
       #field{name = shopInfo, fnum = 2, rnum = 3,
	      type = {msg, 'ShopInfo'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'SignInfoReq'}, []},
     {{msg, 'SignInfoRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []},
       #field{name = isSign, fnum = 2, rnum = 3, type = bool,
	      occurrence = optional, opts = []},
       #field{name = totalSignCnt, fnum = 3, rnum = 4,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'SignRewardReq'},
      [#field{name = type, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, 'SignRewardRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'TurntableInfoReq'}, []},
     {{msg, 'TurntableInfoRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []},
       #field{name = turntableCnt, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'PlayTurntableReq'}, []},
     {{msg, 'PlayTurntableRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []},
       #field{name = pos, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = turntableCnt, fnum = 3, rnum = 4,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'AdRewardReq'}, []},
     {{msg, 'AdRewardRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'InviteInfo'},
      [#field{name = tokenId, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = headUrl, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = sort, fnum = 3, rnum = 4, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = isReward, fnum = 4, rnum = 5, type = bool,
	      occurrence = optional, opts = []}]},
     {{msg, 'InviteInfoReq'}, []},
     {{msg, 'InviteInfoRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []},
       #field{name = infos, fnum = 2, rnum = 3,
	      type = {msg, 'InviteInfo'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'InviteRewardReq'},
      [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, 'InviteRewardRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []},
       #field{name = id, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, 'OrderInfo'},
      [#field{name = orderId, fnum = 1, rnum = 2,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = mapId, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = orderState, fnum = 3, rnum = 4,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = orderTime, fnum = 4, rnum = 5,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'OrderInfoReq'}, []},
     {{msg, 'OrderInfoRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []},
       #field{name = orderInfo, fnum = 2, rnum = 3,
	      type = {msg, 'OrderInfo'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'OrderAcceptReq'},
      [#field{name = orderId, fnum = 1, rnum = 2,
	      type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'OrderDeliveryReq'},
      [#field{name = orderId, fnum = 1, rnum = 2,
	      type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'OrderRewardReq'},
      [#field{name = orderId, fnum = 1, rnum = 2,
	      type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'OrderCommonRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'WaiterInfo'},
      [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = type, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = intimate, fnum = 3, rnum = 4,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = skillLv, fnum = 4, rnum = 5,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'WaiterInfoReq'}, []},
     {{msg, 'WaiterInfoRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []},
       #field{name = waiterInfo, fnum = 2, rnum = 3,
	      type = {msg, 'WaiterInfo'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'WaiterUnlockReq'},
      [#field{name = type, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, 'WaiterUnlockRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'WaiterIntimateReq'},
      [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, 'WaiterIntimateRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []},
       #field{name = waiterInfo, fnum = 2, rnum = 3,
	      type = {msg, 'WaiterInfo'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'SpeedUpReq'},
      [#field{name = type, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, 'SpeedUpRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []},
       #field{name = coin, fnum = 2, rnum = 3, type = uint64,
	      occurrence = optional, opts = []}]},
     {{msg, 'WechatLoginReq'},
      [#field{name = wxCode, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'WechatLoginRes'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'ERROR_CODE'}, occurrence = optional,
	      opts = []},
       #field{name = openId, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['HeartReq', 'HeartRes', 'LoginReq', 'LoginRes',
     'RoleInfo', 'RoleInfoReq', 'RoleInfoRes',
     'RoleAssetChangeNotify', 'BoxRewardReq', 'BoxRewardRes',
     'OfflineRewardReq', 'OfflineRewardRes',
     'OfflineInfoReq', 'OfflineInfoRes', 'PosInfo',
     'ShopInfo', 'ProduceNewReq', 'ProduceNewRes',
     'MergeExchangeReq', 'MergeExchangeRes',
     'RecoveryObjectReq', 'RecoveryObjectRes',
     'ObjectProduceAssetNotify', 'PosInfoReq', 'PosInfoRes',
     'BuyObjectReq', 'BuyObjectRes', 'ShopInfoReq',
     'ShopInfoRes', 'SignInfoReq', 'SignInfoRes',
     'SignRewardReq', 'SignRewardRes', 'TurntableInfoReq',
     'TurntableInfoRes', 'PlayTurntableReq',
     'PlayTurntableRes', 'AdRewardReq', 'AdRewardRes',
     'InviteInfo', 'InviteInfoReq', 'InviteInfoRes',
     'InviteRewardReq', 'InviteRewardRes', 'OrderInfo',
     'OrderInfoReq', 'OrderInfoRes', 'OrderAcceptReq',
     'OrderDeliveryReq', 'OrderRewardReq', 'OrderCommonRes',
     'WaiterInfo', 'WaiterInfoReq', 'WaiterInfoRes',
     'WaiterUnlockReq', 'WaiterUnlockRes',
     'WaiterIntimateReq', 'WaiterIntimateRes', 'SpeedUpReq',
     'SpeedUpRes', 'WechatLoginReq', 'WechatLoginRes'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['HeartReq', 'HeartRes', 'LoginReq', 'LoginRes',
     'RoleInfo', 'RoleInfoReq', 'RoleInfoRes',
     'RoleAssetChangeNotify', 'BoxRewardReq', 'BoxRewardRes',
     'OfflineRewardReq', 'OfflineRewardRes',
     'OfflineInfoReq', 'OfflineInfoRes', 'PosInfo',
     'ShopInfo', 'ProduceNewReq', 'ProduceNewRes',
     'MergeExchangeReq', 'MergeExchangeRes',
     'RecoveryObjectReq', 'RecoveryObjectRes',
     'ObjectProduceAssetNotify', 'PosInfoReq', 'PosInfoRes',
     'BuyObjectReq', 'BuyObjectRes', 'ShopInfoReq',
     'ShopInfoRes', 'SignInfoReq', 'SignInfoRes',
     'SignRewardReq', 'SignRewardRes', 'TurntableInfoReq',
     'TurntableInfoRes', 'PlayTurntableReq',
     'PlayTurntableRes', 'AdRewardReq', 'AdRewardRes',
     'InviteInfo', 'InviteInfoReq', 'InviteInfoRes',
     'InviteRewardReq', 'InviteRewardRes', 'OrderInfo',
     'OrderInfoReq', 'OrderInfoRes', 'OrderAcceptReq',
     'OrderDeliveryReq', 'OrderRewardReq', 'OrderCommonRes',
     'WaiterInfo', 'WaiterInfoReq', 'WaiterInfoRes',
     'WaiterUnlockReq', 'WaiterUnlockRes',
     'WaiterIntimateReq', 'WaiterIntimateRes', 'SpeedUpReq',
     'SpeedUpRes', 'WechatLoginReq', 'WechatLoginRes'].


get_enum_names() -> ['MSG', 'ERROR_CODE'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('HeartReq') -> [];
find_msg_def('HeartRes') -> [];
find_msg_def('LoginReq') ->
    [#field{name = tokenId, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = headUrl, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = gender, fnum = 4, rnum = 5, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = inviteTokenId, fnum = 5, rnum = 6,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('LoginRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []},
     #field{name = tokenId, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('RoleInfo') ->
    [#field{name = tokenId, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = headUrl, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = name, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = lv, fnum = 4, rnum = 5, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = diamond, fnum = 5, rnum = 6,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = coin, fnum = 6, rnum = 7, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = reputation, fnum = 7, rnum = 8,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = gender, fnum = 8, rnum = 9, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = loginDay, fnum = 9, rnum = 10,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = lastLogoutTime, fnum = 10, rnum = 11,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('RoleInfoReq') -> [];
find_msg_def('RoleInfoRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []},
     #field{name = roleInfo, fnum = 2, rnum = 3,
	    type = {msg, 'RoleInfo'}, occurrence = optional,
	    opts = []}];
find_msg_def('RoleAssetChangeNotify') ->
    [#field{name = diamond, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = coin, fnum = 2, rnum = 3, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = reputation, fnum = 3, rnum = 4,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('BoxRewardReq') -> [];
find_msg_def('BoxRewardRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []}];
find_msg_def('OfflineRewardReq') ->
    [#field{name = type, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def('OfflineRewardRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []}];
find_msg_def('OfflineInfoReq') -> [];
find_msg_def('OfflineInfoRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []},
     #field{name = coin, fnum = 2, rnum = 3, type = uint64,
	    occurrence = optional, opts = []}];
find_msg_def('PosInfo') ->
    [#field{name = pos, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = type, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def('ShopInfo') ->
    [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = type, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = price, fnum = 3, rnum = 4, type = uint64,
	    occurrence = optional, opts = []}];
find_msg_def('ProduceNewReq') -> [];
find_msg_def('ProduceNewRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []},
     #field{name = posInfo, fnum = 2, rnum = 3,
	    type = {msg, 'PosInfo'}, occurrence = optional,
	    opts = []},
     #field{name = nextType, fnum = 3, rnum = 4,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = nextPrice, fnum = 4, rnum = 5,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('MergeExchangeReq') ->
    [#field{name = posOne, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = posTwo, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def('MergeExchangeRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []},
     #field{name = posInfo, fnum = 2, rnum = 3,
	    type = {msg, 'PosInfo'}, occurrence = repeated,
	    opts = []},
     #field{name = nextType, fnum = 3, rnum = 4,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = nextPrice, fnum = 4, rnum = 5,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('RecoveryObjectReq') ->
    [#field{name = pos, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def('RecoveryObjectRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []},
     #field{name = posInfo, fnum = 2, rnum = 3,
	    type = {msg, 'PosInfo'}, occurrence = repeated,
	    opts = []}];
find_msg_def('ObjectProduceAssetNotify') ->
    [#field{name = pos, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = asset, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def('PosInfoReq') -> [];
find_msg_def('PosInfoRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []},
     #field{name = posInfo, fnum = 2, rnum = 3,
	    type = {msg, 'PosInfo'}, occurrence = repeated,
	    opts = []},
     #field{name = nextType, fnum = 3, rnum = 4,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = nextPrice, fnum = 4, rnum = 5,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('BuyObjectReq') ->
    [#field{name = type, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def('BuyObjectRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []},
     #field{name = posInfo, fnum = 2, rnum = 3,
	    type = {msg, 'PosInfo'}, occurrence = optional,
	    opts = []}];
find_msg_def('ShopInfoReq') -> [];
find_msg_def('ShopInfoRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []},
     #field{name = shopInfo, fnum = 2, rnum = 3,
	    type = {msg, 'ShopInfo'}, occurrence = repeated,
	    opts = []}];
find_msg_def('SignInfoReq') -> [];
find_msg_def('SignInfoRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []},
     #field{name = isSign, fnum = 2, rnum = 3, type = bool,
	    occurrence = optional, opts = []},
     #field{name = totalSignCnt, fnum = 3, rnum = 4,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('SignRewardReq') ->
    [#field{name = type, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def('SignRewardRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []}];
find_msg_def('TurntableInfoReq') -> [];
find_msg_def('TurntableInfoRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []},
     #field{name = turntableCnt, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('PlayTurntableReq') -> [];
find_msg_def('PlayTurntableRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []},
     #field{name = pos, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = turntableCnt, fnum = 3, rnum = 4,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('AdRewardReq') -> [];
find_msg_def('AdRewardRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []}];
find_msg_def('InviteInfo') ->
    [#field{name = tokenId, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = headUrl, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = sort, fnum = 3, rnum = 4, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = isReward, fnum = 4, rnum = 5, type = bool,
	    occurrence = optional, opts = []}];
find_msg_def('InviteInfoReq') -> [];
find_msg_def('InviteInfoRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []},
     #field{name = infos, fnum = 2, rnum = 3,
	    type = {msg, 'InviteInfo'}, occurrence = repeated,
	    opts = []}];
find_msg_def('InviteRewardReq') ->
    [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def('InviteRewardRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []},
     #field{name = id, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def('OrderInfo') ->
    [#field{name = orderId, fnum = 1, rnum = 2,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = mapId, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = orderState, fnum = 3, rnum = 4,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = orderTime, fnum = 4, rnum = 5,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('OrderInfoReq') -> [];
find_msg_def('OrderInfoRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []},
     #field{name = orderInfo, fnum = 2, rnum = 3,
	    type = {msg, 'OrderInfo'}, occurrence = repeated,
	    opts = []}];
find_msg_def('OrderAcceptReq') ->
    [#field{name = orderId, fnum = 1, rnum = 2,
	    type = uint64, occurrence = optional, opts = []}];
find_msg_def('OrderDeliveryReq') ->
    [#field{name = orderId, fnum = 1, rnum = 2,
	    type = uint64, occurrence = optional, opts = []}];
find_msg_def('OrderRewardReq') ->
    [#field{name = orderId, fnum = 1, rnum = 2,
	    type = uint64, occurrence = optional, opts = []}];
find_msg_def('OrderCommonRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []}];
find_msg_def('WaiterInfo') ->
    [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = type, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = intimate, fnum = 3, rnum = 4,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = skillLv, fnum = 4, rnum = 5,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('WaiterInfoReq') -> [];
find_msg_def('WaiterInfoRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []},
     #field{name = waiterInfo, fnum = 2, rnum = 3,
	    type = {msg, 'WaiterInfo'}, occurrence = repeated,
	    opts = []}];
find_msg_def('WaiterUnlockReq') ->
    [#field{name = type, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def('WaiterUnlockRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []}];
find_msg_def('WaiterIntimateReq') ->
    [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def('WaiterIntimateRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []},
     #field{name = waiterInfo, fnum = 2, rnum = 3,
	    type = {msg, 'WaiterInfo'}, occurrence = optional,
	    opts = []}];
find_msg_def('SpeedUpReq') ->
    [#field{name = type, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def('SpeedUpRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []},
     #field{name = coin, fnum = 2, rnum = 3, type = uint64,
	    occurrence = optional, opts = []}];
find_msg_def('WechatLoginReq') ->
    [#field{name = wxCode, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('WechatLoginRes') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'ERROR_CODE'}, occurrence = optional,
	    opts = []},
     #field{name = openId, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('MSG') ->
    [{'NONE', 0}, {'HEART_REQ', 10001},
     {'HEART_RES', 10002}, {'LOGIN_REQ', 10003},
     {'LOGIN_RES', 10004}, {'ROLE_INFO_REQ', 11001},
     {'ROLE_INFO_RES', 11002},
     {'ROLE_ASSET_CHANGE_NOTIFY', 11003},
     {'BOX_REWARD_REQ', 11004}, {'BOX_REWARD_RES', 11005},
     {'OFFLINE_REWARD_REQ', 11006},
     {'OFFLINE_REWARD_RES', 11007},
     {'OFFLINE_INFO_REQ', 11008},
     {'OFFLINE_INFO_RES', 11009}, {'PRODUCE_NEW_REQ', 11101},
     {'PRODUCE_NEW_RES', 11102},
     {'MERGE_EXCHANGE_REQ', 11103},
     {'MERGE_EXCHANGE_RES', 11104},
     {'RECOVERY_OBJECT_REQ', 11105},
     {'RECOVERY_OBJECT_RES', 11106},
     {'OBJECT_PRODUCE_ASSET_NOTIFY', 11107},
     {'POS_INFO_REQ', 11108}, {'POS_INFO_RES', 11109},
     {'BUY_OBJECT_REQ', 11110}, {'BUY_OBJECT_RES', 11111},
     {'SHOP_INFO_REQ', 11112}, {'SHOP_INFO_RES', 11113},
     {'SIGN_INFO_REQ', 11201}, {'SIGN_INFO_RES', 11202},
     {'SIGN_REWARD_REQ', 11203}, {'SIGN_REWARD_RES', 11204},
     {'TURNTABLE_INFO_REQ', 11301},
     {'TURNTABLE_INFO_RES', 11302},
     {'PLAY_TURNTABLE_REQ', 11303},
     {'PLAY_TURNTABLE_RES', 11304}, {'AD_REWARD_REQ', 11305},
     {'AD_REWARD_RES', 11306}, {'INVITE_INFO_REQ', 11401},
     {'INVITE_INFO_RES', 11402},
     {'INVITE_REWARD_REQ', 11403},
     {'INVITE_REWARD_RES', 11404}, {'ORDER_INFO_REQ', 11501},
     {'ORDER_INFO_RES', 11502}, {'ORDER_ACCEPT_REQ', 11503},
     {'ORDER_DELIVERY_REQ', 11504},
     {'ORDER_REWQRD_REQ', 11505},
     {'OPDER_COMMON_RES', 11506}, {'WAITER_INFO_REQ', 11601},
     {'WAITER_INFO_RES', 11602},
     {'WAITER_UNLOCK_REQ', 11603},
     {'WAITER_UNLOCK_RES', 11604},
     {'WAITER_INTIMATE_REQ', 11605},
     {'WAITER_INTIMATE_RES', 11606}, {'SPEED_UP_REQ', 11703},
     {'SPEED_UP_RES', 11704}, {'WECHAT_LOGIN_REQ', 11801},
     {'WECHAT_LOGIN_RES', 11802}];
find_enum_def('ERROR_CODE') ->
    [{'OK', 0}, {'ERR_COMMON_SYS', 10000},
     {'ERR_COMMON_COST_LIMIT', 10001},
     {'ERR_COMMON_MAP_LIMIT', 10002},
     {'ERR_COMMON_BUY_LIMIT', 10003},
     {'ERR_COMMON_ALREADY_SIGN', 10004},
     {'ERR_COMMON_REWARD_LIMIT', 10005},
     {'ERR_COMMON_REWARD_ALREADY', 10006},
     {'ERR_COMMON_CNT_LIMIT', 10007},
     {'ERR_COMMON_FUNC_UNOPEND', 10008},
     {'ERR_COMMON_ORDER_OUTTIME', 10009},
     {'ERR_COMMON_ORDER_NOACCEPT', 10010},
     {'ERR_COMMON_INSUFFICIENT_MATERIAL', 10011},
     {'ERR_COMMON_ORDER_NOCOMMPLET', 10012},
     {'ERR_COMMON_WAITER_NOEXIST', 10013},
     {'ERR_COMMON_WAITER_UNLOCK', 10014},
     {'ERR_COMMON_ORDER_COMMPLET', 10015},
     {'ERR_COMMON_BUY_ERR', 10016},
     {'ERR_COMMON_ORDER_ACCEPT', 10017},
     {'ERR_COMMON_DIAMOND_LIMIT', 10018}];
find_enum_def(_) -> error.


enum_symbol_by_value('MSG', Value) ->
    enum_symbol_by_value_MSG(Value);
enum_symbol_by_value('ERROR_CODE', Value) ->
    enum_symbol_by_value_ERROR_CODE(Value).


enum_value_by_symbol('MSG', Sym) ->
    enum_value_by_symbol_MSG(Sym);
enum_value_by_symbol('ERROR_CODE', Sym) ->
    enum_value_by_symbol_ERROR_CODE(Sym).


enum_symbol_by_value_MSG(0) -> 'NONE';
enum_symbol_by_value_MSG(10001) -> 'HEART_REQ';
enum_symbol_by_value_MSG(10002) -> 'HEART_RES';
enum_symbol_by_value_MSG(10003) -> 'LOGIN_REQ';
enum_symbol_by_value_MSG(10004) -> 'LOGIN_RES';
enum_symbol_by_value_MSG(11001) -> 'ROLE_INFO_REQ';
enum_symbol_by_value_MSG(11002) -> 'ROLE_INFO_RES';
enum_symbol_by_value_MSG(11003) ->
    'ROLE_ASSET_CHANGE_NOTIFY';
enum_symbol_by_value_MSG(11004) -> 'BOX_REWARD_REQ';
enum_symbol_by_value_MSG(11005) -> 'BOX_REWARD_RES';
enum_symbol_by_value_MSG(11006) -> 'OFFLINE_REWARD_REQ';
enum_symbol_by_value_MSG(11007) -> 'OFFLINE_REWARD_RES';
enum_symbol_by_value_MSG(11008) -> 'OFFLINE_INFO_REQ';
enum_symbol_by_value_MSG(11009) -> 'OFFLINE_INFO_RES';
enum_symbol_by_value_MSG(11101) -> 'PRODUCE_NEW_REQ';
enum_symbol_by_value_MSG(11102) -> 'PRODUCE_NEW_RES';
enum_symbol_by_value_MSG(11103) -> 'MERGE_EXCHANGE_REQ';
enum_symbol_by_value_MSG(11104) -> 'MERGE_EXCHANGE_RES';
enum_symbol_by_value_MSG(11105) ->
    'RECOVERY_OBJECT_REQ';
enum_symbol_by_value_MSG(11106) ->
    'RECOVERY_OBJECT_RES';
enum_symbol_by_value_MSG(11107) ->
    'OBJECT_PRODUCE_ASSET_NOTIFY';
enum_symbol_by_value_MSG(11108) -> 'POS_INFO_REQ';
enum_symbol_by_value_MSG(11109) -> 'POS_INFO_RES';
enum_symbol_by_value_MSG(11110) -> 'BUY_OBJECT_REQ';
enum_symbol_by_value_MSG(11111) -> 'BUY_OBJECT_RES';
enum_symbol_by_value_MSG(11112) -> 'SHOP_INFO_REQ';
enum_symbol_by_value_MSG(11113) -> 'SHOP_INFO_RES';
enum_symbol_by_value_MSG(11201) -> 'SIGN_INFO_REQ';
enum_symbol_by_value_MSG(11202) -> 'SIGN_INFO_RES';
enum_symbol_by_value_MSG(11203) -> 'SIGN_REWARD_REQ';
enum_symbol_by_value_MSG(11204) -> 'SIGN_REWARD_RES';
enum_symbol_by_value_MSG(11301) -> 'TURNTABLE_INFO_REQ';
enum_symbol_by_value_MSG(11302) -> 'TURNTABLE_INFO_RES';
enum_symbol_by_value_MSG(11303) -> 'PLAY_TURNTABLE_REQ';
enum_symbol_by_value_MSG(11304) -> 'PLAY_TURNTABLE_RES';
enum_symbol_by_value_MSG(11305) -> 'AD_REWARD_REQ';
enum_symbol_by_value_MSG(11306) -> 'AD_REWARD_RES';
enum_symbol_by_value_MSG(11401) -> 'INVITE_INFO_REQ';
enum_symbol_by_value_MSG(11402) -> 'INVITE_INFO_RES';
enum_symbol_by_value_MSG(11403) -> 'INVITE_REWARD_REQ';
enum_symbol_by_value_MSG(11404) -> 'INVITE_REWARD_RES';
enum_symbol_by_value_MSG(11501) -> 'ORDER_INFO_REQ';
enum_symbol_by_value_MSG(11502) -> 'ORDER_INFO_RES';
enum_symbol_by_value_MSG(11503) -> 'ORDER_ACCEPT_REQ';
enum_symbol_by_value_MSG(11504) -> 'ORDER_DELIVERY_REQ';
enum_symbol_by_value_MSG(11505) -> 'ORDER_REWQRD_REQ';
enum_symbol_by_value_MSG(11506) -> 'OPDER_COMMON_RES';
enum_symbol_by_value_MSG(11601) -> 'WAITER_INFO_REQ';
enum_symbol_by_value_MSG(11602) -> 'WAITER_INFO_RES';
enum_symbol_by_value_MSG(11603) -> 'WAITER_UNLOCK_REQ';
enum_symbol_by_value_MSG(11604) -> 'WAITER_UNLOCK_RES';
enum_symbol_by_value_MSG(11605) ->
    'WAITER_INTIMATE_REQ';
enum_symbol_by_value_MSG(11606) ->
    'WAITER_INTIMATE_RES';
enum_symbol_by_value_MSG(11703) -> 'SPEED_UP_REQ';
enum_symbol_by_value_MSG(11704) -> 'SPEED_UP_RES';
enum_symbol_by_value_MSG(11801) -> 'WECHAT_LOGIN_REQ';
enum_symbol_by_value_MSG(11802) -> 'WECHAT_LOGIN_RES'.


enum_value_by_symbol_MSG('NONE') -> 0;
enum_value_by_symbol_MSG('HEART_REQ') -> 10001;
enum_value_by_symbol_MSG('HEART_RES') -> 10002;
enum_value_by_symbol_MSG('LOGIN_REQ') -> 10003;
enum_value_by_symbol_MSG('LOGIN_RES') -> 10004;
enum_value_by_symbol_MSG('ROLE_INFO_REQ') -> 11001;
enum_value_by_symbol_MSG('ROLE_INFO_RES') -> 11002;
enum_value_by_symbol_MSG('ROLE_ASSET_CHANGE_NOTIFY') ->
    11003;
enum_value_by_symbol_MSG('BOX_REWARD_REQ') -> 11004;
enum_value_by_symbol_MSG('BOX_REWARD_RES') -> 11005;
enum_value_by_symbol_MSG('OFFLINE_REWARD_REQ') -> 11006;
enum_value_by_symbol_MSG('OFFLINE_REWARD_RES') -> 11007;
enum_value_by_symbol_MSG('OFFLINE_INFO_REQ') -> 11008;
enum_value_by_symbol_MSG('OFFLINE_INFO_RES') -> 11009;
enum_value_by_symbol_MSG('PRODUCE_NEW_REQ') -> 11101;
enum_value_by_symbol_MSG('PRODUCE_NEW_RES') -> 11102;
enum_value_by_symbol_MSG('MERGE_EXCHANGE_REQ') -> 11103;
enum_value_by_symbol_MSG('MERGE_EXCHANGE_RES') -> 11104;
enum_value_by_symbol_MSG('RECOVERY_OBJECT_REQ') ->
    11105;
enum_value_by_symbol_MSG('RECOVERY_OBJECT_RES') ->
    11106;
enum_value_by_symbol_MSG('OBJECT_PRODUCE_ASSET_NOTIFY') ->
    11107;
enum_value_by_symbol_MSG('POS_INFO_REQ') -> 11108;
enum_value_by_symbol_MSG('POS_INFO_RES') -> 11109;
enum_value_by_symbol_MSG('BUY_OBJECT_REQ') -> 11110;
enum_value_by_symbol_MSG('BUY_OBJECT_RES') -> 11111;
enum_value_by_symbol_MSG('SHOP_INFO_REQ') -> 11112;
enum_value_by_symbol_MSG('SHOP_INFO_RES') -> 11113;
enum_value_by_symbol_MSG('SIGN_INFO_REQ') -> 11201;
enum_value_by_symbol_MSG('SIGN_INFO_RES') -> 11202;
enum_value_by_symbol_MSG('SIGN_REWARD_REQ') -> 11203;
enum_value_by_symbol_MSG('SIGN_REWARD_RES') -> 11204;
enum_value_by_symbol_MSG('TURNTABLE_INFO_REQ') -> 11301;
enum_value_by_symbol_MSG('TURNTABLE_INFO_RES') -> 11302;
enum_value_by_symbol_MSG('PLAY_TURNTABLE_REQ') -> 11303;
enum_value_by_symbol_MSG('PLAY_TURNTABLE_RES') -> 11304;
enum_value_by_symbol_MSG('AD_REWARD_REQ') -> 11305;
enum_value_by_symbol_MSG('AD_REWARD_RES') -> 11306;
enum_value_by_symbol_MSG('INVITE_INFO_REQ') -> 11401;
enum_value_by_symbol_MSG('INVITE_INFO_RES') -> 11402;
enum_value_by_symbol_MSG('INVITE_REWARD_REQ') -> 11403;
enum_value_by_symbol_MSG('INVITE_REWARD_RES') -> 11404;
enum_value_by_symbol_MSG('ORDER_INFO_REQ') -> 11501;
enum_value_by_symbol_MSG('ORDER_INFO_RES') -> 11502;
enum_value_by_symbol_MSG('ORDER_ACCEPT_REQ') -> 11503;
enum_value_by_symbol_MSG('ORDER_DELIVERY_REQ') -> 11504;
enum_value_by_symbol_MSG('ORDER_REWQRD_REQ') -> 11505;
enum_value_by_symbol_MSG('OPDER_COMMON_RES') -> 11506;
enum_value_by_symbol_MSG('WAITER_INFO_REQ') -> 11601;
enum_value_by_symbol_MSG('WAITER_INFO_RES') -> 11602;
enum_value_by_symbol_MSG('WAITER_UNLOCK_REQ') -> 11603;
enum_value_by_symbol_MSG('WAITER_UNLOCK_RES') -> 11604;
enum_value_by_symbol_MSG('WAITER_INTIMATE_REQ') ->
    11605;
enum_value_by_symbol_MSG('WAITER_INTIMATE_RES') ->
    11606;
enum_value_by_symbol_MSG('SPEED_UP_REQ') -> 11703;
enum_value_by_symbol_MSG('SPEED_UP_RES') -> 11704;
enum_value_by_symbol_MSG('WECHAT_LOGIN_REQ') -> 11801;
enum_value_by_symbol_MSG('WECHAT_LOGIN_RES') -> 11802.

enum_symbol_by_value_ERROR_CODE(0) -> 'OK';
enum_symbol_by_value_ERROR_CODE(10000) ->
    'ERR_COMMON_SYS';
enum_symbol_by_value_ERROR_CODE(10001) ->
    'ERR_COMMON_COST_LIMIT';
enum_symbol_by_value_ERROR_CODE(10002) ->
    'ERR_COMMON_MAP_LIMIT';
enum_symbol_by_value_ERROR_CODE(10003) ->
    'ERR_COMMON_BUY_LIMIT';
enum_symbol_by_value_ERROR_CODE(10004) ->
    'ERR_COMMON_ALREADY_SIGN';
enum_symbol_by_value_ERROR_CODE(10005) ->
    'ERR_COMMON_REWARD_LIMIT';
enum_symbol_by_value_ERROR_CODE(10006) ->
    'ERR_COMMON_REWARD_ALREADY';
enum_symbol_by_value_ERROR_CODE(10007) ->
    'ERR_COMMON_CNT_LIMIT';
enum_symbol_by_value_ERROR_CODE(10008) ->
    'ERR_COMMON_FUNC_UNOPEND';
enum_symbol_by_value_ERROR_CODE(10009) ->
    'ERR_COMMON_ORDER_OUTTIME';
enum_symbol_by_value_ERROR_CODE(10010) ->
    'ERR_COMMON_ORDER_NOACCEPT';
enum_symbol_by_value_ERROR_CODE(10011) ->
    'ERR_COMMON_INSUFFICIENT_MATERIAL';
enum_symbol_by_value_ERROR_CODE(10012) ->
    'ERR_COMMON_ORDER_NOCOMMPLET';
enum_symbol_by_value_ERROR_CODE(10013) ->
    'ERR_COMMON_WAITER_NOEXIST';
enum_symbol_by_value_ERROR_CODE(10014) ->
    'ERR_COMMON_WAITER_UNLOCK';
enum_symbol_by_value_ERROR_CODE(10015) ->
    'ERR_COMMON_ORDER_COMMPLET';
enum_symbol_by_value_ERROR_CODE(10016) ->
    'ERR_COMMON_BUY_ERR';
enum_symbol_by_value_ERROR_CODE(10017) ->
    'ERR_COMMON_ORDER_ACCEPT';
enum_symbol_by_value_ERROR_CODE(10018) ->
    'ERR_COMMON_DIAMOND_LIMIT'.


enum_value_by_symbol_ERROR_CODE('OK') -> 0;
enum_value_by_symbol_ERROR_CODE('ERR_COMMON_SYS') ->
    10000;
enum_value_by_symbol_ERROR_CODE('ERR_COMMON_COST_LIMIT') ->
    10001;
enum_value_by_symbol_ERROR_CODE('ERR_COMMON_MAP_LIMIT') ->
    10002;
enum_value_by_symbol_ERROR_CODE('ERR_COMMON_BUY_LIMIT') ->
    10003;
enum_value_by_symbol_ERROR_CODE('ERR_COMMON_ALREADY_SIGN') ->
    10004;
enum_value_by_symbol_ERROR_CODE('ERR_COMMON_REWARD_LIMIT') ->
    10005;
enum_value_by_symbol_ERROR_CODE('ERR_COMMON_REWARD_ALREADY') ->
    10006;
enum_value_by_symbol_ERROR_CODE('ERR_COMMON_CNT_LIMIT') ->
    10007;
enum_value_by_symbol_ERROR_CODE('ERR_COMMON_FUNC_UNOPEND') ->
    10008;
enum_value_by_symbol_ERROR_CODE('ERR_COMMON_ORDER_OUTTIME') ->
    10009;
enum_value_by_symbol_ERROR_CODE('ERR_COMMON_ORDER_NOACCEPT') ->
    10010;
enum_value_by_symbol_ERROR_CODE('ERR_COMMON_INSUFFICIENT_MATERIAL') ->
    10011;
enum_value_by_symbol_ERROR_CODE('ERR_COMMON_ORDER_NOCOMMPLET') ->
    10012;
enum_value_by_symbol_ERROR_CODE('ERR_COMMON_WAITER_NOEXIST') ->
    10013;
enum_value_by_symbol_ERROR_CODE('ERR_COMMON_WAITER_UNLOCK') ->
    10014;
enum_value_by_symbol_ERROR_CODE('ERR_COMMON_ORDER_COMMPLET') ->
    10015;
enum_value_by_symbol_ERROR_CODE('ERR_COMMON_BUY_ERR') ->
    10016;
enum_value_by_symbol_ERROR_CODE('ERR_COMMON_ORDER_ACCEPT') ->
    10017;
enum_value_by_symbol_ERROR_CODE('ERR_COMMON_DIAMOND_LIMIT') ->
    10018.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> logic.



gpb_version_as_string() ->
    "4.4.0".

gpb_version_as_list() ->
    [4,4,0].
