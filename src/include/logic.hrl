%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.4.0

-ifndef(logic).
-define(logic, true).

-define(logic_gpb_version, "4.4.0").

-ifndef('HEARTREQ_PB_H').
-define('HEARTREQ_PB_H', true).
-record('HeartReq',
        {
        }).
-endif.

-ifndef('HEARTRES_PB_H').
-define('HEARTRES_PB_H', true).
-record('HeartRes',
        {
        }).
-endif.

-ifndef('LOGINREQ_PB_H').
-define('LOGINREQ_PB_H', true).
-record('LoginReq',
        {tokenId = []           :: iolist() | undefined, % = 1
         name = []              :: iolist() | undefined, % = 2
         headUrl = []           :: iolist() | undefined, % = 3
         gender = 0             :: non_neg_integer() | undefined, % = 4, 32 bits
         inviteTokenId = []     :: iolist() | undefined % = 5
        }).
-endif.

-ifndef('LOGINRES_PB_H').
-define('LOGINRES_PB_H', true).
-record('LoginRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined, % = 1, enum ERROR_CODE
         tokenId = []           :: iolist() | undefined % = 2
        }).
-endif.

-ifndef('ROLEINFO_PB_H').
-define('ROLEINFO_PB_H', true).
-record('RoleInfo',
        {tokenId = []           :: iolist() | undefined, % = 1
         headUrl = []           :: iolist() | undefined, % = 2
         name = []              :: iolist() | undefined, % = 3
         lv = 0                 :: non_neg_integer() | undefined, % = 4, 32 bits
         diamond = 0            :: non_neg_integer() | undefined, % = 5, 32 bits
         coin = 0               :: non_neg_integer() | undefined, % = 6, 32 bits
         reputation = 0         :: non_neg_integer() | undefined, % = 7, 32 bits
         gender = 0             :: non_neg_integer() | undefined, % = 8, 32 bits
         loginDay = 0           :: non_neg_integer() | undefined, % = 9, 32 bits
         lastLogoutTime = 0     :: non_neg_integer() | undefined % = 10, 32 bits
        }).
-endif.

-ifndef('ROLEINFOREQ_PB_H').
-define('ROLEINFOREQ_PB_H', true).
-record('RoleInfoReq',
        {
        }).
-endif.

-ifndef('ROLEINFORES_PB_H').
-define('ROLEINFORES_PB_H', true).
-record('RoleInfoRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined, % = 1, enum ERROR_CODE
         roleInfo = undefined   :: logic:'RoleInfo'() | undefined % = 2
        }).
-endif.

-ifndef('ROLEASSETCHANGENOTIFY_PB_H').
-define('ROLEASSETCHANGENOTIFY_PB_H', true).
-record('RoleAssetChangeNotify',
        {diamond = 0            :: non_neg_integer() | undefined, % = 1, 32 bits
         coin = 0               :: non_neg_integer() | undefined, % = 2, 32 bits
         reputation = 0         :: non_neg_integer() | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('BOXREWARDREQ_PB_H').
-define('BOXREWARDREQ_PB_H', true).
-record('BoxRewardReq',
        {
        }).
-endif.

-ifndef('BOXREWARDRES_PB_H').
-define('BOXREWARDRES_PB_H', true).
-record('BoxRewardRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined % = 1, enum ERROR_CODE
        }).
-endif.

-ifndef('OFFLINEREWARDREQ_PB_H').
-define('OFFLINEREWARDREQ_PB_H', true).
-record('OfflineRewardReq',
        {type = 0               :: non_neg_integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('OFFLINEREWARDRES_PB_H').
-define('OFFLINEREWARDRES_PB_H', true).
-record('OfflineRewardRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined % = 1, enum ERROR_CODE
        }).
-endif.

-ifndef('OFFLINEINFOREQ_PB_H').
-define('OFFLINEINFOREQ_PB_H', true).
-record('OfflineInfoReq',
        {
        }).
-endif.

-ifndef('OFFLINEINFORES_PB_H').
-define('OFFLINEINFORES_PB_H', true).
-record('OfflineInfoRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined, % = 1, enum ERROR_CODE
         coin = 0               :: non_neg_integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('POSINFO_PB_H').
-define('POSINFO_PB_H', true).
-record('PosInfo',
        {pos = 0                :: non_neg_integer() | undefined, % = 1, 32 bits
         type = 0               :: non_neg_integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('SHOPINFO_PB_H').
-define('SHOPINFO_PB_H', true).
-record('ShopInfo',
        {id = 0                 :: non_neg_integer() | undefined, % = 1, 32 bits
         type = 0               :: non_neg_integer() | undefined, % = 2, 32 bits
         price = 0              :: non_neg_integer() | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('PRODUCENEWREQ_PB_H').
-define('PRODUCENEWREQ_PB_H', true).
-record('ProduceNewReq',
        {
        }).
-endif.

-ifndef('PRODUCENEWRES_PB_H').
-define('PRODUCENEWRES_PB_H', true).
-record('ProduceNewRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined, % = 1, enum ERROR_CODE
         posInfo = undefined    :: logic:'PosInfo'() | undefined, % = 2
         nextType = 0           :: non_neg_integer() | undefined, % = 3, 32 bits
         nextPrice = 0          :: non_neg_integer() | undefined % = 4, 32 bits
        }).
-endif.

-ifndef('MERGEEXCHANGEREQ_PB_H').
-define('MERGEEXCHANGEREQ_PB_H', true).
-record('MergeExchangeReq',
        {posOne = 0             :: non_neg_integer() | undefined, % = 1, 32 bits
         posTwo = 0             :: non_neg_integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('MERGEEXCHANGERES_PB_H').
-define('MERGEEXCHANGERES_PB_H', true).
-record('MergeExchangeRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined, % = 1, enum ERROR_CODE
         posInfo = []           :: [logic:'PosInfo'()] | undefined, % = 2
         nextType = 0           :: non_neg_integer() | undefined, % = 3, 32 bits
         nextPrice = 0          :: non_neg_integer() | undefined % = 4, 32 bits
        }).
-endif.

-ifndef('RECOVERYOBJECTREQ_PB_H').
-define('RECOVERYOBJECTREQ_PB_H', true).
-record('RecoveryObjectReq',
        {pos = 0                :: non_neg_integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('RECOVERYOBJECTRES_PB_H').
-define('RECOVERYOBJECTRES_PB_H', true).
-record('RecoveryObjectRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined, % = 1, enum ERROR_CODE
         posInfo = []           :: [logic:'PosInfo'()] | undefined % = 2
        }).
-endif.

-ifndef('OBJECTPRODUCEASSETNOTIFY_PB_H').
-define('OBJECTPRODUCEASSETNOTIFY_PB_H', true).
-record('ObjectProduceAssetNotify',
        {pos = 0                :: non_neg_integer() | undefined, % = 1, 32 bits
         asset = 0              :: non_neg_integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('POSINFOREQ_PB_H').
-define('POSINFOREQ_PB_H', true).
-record('PosInfoReq',
        {
        }).
-endif.

-ifndef('POSINFORES_PB_H').
-define('POSINFORES_PB_H', true).
-record('PosInfoRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined, % = 1, enum ERROR_CODE
         posInfo = []           :: [logic:'PosInfo'()] | undefined, % = 2
         nextType = 0           :: non_neg_integer() | undefined, % = 3, 32 bits
         nextPrice = 0          :: non_neg_integer() | undefined % = 4, 32 bits
        }).
-endif.

-ifndef('BUYOBJECTREQ_PB_H').
-define('BUYOBJECTREQ_PB_H', true).
-record('BuyObjectReq',
        {type = 0               :: non_neg_integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('BUYOBJECTRES_PB_H').
-define('BUYOBJECTRES_PB_H', true).
-record('BuyObjectRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined, % = 1, enum ERROR_CODE
         posInfo = undefined    :: logic:'PosInfo'() | undefined % = 2
        }).
-endif.

-ifndef('SHOPINFOREQ_PB_H').
-define('SHOPINFOREQ_PB_H', true).
-record('ShopInfoReq',
        {
        }).
-endif.

-ifndef('SHOPINFORES_PB_H').
-define('SHOPINFORES_PB_H', true).
-record('ShopInfoRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined, % = 1, enum ERROR_CODE
         shopInfo = []          :: [logic:'ShopInfo'()] | undefined % = 2
        }).
-endif.

-ifndef('SIGNINFOREQ_PB_H').
-define('SIGNINFOREQ_PB_H', true).
-record('SignInfoReq',
        {
        }).
-endif.

-ifndef('SIGNINFORES_PB_H').
-define('SIGNINFORES_PB_H', true).
-record('SignInfoRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined, % = 1, enum ERROR_CODE
         isSign = false         :: boolean() | 0 | 1 | undefined, % = 2
         totalSignCnt = 0       :: non_neg_integer() | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('SIGNREWARDREQ_PB_H').
-define('SIGNREWARDREQ_PB_H', true).
-record('SignRewardReq',
        {type = 0               :: non_neg_integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('SIGNREWARDRES_PB_H').
-define('SIGNREWARDRES_PB_H', true).
-record('SignRewardRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined % = 1, enum ERROR_CODE
        }).
-endif.

-ifndef('TURNTABLEINFOREQ_PB_H').
-define('TURNTABLEINFOREQ_PB_H', true).
-record('TurntableInfoReq',
        {
        }).
-endif.

-ifndef('TURNTABLEINFORES_PB_H').
-define('TURNTABLEINFORES_PB_H', true).
-record('TurntableInfoRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined, % = 1, enum ERROR_CODE
         turntableCnt = 0       :: non_neg_integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('PLAYTURNTABLEREQ_PB_H').
-define('PLAYTURNTABLEREQ_PB_H', true).
-record('PlayTurntableReq',
        {
        }).
-endif.

-ifndef('PLAYTURNTABLERES_PB_H').
-define('PLAYTURNTABLERES_PB_H', true).
-record('PlayTurntableRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined, % = 1, enum ERROR_CODE
         pos = 0                :: non_neg_integer() | undefined, % = 2, 32 bits
         turntableCnt = 0       :: non_neg_integer() | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('ADREWARDREQ_PB_H').
-define('ADREWARDREQ_PB_H', true).
-record('AdRewardReq',
        {
        }).
-endif.

-ifndef('ADREWARDRES_PB_H').
-define('ADREWARDRES_PB_H', true).
-record('AdRewardRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined % = 1, enum ERROR_CODE
        }).
-endif.

-ifndef('INVITEINFO_PB_H').
-define('INVITEINFO_PB_H', true).
-record('InviteInfo',
        {tokenId = []           :: iolist() | undefined, % = 1
         headUrl = []           :: iolist() | undefined, % = 2
         sort = 0               :: non_neg_integer() | undefined, % = 3, 32 bits
         isReward = false       :: boolean() | 0 | 1 | undefined % = 4
        }).
-endif.

-ifndef('INVITEINFOREQ_PB_H').
-define('INVITEINFOREQ_PB_H', true).
-record('InviteInfoReq',
        {
        }).
-endif.

-ifndef('INVITEINFORES_PB_H').
-define('INVITEINFORES_PB_H', true).
-record('InviteInfoRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined, % = 1, enum ERROR_CODE
         infos = []             :: [logic:'InviteInfo'()] | undefined % = 2
        }).
-endif.

-ifndef('INVITEREWARDREQ_PB_H').
-define('INVITEREWARDREQ_PB_H', true).
-record('InviteRewardReq',
        {id = 0                 :: non_neg_integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('INVITEREWARDRES_PB_H').
-define('INVITEREWARDRES_PB_H', true).
-record('InviteRewardRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined, % = 1, enum ERROR_CODE
         id = 0                 :: non_neg_integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('ORDERINFO_PB_H').
-define('ORDERINFO_PB_H', true).
-record('OrderInfo',
        {orderId = 0            :: non_neg_integer() | undefined, % = 1, 32 bits
         mapId = 0              :: non_neg_integer() | undefined, % = 2, 32 bits
         orderState = 0         :: non_neg_integer() | undefined, % = 3, 32 bits
         orderTime = 0          :: non_neg_integer() | undefined % = 4, 32 bits
        }).
-endif.

-ifndef('ORDERINFOREQ_PB_H').
-define('ORDERINFOREQ_PB_H', true).
-record('OrderInfoReq',
        {
        }).
-endif.

-ifndef('ORDERINFORES_PB_H').
-define('ORDERINFORES_PB_H', true).
-record('OrderInfoRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined, % = 1, enum ERROR_CODE
         orderInfo = []         :: [logic:'OrderInfo'()] | undefined % = 2
        }).
-endif.

-ifndef('ORDERACCEPTREQ_PB_H').
-define('ORDERACCEPTREQ_PB_H', true).
-record('OrderAcceptReq',
        {orderId = 0            :: non_neg_integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('ORDERDELIVERYREQ_PB_H').
-define('ORDERDELIVERYREQ_PB_H', true).
-record('OrderDeliveryReq',
        {orderId = 0            :: non_neg_integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('ORDERREWARDREQ_PB_H').
-define('ORDERREWARDREQ_PB_H', true).
-record('OrderRewardReq',
        {orderId = 0            :: non_neg_integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('ORDERCOMMONRES_PB_H').
-define('ORDERCOMMONRES_PB_H', true).
-record('OrderCommonRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined % = 1, enum ERROR_CODE
        }).
-endif.

-ifndef('WAITERINFO_PB_H').
-define('WAITERINFO_PB_H', true).
-record('WaiterInfo',
        {id = 0                 :: non_neg_integer() | undefined, % = 1, 32 bits
         type = 0               :: non_neg_integer() | undefined, % = 2, 32 bits
         intimate = 0           :: non_neg_integer() | undefined, % = 3, 32 bits
         skillLv = 0            :: non_neg_integer() | undefined % = 4, 32 bits
        }).
-endif.

-ifndef('WAITERINFOREQ_PB_H').
-define('WAITERINFOREQ_PB_H', true).
-record('WaiterInfoReq',
        {
        }).
-endif.

-ifndef('WAITERINFORES_PB_H').
-define('WAITERINFORES_PB_H', true).
-record('WaiterInfoRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined, % = 1, enum ERROR_CODE
         waiterInfo = []        :: [logic:'WaiterInfo'()] | undefined % = 2
        }).
-endif.

-ifndef('WAITERUNLOCKREQ_PB_H').
-define('WAITERUNLOCKREQ_PB_H', true).
-record('WaiterUnlockReq',
        {type = 0               :: non_neg_integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('WAITERUNLOCKRES_PB_H').
-define('WAITERUNLOCKRES_PB_H', true).
-record('WaiterUnlockRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined % = 1, enum ERROR_CODE
        }).
-endif.

-ifndef('WAITERINTIMATEREQ_PB_H').
-define('WAITERINTIMATEREQ_PB_H', true).
-record('WaiterIntimateReq',
        {id = 0                 :: non_neg_integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('WAITERINTIMATERES_PB_H').
-define('WAITERINTIMATERES_PB_H', true).
-record('WaiterIntimateRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined, % = 1, enum ERROR_CODE
         waiterInfo = undefined :: logic:'WaiterInfo'() | undefined % = 2
        }).
-endif.

-ifndef('SPEEDUPREQ_PB_H').
-define('SPEEDUPREQ_PB_H', true).
-record('SpeedUpReq',
        {type = 0               :: non_neg_integer() | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('SPEEDUPRES_PB_H').
-define('SPEEDUPRES_PB_H', true).
-record('SpeedUpRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined, % = 1, enum ERROR_CODE
         coin = 0               :: non_neg_integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('WECHATLOGINREQ_PB_H').
-define('WECHATLOGINREQ_PB_H', true).
-record('WechatLoginReq',
        {wxCode = []            :: iolist() | undefined % = 1
        }).
-endif.

-ifndef('WECHATLOGINRES_PB_H').
-define('WECHATLOGINRES_PB_H', true).
-record('WechatLoginRes',
        {code = 'OK'            :: 'OK' | 'ERR_COMMON_SYS' | 'ERR_COMMON_COST_LIMIT' | 'ERR_COMMON_MAP_LIMIT' | 'ERR_COMMON_BUY_LIMIT' | 'ERR_COMMON_ALREADY_SIGN' | 'ERR_COMMON_REWARD_LIMIT' | 'ERR_COMMON_REWARD_ALREADY' | 'ERR_COMMON_CNT_LIMIT' | 'ERR_COMMON_FUNC_UNOPEND' | 'ERR_COMMON_ORDER_OUTTIME' | 'ERR_COMMON_ORDER_NOACCEPT' | 'ERR_COMMON_INSUFFICIENT_MATERIAL' | 'ERR_COMMON_ORDER_NOCOMMPLET' | 'ERR_COMMON_WAITER_NOEXIST' | 'ERR_COMMON_WAITER_UNLOCK' | 'ERR_COMMON_ORDER_COMMPLET' | 'ERR_COMMON_BUY_ERR' | 'ERR_COMMON_ORDER_ACCEPT' | 'ERR_COMMON_DIAMOND_LIMIT' | integer() | undefined, % = 1, enum ERROR_CODE
         openId = []            :: iolist() | undefined % = 2
        }).
-endif.

-endif.
